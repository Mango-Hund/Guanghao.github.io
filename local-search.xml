<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/07/hello-world/"/>
    <url>/2020/06/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>好用的Git分布式管理系统</title>
    <link href="/2019/11/15/%E5%A5%BD%E7%94%A8%E7%9A%84git/"/>
    <url>/2019/11/15/%E5%A5%BD%E7%94%A8%E7%9A%84git/</url>
    
    <content type="html"><![CDATA[<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><ul><li><p>初始化一个Git仓库，使用<code>git init</code>命令。<br>添加文件到Git仓库，分两步：  </p><ol><li>使用命令git add <file>，注意，可反复多次使用，添加多个文件；</li><li>使用命令git commit -m <message>，完成。</li></ol></li><li><p>要随时掌握工作区的状态，使用<code>git status</code>命令。<br>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p></li><li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。<br>(HEAD^是指的上一个版本HEAD^^指的是上上个版本)</p></li><li><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。  </p></li><li><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。<br>！[分支示意图]（/img/git/1.png）</p></li><li>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到commit中 </li></ul><ol><li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。  </li><li>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。    </li><li>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li></ol><ul><li><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容.  </p></li><li><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。  </p><h3 id="关联远程库推送"><a href="#关联远程库推送" class="headerlink" title="关联远程库推送"></a>关联远程库推送</h3></li><li>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；  </li><li>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；  </li><li>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；  </li></ul><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p><h3 id="克隆远程库项目"><a href="#克隆远程库项目" class="headerlink" title="克隆远程库项目"></a>克隆远程库项目</h3><ul><li>从远程库克隆<br><code>git clone git@github.com:Mango/gitskills.git</code></li><li>要克隆一个仓库，首先必须知道仓库的地址然后使用<code>git clone  git@</code>  <h3 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h3>Git鼓励大量使用分支：</li><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git checkout &lt;name&gt;或者git switch &lt;name&gt;</code></li><li>创建+切换分支：<code>git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code>  </li></ul><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。  </p><ul><li>用<code>git log --graph</code>命令可以看到分支合并图。</li></ul><p>在实际开发中，我们应该按照几个基本原则进行分支管理：<br>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；<br>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；<br>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。  </p><ul><li>Git分支十分强大，在团队开发中应该充分应用。<br>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。  </li><li><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；<br>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。  </p></li><li><p>开发一个新feature，最好新建一个分支；<br>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p></li><li><p>多人协作的工作模式通常是这样：<br>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；<br>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；<br>如果合并有冲突，则解决冲突，并在本地提交；<br>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！<br>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。<br>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p></li><li><p>查看远程库信息，使用<code>git remote -v</code>；<br>本地新建的分支如果不推送到远程，对其他人就是不可见的；  </p></li><li><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；  </p></li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；    </li><li>建立本地分支和远程分支的关联，使用<code>git branch   --set-upstream branch-name origin/branch-name</code>；<br>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。  </li></ul><p>rebase操作可以把本地未push的分叉提交历史整理成直线；<br>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比  </p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul><li>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起<br>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；<br>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...</code>“可以指定标签信息；<br>命令<code>git tag</code>可以查看所有标签。<br>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字<br>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；<br>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；<br>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；<br>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。  <h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2>在GitHub上，可以任意Fork开源仓库；<br>自己拥有Fork后的仓库的读写权限；<br>可以推送pull request给官方仓库来贡献代码。</li></ul><p>让Git显示颜色，会让命令输出看起来更醒目：<br><code>git config --global color.ui true</code></p>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM的使用</title>
    <link href="/2019/10/08/VIM%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/10/08/VIM%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="光标命令"><a href="#光标命令" class="headerlink" title="光标命令"></a>光标命令</h3><pre><code class="hljs properties"><span class="hljs-attr">h</span> <span class="hljs-string">左移一个字符</span><span class="hljs-attr">l</span> <span class="hljs-string">右移一个字符</span><span class="hljs-attr">j</span> <span class="hljs-string">下移一行</span><span class="hljs-attr">k</span> <span class="hljs-string">上移一行</span><span class="hljs-attr">w</span> <span class="hljs-string">前移一个单词，光标停在下一个单词开头</span><span class="hljs-attr">W</span> <span class="hljs-string">移动下一个单词开头，但忽略一些标点</span><span class="hljs-attr">e</span> <span class="hljs-string">前移一个单词，光标停在下一个单词末尾</span><span class="hljs-attr">E</span> <span class="hljs-string">移动到下一个单词末尾，如果词尾有标点，则移动到标点</span><span class="hljs-attr">b</span> <span class="hljs-string">后移一个单词，光标停在上一个单词开头</span><span class="hljs-attr">B</span> <span class="hljs-string">移动到上一个单词开头，忽略一些标点</span><span class="hljs-meta">(</span> <span class="hljs-string">前移1句</span><span class="hljs-meta">)</span> <span class="hljs-string">后移1句</span><span class="hljs-meta">&#123;</span> <span class="hljs-string">前移1段</span><span class="hljs-meta">&#125;</span> <span class="hljs-string">后移1段​</span></code></pre><h3 id="滚屏命令"><a href="#滚屏命令" class="headerlink" title="滚屏命令"></a>滚屏命令</h3><pre><code class="hljs properties"><span class="hljs-meta">ctrl+f</span> <span class="hljs-string">下翻一屏</span><span class="hljs-meta">ctrl+b</span> <span class="hljs-string">上翻一屏</span><span class="hljs-meta">ctrl+d</span> <span class="hljs-string">下翻半屏</span><span class="hljs-meta">ctrl+u</span> <span class="hljs-string">上翻半屏</span><span class="hljs-meta">ctrl+e</span> <span class="hljs-string">向下滚动一行</span><span class="hljs-meta">ctrl+y</span> <span class="hljs-string">向上滚动一行</span><span class="hljs-meta">n%</span> <span class="hljs-string">到文件n%的位置</span><span class="hljs-attr">zz</span> <span class="hljs-string">将当前行移动到屏幕中央</span><span class="hljs-attr">zt</span> <span class="hljs-string">将当前行移动到屏幕顶端</span><span class="hljs-attr">zb</span> <span class="hljs-string">将当前行移动到屏幕底端​</span></code></pre><h3 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h3><pre><code class="hljs excel">第一部分 基本插入I 在当前行第一个非空字符前插入gI 在当前行第一列插入a 在光标后插入A 在当前行最后插入o 在下面新建一行插入O 在上面新建一行插入第二部分 改写插入c[<span class="hljs-built_in">n</span>]w 改写光标后<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个词c[<span class="hljs-built_in">n</span>]l 改写光标后<span class="hljs-built_in">n</span>个字母,l (vim中光标右移一个字符命令)c[<span class="hljs-built_in">n</span>]h 改写光标前<span class="hljs-built_in">n</span>个字母, h (vim中光标左移一个字符命令)[<span class="hljs-built_in">n</span>]cc 修改当前[<span class="hljs-built_in">n</span>]行[<span class="hljs-built_in">n</span>]s 以输入的文本替代光标之后<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符，相当于c[<span class="hljs-built_in">n</span>]l[<span class="hljs-built_in">n</span>]S 删除指定数目的行，并以所输入文本代替之​</code></pre><h3 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h3><pre><code class="hljs excel">y 复制在可视模式下选中的文本yy <span class="hljs-built_in">or</span> Y 复制整行文本y[<span class="hljs-built_in">n</span>]w 复制一(<span class="hljs-built_in">n</span>)个词y[<span class="hljs-built_in">n</span>]l 复制光标右边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符y[<span class="hljs-built_in">n</span>]h 复制光标左边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符y$ 从光标当前位置复制到行尾<span class="hljs-symbol">y0</span> 从光标当前位置复制到行首​﻿​</code></pre><h3 id="剪切和粘贴命令"><a href="#剪切和粘贴命令" class="headerlink" title="剪切和粘贴命令"></a>剪切和粘贴命令</h3><pre><code class="hljs excel">[<span class="hljs-built_in">n</span>]x 剪切光标右边<span class="hljs-built_in">n</span>个字符，相当于d[<span class="hljs-built_in">n</span>]l[<span class="hljs-built_in">n</span>]X 剪切光标左边<span class="hljs-built_in">n</span>个字符，相当于d[<span class="hljs-built_in">n</span>]hp 在光标之后粘贴P 在光标之前粘贴​</code></pre><h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><pre><code class="hljs excel">d 删除（剪切）在可视模式下选中的文本d$ <span class="hljs-built_in">or</span> D 删除（剪切）当前位置到行尾的内容d[<span class="hljs-built_in">n</span>]w 删除（剪切）<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个单词d[<span class="hljs-built_in">n</span>]l 删除（剪切）光标右边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符d[<span class="hljs-built_in">n</span>]h 删除（剪切）光标左边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符<span class="hljs-symbol">d0</span> 删除（剪切）当前位置到行首的内容[<span class="hljs-built_in">n</span>] dd 删除（剪切）<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)行​</code></pre><h3 id="撤销命令"><a href="#撤销命令" class="headerlink" title="撤销命令"></a>撤销命令</h3><pre><code class="hljs properties"><span class="hljs-attr">u</span> <span class="hljs-string">撤销最后执行的命令</span><span class="hljs-attr">U</span> <span class="hljs-string">撤销对整行的修改​</span></code></pre><h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><pre><code class="hljs applescript">/<span class="hljs-built_in">word</span> 在后面的文本中查找<span class="hljs-built_in">word</span>?<span class="hljs-built_in">word</span> 在前面的文本中查找<span class="hljs-built_in">word</span>/pattern/+<span class="hljs-built_in">number</span> 将光标停在包含pattern的行后面第<span class="hljs-built_in">number</span>行上/pattern/-<span class="hljs-built_in">number</span> 将光标停在包含pattern的行前面第<span class="hljs-built_in">number</span>行上n 向后查找下一个N 向前查找下一个​</code></pre><h3 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h3><pre><code class="hljs elixir"><span class="hljs-symbol">:s/old/new/g</span> 可以替换 old 为 new替换两行之间出现的每个匹配串，操作如下<span class="hljs-symbol">:</span><span class="hljs-comment">#,#s/old/new/g 其中 #,# 代表的是替换操作的若干行中首尾两行的行号。</span><span class="hljs-symbol">:%s/old/new/g</span> 则是替换整个文件中的每个匹配串。<span class="hljs-symbol">:%s/old/new/gc</span> 会找到整个文件中的每个匹配串，并且对每个匹配串提示是否进行替换。</code></pre><h3 id="排版命令"><a href="#排版命令" class="headerlink" title="排版命令"></a>排版命令</h3><pre><code class="hljs ruby">&lt;&lt; 向左缩进一个shiftwidth<span class="hljs-meta">&gt;&gt;</span> 向右缩进一个shiftwidth<span class="hljs-symbol">:ce</span>(nter) 本行文字居中<span class="hljs-symbol">:le</span>(ft) 本行文字靠左<span class="hljs-symbol">:ri</span>(ght) 本行文字靠右</code></pre><h3 id="命令行中分屏打开多文件"><a href="#命令行中分屏打开多文件" class="headerlink" title="命令行中分屏打开多文件"></a>命令行中分屏打开多文件</h3><pre><code class="hljs css"><span class="hljs-selector-tag">-o</span> 水平分屏<span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">-o</span><span class="hljs-selector-attr">[n]</span> <span class="hljs-selector-tag">file1</span> <span class="hljs-selector-attr">[file2 ...]</span><span class="hljs-selector-tag">-O</span> 垂直分屏<span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">-O</span><span class="hljs-selector-attr">[n]</span> <span class="hljs-selector-tag">file1</span> <span class="hljs-selector-attr">[file2 ...]</span></code></pre><h3 id="vim中命令模式分屏"><a href="#vim中命令模式分屏" class="headerlink" title="vim中命令模式分屏"></a>vim中命令模式分屏</h3><ol><li>垂直分屏<pre><code class="hljs vim">:<span class="hljs-keyword">vs</span> [<span class="hljs-keyword">file</span>]:<span class="hljs-keyword">vs</span> 将当前文件垂直分屏:<span class="hljs-keyword">vs</span> <span class="hljs-keyword">file</span> 创建新文件并垂直分屏</code></pre></li><li>水平分屏<pre><code class="hljs vim">:<span class="hljs-keyword">sv</span> [<span class="hljs-keyword">file</span>]:<span class="hljs-keyword">sv</span> 将当前文件水平分屏:<span class="hljs-keyword">sv</span> <span class="hljs-keyword">file</span> 创建新文件并水平分屏</code></pre></li></ol><h3 id="分屏屏间光标移动"><a href="#分屏屏间光标移动" class="headerlink" title="分屏屏间光标移动"></a>分屏屏间光标移动</h3><ol><li>分屏间循环移动光标<br><code>ctrl-w ctrl-w</code></li><li>光标移到右边的屏中<br><code>ctrl+w l</code></li><li>光标移到左边的屏中<br><code>ctrl+w h</code></li><li>光标移到上面的屏中<br><code>ctrl+w k</code></li><li>光标移到下边的屏中<br><code>ctrl+w j</code></li><li>光标移到下一个屏中<br><code>ctrl+w w</code></li><li>把光标移到上一个屏中<br><code>ctrl+w p</code></li></ol><h3 id="分屏的移动"><a href="#分屏的移动" class="headerlink" title="分屏的移动"></a>分屏的移动</h3><p>四个键位同上相比均换成了大写</p><ol><li>把当前分屏移动到最左边<br><code>ctrl+w H</code></li><li>把当前分屏移动到上面并扩展到整屏的宽度<br><code>ctrl+w K</code></li><li>把当前分屏移动到最下边<br><code>ctrl+w J</code> </li><li>把当前分屏移动到最右边<br><code>ctrl+w L</code> </li></ol><h3 id="关闭分屏"><a href="#关闭分屏" class="headerlink" title="关闭分屏"></a>关闭分屏</h3><ol><li>关闭当前子屏<br><code>ctrl+wc</code></li><li>关闭当前子屏，若为最后一个，则退出vim<br><code>ctrl+w q</code> </li><li>hide<br><code>:hide 关闭当前窗口</code> </li><li>only<br><code>:only 仅保持此窗口开启</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown的基本语法</title>
    <link href="/2019/06/08/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2019/06/08/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre><code class="hljs clean">#一级标题  ##二级标题  ###三级标题  ####四级标题  #####五级标题  ######六级标题</code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>1     <code>* 1</code></li><li>2     <code>* 2</code></li><li>3     <code>* 3</code></li></ul><ol><li>1.</li><li>2.</li><li>3.</li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>只需要在文本前加入&gt;即可</p><blockquote><p>这里是引用 </p></blockquote><p>注意符合和文本间要空格</p><h2 id="插入图片和链接"><a href="#插入图片和链接" class="headerlink" title="插入图片和链接"></a>插入图片和链接</h2><p>插入链接 [超链接名] (链接地址 “超链接title”)  </p><p>插入图片<br>! [图片alt] (图片地址 ‘’图片title’’)<br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>生成表格<br><pre><code class="hljs ruby"><span class="hljs-params">| Tables        |</span> Are           <span class="hljs-params">| Cool  |</span>  <span class="hljs-params">| ------------- |</span><span class="hljs-symbol">:-------------</span><span class="hljs-symbol">:|</span> -----<span class="hljs-symbol">:|</span>   <span class="hljs-params">| col 3 is      |</span> right-aligned <span class="hljs-params">| $1600 |</span>  <span class="hljs-params">| col 2 is      |</span> centered      <span class="hljs-params">|   $12 |</span>  <span class="hljs-params">| zebra stripes |</span> are neat      <span class="hljs-params">|    $1 |</span></code></pre></p><div class="table-container"><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></div><p>第二行分割表头和内容。<br><code>-</code>有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>原生的语法两边都要用 | 包起来</p><h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><p>用两个<code>*</code>包起来<br><strong>这是加粗的文字</strong><br>用一个<code>*</code>包起来<br><em>这是倾斜的文字</em><br>用<strong><em>包起来  </em></strong>这是斜体加粗的文字<em>*</em><br>用～包起来<br><del>这是加删除线的文字</del></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>单行代码之间用反引号包起来<br>代码块两边分别用三个反引号包起来，且两边的反引号单独占一行<br><code>``` </code><br>  代码…<br>  代码…<br>  代码…<br><code>``` </code></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>只需要三个<em>*</em></p><hr>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
