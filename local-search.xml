<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>APICloud</title>
    <link href="/2020/07/24/APICloud/"/>
    <url>/2020/07/24/APICloud/</url>
    
    <content type="html"><![CDATA[<p><strong><em>第一天：了解APICloud平台、理解APICloud应用设计思想、掌握平台使用流程。学习如何对一款APP进行需求分析、功能分解和架构设计等编码之前重要的准备工作。</em></strong></p><p><a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/99f27562d0b602d064b57569475dc00d.zip" target="_blank" rel="noopener">课程相关资料</a></p><p><a href="http://downloadpkg.apicloud.com/app/download?path=http://7y44yj.com1.z0.glb.clouddn.com/c7432757db98f0d6f742a2522461c0a5_d" target="_blank" rel="noopener">本期课程演示案例（仿每日优鲜APP）</a></p><p>教程更新：<a href="https://github.com/apicloudcom/APICloud-7Days-Online-Training-Tutorials/blob/master/Day1.md" target="_blank" rel="noopener">Github地址</a></p><h1 id="Day1学习-gt-gt-查看配套的视频讲解"><a href="#Day1学习-gt-gt-查看配套的视频讲解" class="headerlink" title="Day1学习&gt;&gt;查看配套的视频讲解"></a>Day1学习<a href="http://www.apicloud.com/video_play/" target="_blank" rel="noopener">&gt;&gt;查看配套的视频讲解</a></h1><ul><li>总体上了解一下APICloud平台，重点介绍相关的学习资源，入门资料，常见的FAQ等</li><li>明确我们这七天要开发一个什么样的APP，明确功能需求，跟上每天的课程节奏，可以课前预习</li><li>梳理出对于一款APP，在开发之前（Coding之前），一些通用而又重要的准备工作，适合于所有APP开发，而非单指APICloud</li></ul><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ol><li><p><strong><a href="#P1">APICloud平台介绍</a></strong></p><p> 1.1 查看APICloud平台能力</p><p> 1.2 APICloud应用的开发模式和使用的技术语言</p><p> 1.3 APICloud技术、产品、生态、案例、商业模式的总体介绍</p><p> 1.4 APICloud开发者相关的服务支撑体系</p><p> 1.5 新手应该如何开始入门APICloud应用开发</p></li><li><p><strong><a href="#P2">APICloud平台使用流程</a></strong></p><p> 2.1 APICloud云控制台使用</p><p> 2.2 选择一款主流H5编码工具并安装相应的APICloud插件</p><p> 2.3 APICloud应用开发的基础操作流程</p></li><li><p><strong><a href="#P3">应用需求分析</a></strong></p><p>  3.1 梳理需求说明文档</p><p>  3.2 进行UE/UI设计</p></li><li><p><strong><a href="#P4">总体架构设计</a></strong></p><p>  4.1 APICloud应用设计思想</p></li><li><p><strong><a href="#P5">UI架构设计</a></strong></p><p> 5.1 APICloud应用的UI组成结构</p><p> 5.2 APICloud界面布局5大组件</p><p> 5.3 APICloud混合渲染技术原理</p><p> 5.4 使用APICloud5大UI组件完成应用UI架构设计</p><p> 5.5 输出APP的UI架构设计文档</p></li><li><p><strong><a href="#P6">功能点分解</a></strong></p><p> 6.1 基于需求说明，梳理出主要功能点</p><p>6.2 为每个功能点，给出合适的技术实现方案</p><p>6.3 在APICloud聚合API找到功能点对应的模块</p><p>6.4 输出APP的功能模块分解文档</p></li><li><p><strong><a href="#P7">开放服务选择</a></strong></p><p> 7.1 基于需求说明，梳理出需要使用的开放服务</p><p> 7.2 调研不同的开放服务商所提供的服务是否能满足自己应用的需求</p><p> 7.3 在APICloud聚合API找到对应的开放服务模块</p><p> 7.4 输出APP的开放服务分解文档</p></li><li><p><strong><a href="#P8">数据接口定义</a></strong></p><p> 8.1 定义服务端接口文档</p><p> 8.2 输出服务端接口调试文件</p></li><li><p><strong><a href="#P9">应用证书和第三方Key申请</a></strong></p><p> 9.1 申请应用证书</p><p> 9.2 确定应用包名</p><p> 9.3 申请开放平台相关Key</p></li></ol><div id="P1"></div>## 1. 了解APICloud平台<h3 id="1-1-查看APICloud平台能力-gt-gt-查看配套的视频讲解"><a href="#1-1-查看APICloud平台能力-gt-gt-查看配套的视频讲解" class="headerlink" title="1.1 查看APICloud平台能力 &gt;&gt;查看配套的视频讲解"></a>1.1 查看APICloud平台能力 <a href="http://www.apicloud.com/video_play/" target="_blank" rel="noopener">&gt;&gt;查看配套的视频讲解</a></h3><blockquote><p>要使用APICloud平台开发APP，很多用户的第一个问题是：APICloud平台能否满足自己的APP开发需求? </p><p>可以带着目的来了解APICloud平台能力，掌握如何快速查找相关的能力</p></blockquote><p>  <a href="http://docs.apicloud.com/" target="_blank" rel="noopener">查看API文档</a><br>  <em>了解APICloud文档组织结构，学会通过文档搜索，找到需要的功能</em></p><p>APICloud平台功能体系:</p><p>  <img src="http://docs.apicloud.com/img/docImage/seven-course/day1/1.1.png" srcset="/img/loading.gif" alt="APICloud扩展能力"></p><h3 id="1-2-APICloud应用的开发模式和使用的技术语言-gt-gt-查看配套的视频讲解"><a href="#1-2-APICloud应用的开发模式和使用的技术语言-gt-gt-查看配套的视频讲解" class="headerlink" title="1.2 APICloud应用的开发模式和使用的技术语言&gt;&gt;查看配套的视频讲解"></a>1.2 APICloud应用的开发模式和使用的技术语言<a href="http://www.apicloud.com/video_play/" target="_blank" rel="noopener">&gt;&gt;查看配套的视频讲解</a></h3><blockquote><p>使用APICloud开发APP需要什么技术? 自己的团队是否适合?</p><p>学习曲线是什么样子？入门是否简单？</p></blockquote><p> APICloud应用开发模式： <em>标准的HTML/CSS/JS + APICloud扩展API</em><br><img src="http://docs.apicloud.com/img/docImage/seven-course/day1/1.2.png" srcset="/img/loading.gif" alt="图片说明"></p><p>  APICloud扩展API调用方式：<br>  就是使用标准的JavaScript语法，与标准的JavaScript对象调用方式一致。<br>  <pre><code class="hljs reasonml">核心模块在 window.api 对象下，不需要单独引用，可以直接调用api.<span class="hljs-keyword">method</span><span class="hljs-constructor">Name(<span class="hljs-params">param</span>, <span class="hljs-params">callback</span>)</span>;扩展模块需要 require 引入，遵守 CommonJS 规范var <span class="hljs-keyword">module</span> = api.require('moduleName');<span class="hljs-keyword">module</span>.<span class="hljs-keyword">method</span><span class="hljs-constructor">Name(<span class="hljs-params">param</span>, <span class="hljs-params">callback</span>)</span>;param: &#123;&#125; <span class="hljs-comment">//参数，是一个JSON对象</span>callback: <span class="hljs-keyword">function</span>(ret, err)&#123;&#125; <span class="hljs-comment">//回调函数，是一个Function对象，方法调用的结果通过此函数返回</span></code></pre><br>  例如：</p><ul><li><p>打开新窗口：<a href="http://docs.apicloud.com/Client-API/api#33" target="_blank" rel="noopener">api.openWin();</a></p></li><li><p>打开系统通讯录：<a href="http://docs.apicloud.com/Client-API/api#26" target="_blank" rel="noopener">api.openContacts();</a></p></li><li><p>录音：<a href="http://docs.apicloud.com/Client-API/api#54" target="_blank" rel="noopener">api.startRecord();</a></p></li><li><p>缓存网络图片：<a href="http://docs.apicloud.com/Client-API/api#78" target="_blank" rel="noopener">api.imageCache();</a></p></li><li><p>加载fs模块：<a href="http://docs.apicloud.com/Client-API/api#000" target="_blank" rel="noopener">var fs = api.require(‘fs’);</a></p></li><li><p>新建一个文件：<a href="http://docs.apicloud.com/Client-API/Func-Ext/fs#2" target="_blank" rel="noopener">fs.createFile();</a></p></li><li><p>加载二维码/条形码扫描模块：<a href="http://docs.apicloud.com/Client-API/api#000" target="_blank" rel="noopener">var scanner = api.require(‘FNScanner’);</a></p></li><li><p>打开二维码/条形码扫描: <a href="http://docs.apicloud.com/Client-API/Func-Ext/FNScanner#1" target="_blank" rel="noopener">scanner.openScanner();</a></p><blockquote><p><em>你可以把H5理解一门技术一门语言，但他还没达到一个平台的水平</em></p></blockquote></li></ul><p>为什么要扩展API？</p><p>  <img src="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/f062adcb294b2ebb4c61e4703bec3a6e.png" srcset="/img/loading.gif" alt="为什么扩展API"></p><p><a href="http://www.apicloud.com/modulestore" target="_blank" rel="noopener">APICloud聚合API</a></p><p>APICloud平台定位：</p><p>  <img src="http://docs.apicloud.com/img/docImage/seven-course/day1/1.4.png" srcset="/img/loading.gif" alt="APICloud平台定位"></p><h3 id="1-3-APICloud技术、产品、生态、案例、商业模式的总体介绍-gt-gt-查看配套的视频讲解"><a href="#1-3-APICloud技术、产品、生态、案例、商业模式的总体介绍-gt-gt-查看配套的视频讲解" class="headerlink" title="1.3 APICloud技术、产品、生态、案例、商业模式的总体介绍&gt;&gt;查看配套的视频讲解"></a>1.3 APICloud技术、产品、生态、案例、商业模式的总体介绍<a href="http://www.apicloud.com/video_play/" target="_blank" rel="noopener">&gt;&gt;查看配套的视频讲解</a></h3><blockquote><p>从整体各个方面来看APICloud怎么样？</p><p>开发模式、技术优势、功能体验、谁在使用、开发者生态、商业模式等等；</p></blockquote><p><em>推荐视频：<a href="http://www.apicloud.com/video_list" target="_blank" rel="noopener">APICloud视频之初级代码篇第1-3讲</a></em></p><h3 id="1-4-了解APICloud开发者相关的服务支撑体系-gt-gt-查看配套的视频讲解"><a href="#1-4-了解APICloud开发者相关的服务支撑体系-gt-gt-查看配套的视频讲解" class="headerlink" title="1.4 了解APICloud开发者相关的服务支撑体系&gt;&gt;查看配套的视频讲解"></a>1.4 了解APICloud开发者相关的服务支撑体系<a href="http://www.apicloud.com/video_play/" target="_blank" rel="noopener">&gt;&gt;查看配套的视频讲解</a></h3><blockquote><p>如何解决开发者的问题？能为开发者提供哪些机会？是否有围绕开发者的生态模式？</p><p>是否有一个完善的开发者相关支持服务体系来方便技术学习和社区交流？</p><p>是否有一个完善的生态体系，来支持支撑APICloud APP开发，来满足各种不同的行业需求，来支撑实现需求复杂，功能强大的应用。</p></blockquote><ul><li><a href="http://www.apicloud.com/" target="_blank" rel="noopener">开发平台</a></li><li><a href="http://www.apicloud.com/devtools" target="_blank" rel="noopener">开发工具</a></li><li><a href="http://docs.apicloud.com/" target="_blank" rel="noopener">开发文档</a></li><li><a href="http://community.apicloud.com/bbs/forum.php" target="_blank" rel="noopener">开发者社区</a></li><li><a href="http://www.apicloud.com/vipservice/plan" target="_blank" rel="noopener">VIP技术支持</a></li><li><a href="http://www.apicloud.com/source_code" target="_blank" rel="noopener">示例源码分享</a></li><li><a href="http://www.apicloud.com/cases" target="_blank" rel="noopener">商业案例展示</a></li><li><a href="http://www.apicloud.com/modulestore" target="_blank" rel="noopener">模块Store（聚合API）</a></li><li><a href="http://app.apicloud.com/appCustom" target="_blank" rel="noopener">模版Store</a></li><li><a href="http://app.apicloud.com/customIntroduce" target="_blank" rel="noopener">应用定制服务</a></li></ul><h3 id="1-5-新手应该如何开始入门APICloud应用开发-gt-gt-查看配套的视频讲解"><a href="#1-5-新手应该如何开始入门APICloud应用开发-gt-gt-查看配套的视频讲解" class="headerlink" title="1.5 新手应该如何开始入门APICloud应用开发&gt;&gt;查看配套的视频讲解"></a>1.5 新手应该如何开始入门APICloud应用开发<a href="http://www.apicloud.com/video_play/" target="_blank" rel="noopener">&gt;&gt;查看配套的视频讲解</a></h3><blockquote><p>如何能快速入门？<br>最好的学习资料来哪？</p></blockquote><ul><li><a href="http://docs.apicloud.com/APICloud/junior-develop-guide" target="_blank" rel="noopener">新手开发指南</a></li><li><a href="http://community.apicloud.com/bbs/forum.php?mod=viewthread&tid=7926&extra=page%253D1" target="_blank" rel="noopener">新手教程合集贴</a></li><li><a href="http://www.apicloud.com/video_list" target="_blank" rel="noopener">视频教程</a></li><li><a href="http://www.apicloud.com/vipservice/course" target="_blank" rel="noopener">线上培训</a></li></ul><div id="P2"></div>## 2. 掌握APICloud平台使用（最基本）<h3 id="2-1-掌握APICloud控制台使用-gt-gt-查看配套的视频讲解"><a href="#2-1-掌握APICloud控制台使用-gt-gt-查看配套的视频讲解" class="headerlink" title="2.1 掌握APICloud控制台使用&gt;&gt;查看配套的视频讲解"></a>2.1 <a href="https://www.apicloud.com/console" target="_blank" rel="noopener">掌握APICloud控制台使用</a><a href="http://www.apicloud.com/video_play/" target="_blank" rel="noopener">&gt;&gt;查看配套的视频讲解</a></h3><p>APICloud应用开发的基本流程</p><ul><li>创建应用</li><li>配置图标启动页</li><li>设置证书</li><li>同步代码</li><li>添加模块</li><li>云编译</li></ul><p><em>推荐视频：<a href="http://www.apicloud.com/video_list" target="_blank" rel="noopener">APICloud视频之初级代码篇第5讲</a></em></p><h3 id="2-2-选定一款主流前端编码工具并安装相应的APICloud插件-gt-gt-查看配套的视频讲解"><a href="#2-2-选定一款主流前端编码工具并安装相应的APICloud插件-gt-gt-查看配套的视频讲解" class="headerlink" title="2.2 选定一款主流前端编码工具并安装相应的APICloud插件&gt;&gt;查看配套的视频讲解"></a>2.2 <a href="https://www.apicloud.com/devtools" target="_blank" rel="noopener">选定一款主流前端编码工具并安装相应的APICloud插件</a><a href="http://www.apicloud.com/video_play/" target="_blank" rel="noopener">&gt;&gt;查看配套的视频讲解</a></h3><p>APICloud应用编码调试原理：</p><p><img src="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/5d080161882e765944c7756405d43eca.png" srcset="/img/loading.gif" alt="编码调试原理"></p><p>APPLoader加载Widget的路径：</p><ul><li>android: <strong>sdcard/UZMap/wgt/</strong></li><li>ios: <strong>Document/uzfs/wgt/</strong></li></ul><p>目前APICloud开发工具插件支持：Sublime Text、WebStorm、Atom、Eclipse.</p><p><strong><em>推荐使用：Sublime Text + APICloud Plugin</em></strong></p><p><strong><em>推荐使用：Atom + APICloud Plugin</em></strong></p><p>插件功能包括：</p><ul><li>新建应用</li><li>新建文件</li><li>自定义代码提示</li><li>USB真机同步</li><li>WiFi真机同步</li><li>USB日志输出</li><li>WiFi日志输出</li><li>官方Loader</li><li>自定义Loader</li><li>开启Debug模式</li><li>查看错误提示</li></ul><p><em>推荐视频：<a href="http://www.apicloud.com/video_list" target="_blank" rel="noopener">Sublime使用教程Window&amp;Mac</a></em></p><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Tools/sublime-apicloud-plugin" target="_blank" rel="noopener">Sublime插件使用说明</a></em></p><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Tools/Atom-apicloud-plugin" target="_blank" rel="noopener">Atom插件使用说明</a></em></p><p><em>推荐视频：<a href="http://www.apicloud.com/video_play?list=2&index=1" target="_blank" rel="noopener">APICloud视频之初级代码篇第9-11讲自定义loader使用</a></em></p><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Guide/Custom_Loader" target="_blank" rel="noopener">自定义loader说明</a></em></p><p>APICloud CLI工具</p><p>一套基于Nodejs的命令行，包括APICloud工具插件全部核心功能，基于GPL3.0开源。开发者可以通过调用命令行的方式将APICloud工具轻松集成到任何前端开发工具中。</p><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Tools/apicloud-cli" target="_blank" rel="noopener">apicloud-cli 工具使用说明</a></em></p><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Tools/apicloud-tools-core" target="_blank" rel="noopener">APICloud 开发工具核心库</a></em></p><h3 id="2-3-APICloud应用开发的基础操作流程-gt-gt-查看配套的视频讲解"><a href="#2-3-APICloud应用开发的基础操作流程-gt-gt-查看配套的视频讲解" class="headerlink" title="2.3 APICloud应用开发的基础操作流程&gt;&gt;查看配套的视频讲解"></a>2.3 APICloud应用开发的基础操作流程<a href="http://www.apicloud.com/video_play/" target="_blank" rel="noopener">&gt;&gt;查看配套的视频讲解</a></h3><p><img src="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/63253d6d0006c251ebb45ac9849b2888.png" srcset="/img/loading.gif" alt="基础开发流程"></p><p>在APICloud平台上有4种查看APP运行效果的手段：</p><ul><li>官方AppLoader</li><li>自定义AppLoader</li><li>云编译测试包</li><li>云编译正式包</li></ul><div id="P3"></div>## 3. 应用需求分析[>>查看配套的视频讲解](http://www.apicloud.com/video_play/)<h3 id="3-1-梳理需求"><a href="#3-1-梳理需求" class="headerlink" title="3.1 梳理需求"></a>3.1 梳理需求</h3><p><em>输出需求说明文档： <a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/3df056696e3156d08cbaeed4aed1c42c.xlsx" target="_blank" rel="noopener">requirement-spec.xml</a></em></p><h3 id="3-2-进行UE-UI设计"><a href="#3-2-进行UE-UI设计" class="headerlink" title="3.2 进行UE/UI设计"></a>3.2 进行UE/UI设计</h3><p><em>输出UE/UI设计： 产品原型文件、原始UI设计图、UI切图</em></p><div id="P4"></div>## 4. 整体架构设计<h3 id="4-1-理解APICloud应用设计思想-gt-gt-查看配套的视频讲解"><a href="#4-1-理解APICloud应用设计思想-gt-gt-查看配套的视频讲解" class="headerlink" title="4.1 理解APICloud应用设计思想&gt;&gt;查看配套的视频讲解"></a>4.1 理解APICloud应用设计思想<a href="hhttp://www.apicloud.com/video_play/">&gt;&gt;查看配套的视频讲解</a></h3><p>Client/Cloud架构设计，完整的前后端分离，在移动端实现界面和功能，在服务端提供数据和服务。</p><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day1/1.6.png" srcset="/img/loading.gif" alt="APICloud应用架构设计"></p><div id="P5"></div>## 5. UI架构设计[>>查看配套的视频讲解](http://www.apicloud.com/video_play/)<p><em>使用APICloud界面布局5大组件进行UI架构设计</em></p><h3 id="5-1-APICloud应用的UI组成结构"><a href="#5-1-APICloud应用的UI组成结构" class="headerlink" title="5.1 APICloud应用的UI组成结构"></a>5.1 APICloud应用的UI组成结构</h3><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day1/1.7.png" srcset="/img/loading.gif" alt="图片说明"></p><h3 id="5-2-APICloud界面布局5大组件"><a href="#5-2-APICloud界面布局5大组件" class="headerlink" title="5.2 APICloud界面布局5大组件"></a>5.2 APICloud界面布局5大组件</h3><ul><li><p>Widget: Widget是APICloud应用运行管理的最小单位，每一个APICloud应用至少包含一个Widget，每一个Widget都具有独立的代码、资源和窗口系统，Widget之间可以相互调用。Widget在UI上表现为一个独立的窗口容器，内部可以包含Layout、Window或UIModule，并且同一时刻，应用中只能有一个Widget在界面上显示。</p><ul><li>打开Widget:&nbsp;<a href="http://docs.apicloud.com/Client-API/api#32" target="_blank" rel="noopener">api.openWidget()</a></li><li>关闭Widget:&nbsp;<a href="http://docs.apicloud.com/Client-API/api#14" target="_blank" rel="noopener">api.closeWidget()</a></li></ul></li><li><p>Layout: Layout实现了某一种特定的布局效果，通过定义好的布局来组织一组Window或Frame来完成整体的界面布局效果。每一个Layout内部可以包含Window和Frame。<br>(<a href="http://docs.apicloud.com/Client-API/api#12" target="_blank" rel="noopener">http://docs.apicloud.com/Client-API/api#12</a>)</p><ul><li>打开FrameGroup:&nbsp;<a href="http://docs.apicloud.com/Client-API/api#28" target="_blank" rel="noopener">api.openFrameGroup()</a></li><li>关闭FrameGroup:&nbsp;<a href="http://docs.apicloud.com/Client-API/api#11" target="_blank" rel="noopener">api.closeFrameGroup()</a></li></ul></li><li><p>Window: Window是一个独立的Naive窗口（Android或iOS），是APICloud应用界面布局的基本组件，每一个APP都是由多个Window组成。Window所承载的内容其所加载的HTML页面决定。每一个Window都是独立的Web容器，有自己独立的Dom树结构，并且独立进行渲染。Window的起点位于屏幕左上角，宽高占满屏幕，不可修改。Window内部可以包含Layout、Frame和UIModule。</p><ul><li>打开Window:&nbsp;<a href="http://docs.apicloud.com/Client-API/api#33" target="_blank" rel="noopener">api.openWin()</a></li><li>关闭Window:&nbsp;<a href="http://docs.apicloud.com/Client-API/api#15" target="_blank" rel="noopener">api.closeWin()</a></li></ul></li><li><p>Frame: Frame是一个独立的Native视图（Android或iOS），视图所承载的内容其所加载的HTML页面决定。每一个Frame都是独立的Web容器，有自己独立的Dom树结构，并且独立进行渲染。Frame的位置和宽高可通过参数配置。Frame通常作为一个子视图，嵌入到Window或Layout中，Frame内部可以包含UIModule。</p><ul><li>打开Frame:&nbsp;<a href="http://docs.apicloud.com/Client-API/api#27" target="_blank" rel="noopener">api.openFrame()</a></li><li>关闭Frame:&nbsp;<a href="http://docs.apicloud.com/Client-API/api#10" target="_blank" rel="noopener">api.closeFrame()</a></li></ul></li><li><p>UIModule: UI模块是由一组Native的视图组成，来实现某种特定的UI界面效果，可以是全屏展示也可以只填充指定的区域。每一个UI模块都具有自己独立的生命周期、界面布局、事件管理和数据交换。UI模块通常需要嵌入到Window或Frame中使用。</p><ul><li>加载UIModule:&nbsp;<a href="">api.require()</a></li><li>打开UIModule(以UIScrollPicture为例)(:&nbsp;<a href="http://docs.apicloud.com/Client-API/UI-Layout/UIScrollPicture#m1" target="_blank" rel="noopener">UIScrollPicture.open()</a></li><li>关闭UIModule(以UIScrollPicture为例)(:&nbsp;<a href="http://docs.apicloud.com/Client-API/UI-Layout/UIScrollPicture#m2" target="_blank" rel="noopener">UIScrollPicture.close()</a></li></ul></li></ul><h3 id="5-3-理解APICloud混合渲染技术原理-gt-gt-查看配套的视频讲解"><a href="#5-3-理解APICloud混合渲染技术原理-gt-gt-查看配套的视频讲解" class="headerlink" title="5.3 理解APICloud混合渲染技术原理&gt;&gt;查看配套的视频讲解"></a>5.3 理解APICloud混合渲染技术原理<a href="http://www.apicloud.com/video_play/" target="_blank" rel="noopener">&gt;&gt;查看配套的视频讲解</a></h3><p>浏览器的页面渲染机制：</p><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day1/1.8.png" srcset="/img/loading.gif" alt="图片说明"></p><p>APICloud混合渲染机制：</p><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day1/1.9.png" srcset="/img/loading.gif" alt="图片说明"></p><h3 id="5-4-使用APICloud5大UI组件完成应用UI架构设计-gt-gt-查看配套的视频讲解"><a href="#5-4-使用APICloud5大UI组件完成应用UI架构设计-gt-gt-查看配套的视频讲解" class="headerlink" title="5.4 使用APICloud5大UI组件完成应用UI架构设计&gt;&gt;查看配套的视频讲解"></a>5.4 使用APICloud5大UI组件完成应用UI架构设计<a href="http://www.apicloud.com/video_play/" target="_blank" rel="noopener">&gt;&gt;查看配套的视频讲解</a></h3><p>根据产品原型和UI设计图，按界面逐个分析。</p><blockquote><p><em>编写一个小的界面布局的测试<a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/14839882e62a7c7c200eabdfe4729ff0.zip" target="_blank" rel="noopener">Demo</a>。。。</em></p></blockquote><h3 id="5-5-输出APP的UI架构设计文档"><a href="#5-5-输出APP的UI架构设计文档" class="headerlink" title="5.5 输出APP的UI架构设计文档"></a>5.5 输出APP的UI架构设计文档</h3><p>UI架构设计文档：<a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/5314e37fd76105e2bf70d0bf964db340.xmind" target="_blank" rel="noopener">ui-architecture.xmind</a></p><div id="P6"></div>## 6. 功能点分解[>>查看配套的视频讲解](http://www.apicloud.com/video_play/)<h3 id="6-1-基于需求说明，梳理出主要功能点"><a href="#6-1-基于需求说明，梳理出主要功能点" class="headerlink" title="6.1 基于需求说明，梳理出主要功能点"></a>6.1 基于需求说明，梳理出主要功能点</h3><h3 id="6-2-为每个功能点，给出合适的技术实现方案"><a href="#6-2-为每个功能点，给出合适的技术实现方案" class="headerlink" title="6.2 为每个功能点，给出合适的技术实现方案"></a>6.2 为每个功能点，给出合适的技术实现方案</h3><h3 id="6-3-在APICloud聚合API找到功能点对应的模块"><a href="#6-3-在APICloud聚合API找到功能点对应的模块" class="headerlink" title="6.3 在APICloud聚合API找到功能点对应的模块"></a>6.3 在APICloud聚合API找到功能点对应的模块</h3><h3 id="6-4-输出APP的功能模块分解文档：function-modules-xmind"><a href="#6-4-输出APP的功能模块分解文档：function-modules-xmind" class="headerlink" title="6.4 输出APP的功能模块分解文档：function-modules.xmind"></a>6.4 输出APP的功能模块分解文档：<a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/2966eb9edaa13ccd7b37fe4e57512be9.xmind" target="_blank" rel="noopener">function-modules.xmind</a></h3><div id="P7"></div>## 7. 开放服务选择[>>查看配套的视频讲解](http://www.apicloud.com/video_play/)<h3 id="7-1-基于需求说明，梳理出需要使用的开放服务"><a href="#7-1-基于需求说明，梳理出需要使用的开放服务" class="headerlink" title="7.1 基于需求说明，梳理出需要使用的开放服务"></a>7.1 基于需求说明，梳理出需要使用的开放服务</h3><h3 id="7-2-调研不同的开放服务商所提供的服务是否能满足自己应用的需求"><a href="#7-2-调研不同的开放服务商所提供的服务是否能满足自己应用的需求" class="headerlink" title="7.2 调研不同的开放服务商所提供的服务是否能满足自己应用的需求"></a>7.2 调研不同的开放服务商所提供的服务是否能满足自己应用的需求</h3><h3 id="7-3-在APICloud聚会API找到对应的开放服务模块"><a href="#7-3-在APICloud聚会API找到对应的开放服务模块" class="headerlink" title="7.3 在APICloud聚会API找到对应的开放服务模块"></a>7.3 在APICloud聚会API找到对应的开放服务模块</h3><h3 id="7-4-输出APP的开放服务分解文档：service-modules-xmind"><a href="#7-4-输出APP的开放服务分解文档：service-modules-xmind" class="headerlink" title="7.4 输出APP的开放服务分解文档：service-modules.xmind"></a>7.4 输出APP的开放服务分解文档：<a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/e7db23fc8e152992c65c8cee53b2dc94.xmind" target="_blank" rel="noopener">service-modules.xmind</a></h3><div id="P8"></div>## 8. 数据接口定义[>>查看配套的视频讲解](http://www.apicloud.com/video_play/)<p>APICloud应用架构是Client＋Cloud架构，终端实现UI布局和功能，云端提供数据和服务。开发APICloud应用，与服务器端程序的实现方式和开发语言没有任何关系。</p><p><strong>可以选择使用APICloud数据云，也可以自己来开发服务端接口</strong></p><h3 id="8-1-定义输出服务端接口文档：server-api-pdf"><a href="#8-1-定义输出服务端接口文档：server-api-pdf" class="headerlink" title="8.1 定义输出服务端接口文档：server-api.pdf"></a>8.1 定义输出服务端接口文档：<a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/7cb2dd66607d91cd7957d548b4e7c1e6.pdf" target="_blank" rel="noopener">server-api.pdf</a></h3><h3 id="8-2-输出服务端接口调试文件：server-api-postman-collection"><a href="#8-2-输出服务端接口调试文件：server-api-postman-collection" class="headerlink" title="8.2 输出服务端接口调试文件：server-api.postman_collection"></a>8.2 输出服务端接口调试文件：<a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/99d3e5fb1adff0f0cca6908db45a7969.postman_collection" target="_blank" rel="noopener">server-api.postman_collection</a></h3><div id="P9"></div>## 9. 应用证书和第三方Key申请[>>查看配套的视频讲解](http://www.apicloud.com/video_play/)<h3 id="9-1-申请应用证书"><a href="#9-1-申请应用证书" class="headerlink" title="9.1 申请应用证书"></a>9.1 申请应用证书</h3><ul><li>Android：xxx.keystore文件（例如：sxo2o.keystore）</li><li>iOS：xxx.p12文件、xxx.mobileprovision文件（例如：sxo2o.p12、sxo2o.mobileprovision）</li></ul><p><em>推荐文档：</em></p><p><a href="http://docs.apicloud.com/Dev-Guide/Android-License-Application-Guidance" target="_blank" rel="noopener">安卓证书帮助文档</a></p><p><a href="http://docs.apicloud.com/Dev-Guide/iOS-License-Application-Guidance" target="_blank" rel="noopener">苹果证书帮助文档</a></p><h3 id="9-2-确定应用包名"><a href="#9-2-确定应用包名" class="headerlink" title="9.2 确定应用包名"></a>9.2 确定应用包名</h3><ul><li><p>Android：com.company.app（例如：com.apicloud.sxo2o）</p></li><li><p>iOS：com.company.app（例如：com.apicloud.sxo2o）</p></li></ul><h3 id="9-3-申请开放平台相关Key"><a href="#9-3-申请开放平台相关Key" class="headerlink" title="9.3 申请开放平台相关Key"></a>9.3 申请开放平台相关Key</h3><ul><li>百度地图<pre><code class="hljs pgsql">&lt;feature <span class="hljs-type">name</span>="bMap"&gt;        &lt;param <span class="hljs-type">name</span>="android_api_key" <span class="hljs-keyword">value</span>="0nKBc8SkhvOGxGOLZ96Q6iWXcSU0iOhe" /&gt;                &lt;param <span class="hljs-type">name</span>="ios_api_key" <span class="hljs-keyword">value</span>="iObZMn4A1N6pxQBhgG4ElbHmaDNshPZR" /&gt;          &lt;/feature&gt;</code></pre></li></ul><p><em>推荐文档</em></p><p><a href="http://docs.apicloud.com/Client-API/Open-SDK/bMap" target="_blank" rel="noopener">百度地图模块文档</a></p><p><a href="http://docs.apicloud.com/Others/Open-SDK-Integration-Guide/baidu" target="_blank" rel="noopener">百度开放平台接入指南</a></p><ul><li>微信登录<pre><code class="hljs pgsql">&lt;feature <span class="hljs-type">name</span>="wx"&gt;       &lt;param <span class="hljs-type">name</span>="urlScheme" <span class="hljs-keyword">value</span>="wxd0d84bbf23b4a0e4"/&gt;              &lt;param <span class="hljs-type">name</span>="apiKey" <span class="hljs-keyword">value</span>="wxd0d84bbf23b4a0e4"/&gt;              &lt;param <span class="hljs-type">name</span>="apiSecret" <span class="hljs-keyword">value</span>="a354f72aa1b4c2b8eaad137ac81434cd"/&gt;        &lt;/feature&gt;</code></pre></li></ul><p><em>推荐文档</em></p><p><a href="http://docs.apicloud.com/Client-API/Open-SDK/wx" target="_blank" rel="noopener">微信模块文档</a></p><p><a href="http://docs.apicloud.com/Others/Open-SDK-Integration-Guide/weChat" target="_blank" rel="noopener">微信开放平台接入指南</a></p><ul><li>个推推送<pre><code class="hljs pgsql">&lt;feature <span class="hljs-type">name</span>="pushGeTui"&gt;        &lt;param <span class="hljs-type">name</span>="ios_appkey" <span class="hljs-keyword">value</span>="xCGkZR1bCp6gscLUB20Dl4" /&gt;                &lt;param <span class="hljs-type">name</span>="ios_appid" <span class="hljs-keyword">value</span>="G5lfFkQZ008VoZUXydA2r2" /&gt;                &lt;param <span class="hljs-type">name</span>="ios_appsecret" <span class="hljs-keyword">value</span>="RuxlC8ExWA7T4NFoJhQFd6" /&gt;                &lt;param <span class="hljs-type">name</span>="android_appkey" <span class="hljs-keyword">value</span>="SsYLDV34ik5CBgtdzCQ608" /&gt;                &lt;param <span class="hljs-type">name</span>="android_appid" <span class="hljs-keyword">value</span>="dASHvkJSLc9Q5vvSEALdI4" /&gt;                &lt;param <span class="hljs-type">name</span>="android_appsecret" <span class="hljs-keyword">value</span>="BmjqFXsFDS6SVMyV2JXglA" /&gt;            &lt;/feature&gt;</code></pre></li></ul><p><em>推荐文档</em></p><p><a href="http://docs.apicloud.com/Client-API/Open-SDK/pushGeTui" target="_blank" rel="noopener">个推模块文档</a></p><p><a href="http://docs.apicloud.com/Others/Open-SDK-Integration-Guide/pushGeTui_manual" target="_blank" rel="noopener">个推开放平台接入指南</a></p><p><strong><em>第二天：理解APICloud应用执行流程，掌握界面布局相关API使用，了解屏幕适配原理，从0开始搭建整体APP框架，完成所有界面跳转，输出完整的APP静态数据版本。</em></strong></p><p><a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/e50c068b5af5499d5a4e3b21d311a0c8.zip" target="_blank" rel="noopener">第二天课程源码下载</a></p><p>教程更新：<a href="https://github.com/apicloudcom/APICloud-7Days-Online-Training-Tutorials/blob/master/Day2.md" target="_blank" rel="noopener">Github地址</a></p><h1 id="Day2学习"><a href="#Day2学习" class="headerlink" title="Day2学习"></a>Day2学习</h1><p>–</p><ul><li>APICloud应用的执行流程，Main Widget和Root Window的创建时机</li><li>为什么启动会加载index.html和执行apiready函数</li><li>APICloud屏幕适配的原理，弹性响应式和流式结合的布局方式</li><li>如何搭建APP的UI结构</li></ul><h2 id="主要内容-1"><a href="#主要内容-1" class="headerlink" title="主要内容"></a>主要内容</h2><p>–</p><ol><li><p><strong><a href="#P1">APICloud应用执行流程</a></strong></p><p> 1.1 APICloud应用执行流程说明</p></li><li><p><strong><a href="#P2">引擎初始化后默认创建的两个UI组件实例</a></strong></p><p> 2.1 主Widget容器（Main Widget）</p><p> 2.2 根窗口（Root Window）</p></li><li><p><strong><a href="#P3">config配置文件使用</a></strong></p><p> 3.1 了解config文件作用</p><p> 3.2 掌握config文件使用</p></li><li><p><strong><a href="#P4">引擎的两个重要事件</a></strong></p><p> 4.1 content事件</p><p> 4.2 apiready事件</p></li><li><p><strong><a href="#P5">查看api对象功能</a></strong></p><p> 5.1 查看api对象功能列表</p><p> 5.2 api对象常用方法使用</p></li><li><p><strong><a href="#P6">屏幕适配</a></strong></p><p> 6.1 viewport设置</p><p> 6.2 UI尺寸</p><p> 6.3 量图标准</p></li><li><p><strong><a href="#P7">前端框架</a></strong></p><p> 7.1 APICloud前端框架的作用和设计思想</p><p> 7.2 APICloud前端框架使用</p></li><li><p><strong><a href="#P8">状态栏处理</a></strong></p><p> 8.1 沉浸式状态栏效果说明</p><p> 8.2 沉浸式效果实现</p><p> 8.3 修改状态栏样式</p></li><li><p><strong><a href="#P9">界面布局相关API使用</a></strong></p><p> 9.1 Widget相关API</p><p> 9.2 Window相关API</p><p> 9.3 Layout相关API</p><p> 9.4 Frame相关API</p></li><li><p><strong><a href="#P10">搭建APP整体框架，完成APP静态数据版本</a></strong></p><p>10.1 每个页面UI结构分析</p><p>10.2 按照UI架构设计创建对应的UI组件及H5文件</p><p>10.3 编写每个Window或Frame所对应的H5页面文件</p><p>10.4 实现Frame之间切换</p><p>10.5 优化onclick交换响应</p><p>10.6 实现界面之间跳转</p><p>10.7 实现页面之间参数传递</p><p>10.8 监听Android返回键，实现退出APP</p><p>10.9 阻止iOS滑动返回</p></li></ol><div id="P1"></div>## 1. 理解APICloud应用执行流程-<h3 id="1-1-APICloud应用执行流程说明"><a href="#1-1-APICloud应用执行流程说明" class="headerlink" title="1.1 APICloud应用执行流程说明"></a>1.1 APICloud应用执行流程说明</h3><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day2/2.1.png" srcset="/img/loading.gif" alt="图片说明"></p><p>推荐视频：<a href="http://www.apicloud.com/video_play?list=2&index=1" target="_blank" rel="noopener">APICloud视频之初级代码篇第3讲 APICloud整体介绍</a></p><div id="P2"></div>## 2. Widget中代码执行之前，由引擎默认创建的两个UI组件实例--<h3 id="2-1-主Widget容器（Main-Widget）"><a href="#2-1-主Widget容器（Main-Widget）" class="headerlink" title="2.1 主Widget容器（Main Widget）"></a>2.1 主Widget容器（Main Widget）</h3><p>  是一个APP所有的UI组件的父容器，由引擎初始化完毕后自动创建，如果关闭了主Widget，那么整个应用也就退出了。</p><h3 id="2-2-根窗口（Root-Window）"><a href="#2-2-根窗口（Root-Window）" class="headerlink" title="2.2 根窗口（Root Window）"></a>2.2 根窗口（Root Window）</h3><p>  是Window组件的一个实例，由引擎初始化完毕后自动创建，用于加载content事件所指定的HTML文件(通常为widget根目录下的index.html),Window的name固定为’root’。</p><div id="P3"></div>## 3. config文件解析--<p><em>APICloud引擎初始化完成后的第一个操作就是解析config.xml文件</em></p><h3 id="3-1-了解config文件作用"><a href="#3-1-了解config文件作用" class="headerlink" title="3.1 了解config文件作用"></a>3.1 了解config文件作用</h3><h3 id="3-2-掌握config文件使用"><a href="#3-2-掌握config文件使用" class="headerlink" title="3.2 掌握config文件使用"></a>3.2 掌握config文件使用</h3><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Guide/app-config-manual" target="_blank" rel="noopener">config.xml应用配置说明</a></em></p><p><em>推荐视频：<a href="http://www.apicloud.com/video_play?list=2&index=12" target="_blank" rel="noopener">APICloud视频之初级代码篇第12讲 APICloud配置文件简介</a></em></p><div id="P4"></div>## 4. 引擎的两个重要事件--<h3 id="4-1-content事件"><a href="#4-1-content事件" class="headerlink" title="4.1 content事件:"></a>4.1 content事件:</h3><p>此事件是在引擎解析config.xml文件中的Contont标签时产生，是事件队列中的第一个事件。引擎通过处理此事件得到应用（Main Widget）的根窗口（Root Window）需要自动加载的HTML文件。</p><h3 id="4-2-apiready事件"><a href="#4-2-apiready事件" class="headerlink" title="4.2 apiready事件:"></a>4.2 apiready事件:</h3><p>此事件是在api对象准备完毕后产生，在每个Window或Frame的HTML代码中都需要监听此事件，以确定APICloud扩展对象已经准备完毕，可以调用了。</p><div id="P5"></div>## 5. api对象--<p>api对象是APICloud在全局作用域内唯一的一个扩展对象，api对象下包含了一个APP最常使用的扩展方法和属性，如窗口操作、事件监听、网络请求、设备访问等等。api对象无需引入，可以直接使用。而APICloud的扩展模块，都需要通过api.require方法引入后才能使用。</p><h3 id="5-1-查看api对象功能"><a href="#5-1-查看api对象功能" class="headerlink" title="5.1 查看api对象功能"></a>5.1 查看api对象功能</h3><h3 id="5-2-api对象常用方法使用"><a href="#5-2-api对象常用方法使用" class="headerlink" title="5.2 api对象常用方法使用"></a>5.2 api对象常用方法使用</h3><div id="P6"></div>## 6. 屏幕适配--<p>对于Window或Frame所加载的页面，如何编写一套代码完美适配所有屏幕。</p><h3 id="6-1-viewport设置："><a href="#6-1-viewport设置：" class="headerlink" title="6.1 viewport设置："></a>6.1 viewport设置：</h3><pre><code class="hljs routeros">&lt;meta <span class="hljs-attribute">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attribute">content</span>=<span class="hljs-string">"maximum-scale=1.0,minimum-scale=1.0,user-scalable=0,width=device-width,initial-scale=1.0"</span> /&gt;</code></pre><p><em>推荐视频（关于viewport配置原理）：<a href="http://www.apicloud.com/video_play?list=2&index=7" target="_blank" rel="noopener">APICloud视频之初级代码篇第7讲 APICloud应用结构分析</a></em></p><h3 id="6-2-UI尺寸："><a href="#6-2-UI尺寸：" class="headerlink" title="6.2 UI尺寸："></a>6.2 UI尺寸：</h3><p>  一套合适尺寸的UI， <strong>推荐：720x1280</strong></p><h3 id="6-3-量图标准："><a href="#6-3-量图标准：" class="headerlink" title="6.3 量图标准："></a>6.3 量图标准：</h3><p>  优先考虑绝对计量类的单位 px，应先在UI效果图中（如720x1280尺寸图）量出元素的宽或高对应的 px 值，再除以屏幕倍率（如分辨率为720x1280设备的屏幕倍率通常为 2) 得到书写样式时的确切数值。</p><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Guide/screen-adapt-guide" target="_blank" rel="noopener">屏幕适配原理及实现</a></em></p><div id="P7"></div>## 7. 前端框架--<h3 id="7-1-APICloud前端框架的作用和设计思想"><a href="#7-1-APICloud前端框架的作用和设计思想" class="headerlink" title="7.1 APICloud前端框架的作用和设计思想"></a>7.1 APICloud前端框架的作用和设计思想</h3><p>去除浏览器的默认样式和交互行为，简化dom操作，APP一切的显示和行为由自己来定义。</p><p><em>推荐视频：<a href="http://www.apicloud.com/video_play?list=2&index=8" target="_blank" rel="noopener">APICloud视频之初级代码篇第8讲 前端框架</a></em></p><h3 id="7-2-APICloud前端框架使用"><a href="#7-2-APICloud前端框架使用" class="headerlink" title="7.2 APICloud前端框架使用"></a>7.2 APICloud前端框架使用</h3><p><em>推荐文档：<a href="http://docs.apicloud.com/Front-end-Framework/framework-dev-guide" target="_blank" rel="noopener">前端框架开发指南</a></em></p><p><em>注意：不建议引用大的JS或CSS框架</em></p><div id="P8"></div>## 8. 状态栏处理--<h3 id="8-1-沉浸式状态栏效果说明"><a href="#8-1-沉浸式状态栏效果说明" class="headerlink" title="8.1 沉浸式状态栏效果说明"></a>8.1 沉浸式状态栏效果说明</h3><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day2/2.2.png" srcset="/img/loading.gif" alt="状态栏处理"></p><h3 id="8-2-沉浸式效果实现"><a href="#8-2-沉浸式效果实现" class="headerlink" title="8.2 沉浸式效果实现"></a>8.2 沉浸式效果实现</h3><ul><li><p>在config.xml文件配置是否开启:</p><pre><code class="hljs pgsql">&lt;preference <span class="hljs-type">name</span>="statusBarAppearance" <span class="hljs-keyword">value</span>="true" /&gt;</code></pre><blockquote><p><a href="http://docs.apicloud.com/Dev-Guide/app-config-manual#10" target="_blank" rel="noopener">沉浸式效果配置说明</a></p></blockquote></li><li><p>在Window或Frame的apiready事件后，调用<a href="http://docs.apicloud.com/Front-end-Framework/framework-dev-guide#45" target="_blank" rel="noopener">$api.fixStatusBar()</a>方法;</p></li></ul><h3 id="8-3-修改状态栏样式"><a href="#8-3-修改状态栏样式" class="headerlink" title="8.3 修改状态栏样式"></a>8.3 修改状态栏样式</h3><p><a href="http://docs.apicloud.com/Client-API/api#47" target="_blank" rel="noopener">api.setStatusBarStyle</a></p><p><em>推荐视频： <a href="http://www.apicloud.com/video_play?list=2&index=7" target="_blank" rel="noopener">APICloud视频之初级代码篇第7讲 APICloud应用结构分析</a></em></p><div id="P9"></div>## 9. 界面布局相关API--<h3 id="9-1-Widget相关API"><a href="#9-1-Widget相关API" class="headerlink" title="9.1 Widget相关API"></a>9.1 Widget相关API</h3><ul><li><a href="http://docs.apicloud.com/Client-API/api#32" target="_blank" rel="noopener">api.openWidget()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#14" target="_blank" rel="noopener">api.closeWidget()</a></li></ul><h3 id="9-2-Window相关API"><a href="#9-2-Window相关API" class="headerlink" title="9.2 Window相关API"></a>9.2 Window相关API</h3><ul><li><a href="http://docs.apicloud.com/Client-API/api#33" target="_blank" rel="noopener">api.openWin</a></li><li><a href="http://docs.apicloud.com/Client-API/api#15" target="_blank" rel="noopener">api.closeWin</a></li><li><a href="http://docs.apicloud.com/Client-API/api#13" target="_blank" rel="noopener">api.closeToWin()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#48" target="_blank" rel="noopener">api.setWinAttr()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#a19" target="_blank" rel="noopener">api.winName</a></li><li><a href="http://docs.apicloud.com/Client-API/api#a20" target="_blank" rel="noopener">api.winWidth</a></li><li><a href="http://docs.apicloud.com/Client-API/api#a18" target="_blank" rel="noopener">api.winHeight</a></li></ul><h3 id="9-3-Layout相关API"><a href="#9-3-Layout相关API" class="headerlink" title="9.3 Layout相关API"></a>9.3 Layout相关API</h3><p>FrameGroup</p><ul><li><a href="http://docs.apicloud.com/Client-API/api#28" target="_blank" rel="noopener">api.openFrameGroup()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#11" target="_blank" rel="noopener">api.closeFrameGroup()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#43" target="_blank" rel="noopener">api.setFrameGroupIndex()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#42" target="_blank" rel="noopener">api.setFrameGroupAttr()</a></li></ul><p>SlidLayout</p><ul><li><a href="http://docs.apicloud.com/Client-API/api#30" target="_blank" rel="noopener">api.openSlidLayout()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#31" target="_blank" rel="noopener">api.openSlidPane()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#12" target="_blank" rel="noopener">api.closeSlidPane()</a></li></ul><p>DrawerLayout</p><ul><li><a href="http://docs.apicloud.com/Client-API/api#89" target="_blank" rel="noopener">api.openDrawerLayout()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#90" target="_blank" rel="noopener">api.openDrawerPane()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#91" target="_blank" rel="noopener">api.closeDrawerPane()</a></li></ul><h3 id="9-4-Frame相关API"><a href="#9-4-Frame相关API" class="headerlink" title="9.4 Frame相关API"></a>9.4 Frame相关API</h3><ul><li><a href="http://docs.apicloud.com/Client-API/api#27" target="_blank" rel="noopener">api.openFrame()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#10" target="_blank" rel="noopener">api.closeFrame()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#41" target="_blank" rel="noopener">api.setFrameAttr()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#6" target="_blank" rel="noopener">api.bringFrameToFront()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#40" target="_blank" rel="noopener">api.sendFrameToBack()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#a9" target="_blank" rel="noopener">api.frameName</a></li><li><a href="http://docs.apicloud.com/Client-API/api#a10" target="_blank" rel="noopener">api.frameWidth</a></li><li><a href="http://docs.apicloud.com/Client-API/api#a8" target="_blank" rel="noopener">api.frameHeight</a></li></ul><div id="P10"></div>## 10. 搭建APP整体框架，完成APP静态数据版本--<h3 id="10-1-页面UI结构分析"><a href="#10-1-页面UI结构分析" class="headerlink" title="10.1 页面UI结构分析"></a>10.1 页面UI结构分析</h3><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day2/2.3.png" srcset="/img/loading.gif" alt="首页UI结构"></p><h3 id="10-2-按照UI架构设计创建对应UI组件及H5文件"><a href="#10-2-按照UI架构设计创建对应UI组件及H5文件" class="headerlink" title="10.2 按照UI架构设计创建对应UI组件及H5文件"></a>10.2 按照UI架构设计创建对应UI组件及H5文件</h3><blockquote><p>根据UI架构设计文档(ui-architecture.xmind)，创建需要的Window或Frame，以及Window或Frame所需加载的H5页面文件</p></blockquote><h3 id="10-3-编写Window或Frame所对应的H5页面"><a href="#10-3-编写Window或Frame所对应的H5页面" class="headerlink" title="10.3 编写Window或Frame所对应的H5页面"></a>10.3 编写Window或Frame所对应的H5页面</h3><ul><li><p>使用HTML标签构建页面元素: <strong>注意要使用语义化标签</strong></p><ul><li>header</li><li>nav</li><li>section</li><li>footer</li></ul></li><li><p>使用CSS为页面元素添加样式: <strong>常用元素样式定义常用规范</strong></p><ul><li>display</li><li>position</li><li>width</li><li>height</li><li>box-sizing</li></ul></li><li><p>使用弹性盒子布局(flexbox): <strong>注意考虑浏览器兼容性</strong></p><ul><li><p>display: -webkit-box</p></li><li><p>display: -webkit-flex</p></li><li><p>display: flex</p></li><li><p>-</p></li><li><p>-webkit-box-orient: vertical</p></li><li><p>-webkit-flex-flow: column</p></li><li><p>flex-flow: column</p></li><li><p>-</p></li><li><p>-webkit-blox-orient: horizontal</p></li><li><p>-webkit-flex-flow: row</p></li><li><p>flex-flow: row</p></li><li><p>-</p></li><li><p>-webkit-box-flex: 1</p></li><li><p>-webkit-flex: 1</p></li><li><p>flex: 1</p></li></ul></li></ul><h3 id="10-4-实现Frame之间切换"><a href="#10-4-实现Frame之间切换" class="headerlink" title="10.4 实现Frame之间切换"></a>10.4 实现Frame之间切换</h3><ul><li>手势滑动切换</li><li>点击菜单切换</li></ul><h3 id="10-5-优化点击交互响应"><a href="#10-5-优化点击交互响应" class="headerlink" title="10.5 优化点击交互响应"></a>10.5 优化点击交互响应</h3><blockquote><p>消除webkit内核默认的onclick事件的300ms响应延迟</p></blockquote><ul><li>tapmode属性</li><li><a href="http://docs.apicloud.com/Client-API/api#34" target="_blank" rel="noopener">api.parseTapmode方法</a></li></ul><h3 id="10-6-实现界面之间跳转"><a href="#10-6-实现界面之间跳转" class="headerlink" title="10.6 实现界面之间跳转"></a>10.6 实现界面之间跳转</h3><blockquote><p>按照产品原型实现各UI界面之前的切换</p></blockquote><h3 id="10-7-实现页面之间的参数传递"><a href="#10-7-实现页面之间的参数传递" class="headerlink" title="10.7 实现页面之间的参数传递"></a>10.7 实现页面之间的参数传递</h3><ul><li>参数pageParam</li><li><a href="http://docs.apicloud.com/Client-API/api#a12" target="_blank" rel="noopener">api.pageParam</a></li></ul><h3 id="10-8-监听Android返回键，实现退出APP"><a href="#10-8-监听Android返回键，实现退出APP" class="headerlink" title="10.8 监听Android返回键，实现退出APP"></a>10.8 监听Android返回键，实现退出APP</h3><ul><li>监听keyback事件</li></ul><h3 id="10-9-阻止iOS滑动返回"><a href="#10-9-阻止iOS滑动返回" class="headerlink" title="10.9 阻止iOS滑动返回"></a>10.9 阻止iOS滑动返回</h3><ul><li>设置slidBackEnabled参数</li></ul><p><a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/e50c068b5af5499d5a4e3b21d311a0c8.zip" target="_blank" rel="noopener">第二天课程源码下载</a></p><p><strong><em>第三天：了解APICloud平台提供的数据通信能力，掌握APICloud数据通信相关API使用，按照服务端接口文档进行APP前后端接口联调，将APP页面中的静态数据改为从服务端动态获取，并完成相关的业务逻辑。掌握APICloud平台的事件管理机制，了解APICloud数据云功能和使用。</em></strong></p><p><a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/c8078f42d6c7d315f32c67e0c88b53e6.zip" target="_blank" rel="noopener">第三天课程源码</a></p><p>教程更新：<a href="https://github.com/apicloudcom/APICloud-7Days-Online-Training-Tutorials/blob/master/Day3.md" target="_blank" rel="noopener">Github地址</a></p><h1 id="Day3学习"><a href="#Day3学习" class="headerlink" title="Day3学习"></a>Day3学习</h1><p>–</p><ul><li>如何实现前后端的数据通信，如何进行接口联调</li><li>api.ajax的使用和注意事项</li><li>两种窗口间的通信机制</li><li>如果使用APICloud数据云，推荐的调用方式</li></ul><h2 id="主要内容-2"><a href="#主要内容-2" class="headerlink" title="主要内容"></a>主要内容</h2><p>–</p><ol><li><p><strong><a href="#P1">APICloud平台提供的数据通信能力</a></strong></p><p> 1.1 HTTP</p><p> 1.2 HTTPS</p><p> 1.3 TCP／UDP</p></li><li><p><strong><a href="#P2">APICloud数据通信常用API使用</a></strong></p><p> 2.1 HTTP请求相关API</p><p> 2.2 文件下载相关API</p></li><li><p><strong><a href="#P3">使用api.ajax与服务端进行数据通信</a></strong></p></li><li><p><strong><a href="#P4">按照服务端接口文档，进行APP与服务端的接口联调</a></strong></p></li><li><p><strong><a href="#P5">窗口间通信机制</a></strong></p><p> 5.1 跨窗口调用函数</p><p> 5.2 自定义事件</p></li><li><p><strong><a href="#P6">常用对话框窗口使用</a></strong></p><p> 6.1 提示对话框</p><p> 6.2 状态对话框</p><p> 6.3 选择对话框</p></li><li><p><strong><a href="#P7">APICloud平台事件机制</a></strong></p><p> 7.1 全局事件管理</p><p> 7.2 平台事件类型</p><p> 7.3 事件监听机制</p></li><li><p><strong><a href="#P8">APICloud数据云</a></strong></p><p> 8.1 数据云功能特点</p><p> 8.2 数据云操作使用</p><p> 8.3 APP中3种与数据云的通信方式</p></li></ol><div id="P1"></div>## 1. APICloud平台提供的数据通信能力--<h3 id="1-1-HTTP"><a href="#1-1-HTTP" class="headerlink" title="1.1 HTTP"></a>1.1 HTTP</h3><ul><li>支持标准的HTTP协议</li><li>在引擎级别通过Native方式实现</li><li>支持跨域异步请求，无浏览器中同源请求的数量限制</li></ul><h3 id="1-2-HTTPS"><a href="#1-2-HTTPS" class="headerlink" title="1.2 HTTPS"></a>1.2 HTTPS</h3><ul><li>支持标准的HTTPS协议</li><li>支持双向的HTTPS证书</li><li>支持本地HTTPS证书加密</li></ul><h3 id="1-3-TCP／UDP"><a href="#1-3-TCP／UDP" class="headerlink" title="1.3 TCP／UDP"></a>1.3 TCP／UDP</h3><ul><li>支持标准的TCP／UDP协议</li><li>封装了标准的Socket接口</li></ul><div id="P2"></div>## 2. APICloud数据通信相关API--<h3 id="2-1-HTTP请求"><a href="#2-1-HTTP请求" class="headerlink" title="2.1 HTTP请求"></a>2.1 HTTP请求</h3><ul><li>发送请求：<a href="http://docs.apicloud.com/Client-API/api#3" target="_blank" rel="noopener">api.ajax()</a></li><li>取消请求：<a href="http://docs.apicloud.com/Client-API/api#86" target="_blank" rel="noopener">api.cancelAjax()</a></li></ul><h3 id="2-2-文件下载"><a href="#2-2-文件下载" class="headerlink" title="2.2 文件下载"></a>2.2 文件下载</h3><ul><li>开始下载：<a href="http://docs.apicloud.com/Client-API/api#17" target="_blank" rel="noopener">api.download()</a></li><li>取消下载：<a href="http://docs.apicloud.com/Client-API/api#8" target="_blank" rel="noopener">api.cancelDownload()</a></li></ul><div id="P3"></div>## 3. api.ajax的使用--- 超时：timeout- 方法：method（get、post、put、delete、head）- 提交数据：data(stream、body、values files)- 返回数据类型：dataType（json、text）- 缓存设置：cache（支持get请求）- 请求头：headers- 进度上报：report- 返回完整response信息：returnAll（ret.headers、ret.body，ret.statusCode）- 客户端证书设置：certificate<div id="P4"></div>## 4. 接口联调--<p>HTTP + JSON是最常用的前后端数据通信方式</p><ul><li>登录／注册</li><li>获取地区列表</li><li>获取商品分类</li><li>获取商品列表</li><li>获取商品详情</li></ul><div id="P5"></div>## 5. 窗口间通信机制--<h3 id="5-1-跨窗口调用函数"><a href="#5-1-跨窗口调用函数" class="headerlink" title="5.1 跨窗口调用函数"></a>5.1 跨窗口调用函数</h3><ul><li><a href="http://docs.apicloud.com/Client-API/api#18" target="_blank" rel="noopener">api.execScript()</a></li></ul><h3 id="5-2-自定义事件"><a href="#5-2-自定义事件" class="headerlink" title="5.2 自定义事件"></a>5.2 自定义事件</h3><ul><li><a href="http://docs.apicloud.com/Client-API/api#72" target="_blank" rel="noopener">api.sendEvent()</a>;</li></ul><div id="P6"></div>## 6. 常用对话框窗口使用--<h3 id="6-1-提示对话框"><a href="#6-1-提示对话框" class="headerlink" title="6.1 提示对话框"></a>6.1 提示对话框</h3><ul><li><a href="http://docs.apicloud.com/Client-API/api#4" target="_blank" rel="noopener">api.alert()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#16" target="_blank" rel="noopener">api.confirm()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#35" target="_blank" rel="noopener">api.prompt()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#60" target="_blank" rel="noopener">api.toast()</a></li></ul><h3 id="6-2-状态对话框"><a href="#6-2-状态对话框" class="headerlink" title="6.2 状态对话框"></a>6.2 状态对话框</h3><ul><li><a href="http://docs.apicloud.com/Client-API/api#50" target="_blank" rel="noopener">api.showProgress()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#22" target="_blank" rel="noopener">api.hideProgress()</a></li></ul><h3 id="6-3-选择对话框"><a href="#6-3-选择对话框" class="headerlink" title="6.3 选择对话框"></a>6.3 选择对话框</h3><ul><li><a href="http://docs.apicloud.com/Client-API/api#1" target="_blank" rel="noopener">api.actionSheet()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#29" target="_blank" rel="noopener">api.datePicker()</a></li></ul><div id="P7"></div>## 7. APICloud平台事件机制--<h3 id="7-1-全局事件管理"><a href="#7-1-全局事件管理" class="headerlink" title="7.1 全局事件管理"></a>7.1 全局事件管理</h3><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day3/3.1.png" srcset="/img/loading.gif" alt="全局事件管理"></p><h3 id="7-2-平台事件类型"><a href="#7-2-平台事件类型" class="headerlink" title="7.2 平台事件类型"></a>7.2 平台事件类型</h3><p><em>事件名称全部小写</em></p><h5 id="7-2-1-设备"><a href="#7-2-1-设备" class="headerlink" title="7.2.1 设备"></a>7.2.1 设备</h5><ul><li>电池电量：batterylow、batterystatus</li><li>物理按键：keyback、keymenu</li><li>音量按键：volumeup、volumedown</li></ul><h5 id="7-2-2-网络"><a href="#7-2-2-网络" class="headerlink" title="7.2.2 网络"></a>7.2.2 网络</h5><ul><li>网络状态：online、offline</li><li>云服务状态：smartupdatefinish</li></ul><h5 id="7-2-3-交互"><a href="#7-2-3-交互" class="headerlink" title="7.2.3 交互"></a>7.2.3 交互</h5><ul><li>手势：swipeup、swipedown、swipeleft、swiperight</li><li>滚动：scrolltobottom</li><li>点击：tap</li><li>长按：longpress</li><li>状态栏：noticeclicked</li><li>启动页：launchviewclicked</li></ul><h5 id="7-2-4-窗口"><a href="#7-2-4-窗口" class="headerlink" title="7.2.4 窗口"></a>7.2.4 窗口</h5><ul><li>窗口显示：viewappear</li><li>窗口隐藏：viewdisappear</li></ul><h5 id="7-2-5-应用"><a href="#7-2-5-应用" class="headerlink" title="7.2.5 应用"></a>7.2.5 应用</h5><ul><li>回到前台：resume</li><li>进入后台：pause</li><li>被其他应用调用：appindent</li></ul><h5 id="7-2-6-自定义"><a href="#7-2-6-自定义" class="headerlink" title="7.2.6 自定义"></a>7.2.6 自定义</h5><h3 id="7-3-事件监听机制"><a href="#7-3-事件监听机制" class="headerlink" title="7.3 事件监听机制"></a>7.3 事件监听机制</h3><ul><li>添加监听：<a href="">api.addEventListener()</a></li><li>删除监听：<a href="">api.removeEventListener()</a></li><li>发送事件：<a href="">api.sentEvent()</a></li></ul><div id="P8"></div>## 8. APICloud数据云--<p>云端一体架构，简化应用开发<br><img src="http://docs.apicloud.com/img/docImage/seven-course/day3/3.2.png" srcset="/img/loading.gif" alt="云端一体架构"></p><h3 id="8-1-数据云功能特点"><a href="#8-1-数据云功能特点" class="headerlink" title="8.1 数据云功能特点"></a>8.1 数据云功能特点</h3><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day3/3.3.png" srcset="/img/loading.gif" alt="数据云"></p><ul><li>无需搭建服务器、设计表结构，无需编写任何后端代码</li><li>默认内置user, file, role等基础数据模型，可以根据应用需求，扩展字段或自定义其他数据模型</li><li>在线可视化定义数据模型，根据数据模型自动生成Restful API</li><li>在移动端通过云API，操作云端数据模型，业务逻辑在APP端实现</li></ul><h3 id="8-2-数据云操作使用："><a href="#8-2-数据云操作使用：" class="headerlink" title="8.2 数据云操作使用："></a>8.2 数据云操作使用：</h3><ul><li>创建数据模型</li><li>添加模型管理</li><li>设置模型权限</li><li>测试模型接口</li></ul><h3 id="8-3-APP与数据云API通信："><a href="#8-3-APP与数据云API通信：" class="headerlink" title="8.3 APP与数据云API通信："></a>8.3 APP与数据云API通信：</h3><h5 id="8-3-1-接口签名验证"><a href="#8-3-1-接口签名验证" class="headerlink" title="8.3.1 接口签名验证"></a>8.3.1 接口签名验证</h5><ul><li>appId</li><li>appKey</li><li>算法</li></ul><h5 id="8-3-2-3种调用方式"><a href="#8-3-2-3种调用方式" class="headerlink" title="8.3.2 3种调用方式"></a>8.3.2 3种调用方式</h5><ul><li>标准 ajax 或 api.ajax </li><li>APICloud mcm 模块：user，file，model，query等</li><li><a href="http://docs.apicloud.com/Download/download" target="_blank" rel="noopener">APICloud mcm JS框架</a>：<ul><li><a href="https://github.com/apicloudcom/mcm-js-sdk" target="_blank" rel="noopener">开源分支</a></li><li>APICloud-rest.js</li><li>SHA1.js</li></ul></li></ul><p><em>推荐文档：<a href="http://docs.apicloud.com/Cloud-API/data-cloud-api" target="_blank" rel="noopener">云API使用指南</a></em></p><p><strong><em>第四天：掌握使用JS模版来实现列表数据，推荐使用doT模版；了解下拉刷新和上拉加载的实现原理及相关API的使用，实现下拉刷新、上拉加载更多功能；了解APICloud图片缓存原理及相关API的使用，对APP中网络图片实现本地缓存；了解APICloud平台提供的本地数据能力，理解APICloud应用沙箱结构，了解应用资源访问协议，掌握相关API的使用</em></strong></p><p><a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/dcf300598ee3df5f3076faa74f384e22.zip" target="_blank" rel="noopener">第四天课程源码</a></p><p>教程更新：<a href="https://github.com/apicloudcom/APICloud-7Days-Online-Training-Tutorials/blob/master/Day4.md" target="_blank" rel="noopener">Github地址</a></p><h1 id="day4学习"><a href="#day4学习" class="headerlink" title="day4学习"></a>day4学习</h1><ul><li>使用doT模版函数实现列表数据</li><li>下拉刷新，上拉加载</li><li>图片缓存</li><li>数据更新后的点击事件优化</li></ul><h2 id="主要内容-3"><a href="#主要内容-3" class="headerlink" title="主要内容"></a>主要内容</h2><ol><li><p><strong><a href="#P1">使用JS模版展示列表数据</a></strong></p><p> 1.1 JS模版原理</p><p> 1.2 doT模版使用</p><p> 1.3 使用doT版本实现列表数据展示</p></li><li><p><strong><a href="#P2">实现下拉刷新</a></strong></p><p> 2.1 下拉刷新实现机制</p><p> 2.2 相关API使用</p><p> 2.3 实现下拉刷新功能</p></li><li><p><strong><a href="#P3">实现上拉加载</a></strong></p><p> 3.1 上拉加载实现机制</p><p> 3.2 相关API使用</p><p> 3.3 实现上拉加载功能</p></li><li><p><strong><a href="#P4">实现图片缓存</a></strong></p><p> 4.1 图片缓存机制</p><p> 4.2 相关API使用</p><p> 4.3 实现图片缓存功能</p></li><li><p><strong><a href="#P5">本地数据存储</a></strong></p><p> 5.1 APICloud平台提供的本地数据存储能力</p><p> 5.2 数据存储相关API使用</p><p> 5.3 实现数据存储功能</p></li><li><p><strong><a href="#P6">应用沙箱结构</a></strong></p><p> 6.1 默认的沙箱位置</p><p> 6.2 修改Android默认沙箱位置</p></li><li><p><strong><a href="#P7">资源访问协议</a></strong></p><p> 7.1 资源存放的位置</p><p> 7.2 资源访问协议</p><p> 7.3 资源访问相关API属性</p></li></ol><div id="P1"></div>## 1. 使用JS模版展示列表数据--<h3 id="1-1-JS模版原理"><a href="#1-1-JS模版原理" class="headerlink" title="1.1 JS模版原理"></a>1.1 JS模版原理</h3><ul><li>在JS代码中写标签</li></ul><h3 id="1-2-doT模版使用"><a href="#1-2-doT模版使用" class="headerlink" title="1.2 doT模版使用"></a>1.2 doT模版使用</h3><ul><li><a href="https://github.com/apicloudcom/apicloud-js-module" target="_blank" rel="noopener">doT使用文档</a></li></ul><h3 id="1-3-使用doT版本实现列表数据展"><a href="#1-3-使用doT版本实现列表数据展" class="headerlink" title="1.3 使用doT版本实现列表数据展"></a>1.3 使用doT版本实现列表数据展</h3><div id="P2"></div>## 2. 实现下拉刷新--<h3 id="2-1-下拉刷新实现机制"><a href="#2-1-下拉刷新实现机制" class="headerlink" title="2.1 下拉刷新实现机制"></a>2.1 下拉刷新实现机制</h3><h3 id="2-2-相关API使用"><a href="#2-2-相关API使用" class="headerlink" title="2.2 相关API使用"></a>2.2 相关API使用</h3><h5 id="2-2-1-默认下拉刷新"><a href="#2-2-1-默认下拉刷新" class="headerlink" title="2.2.1 默认下拉刷新"></a>2.2.1 默认下拉刷新</h5><ul><li><a href="http://docs.apicloud.com/Client-API/api#46" target="_blank" rel="noopener">api.setRefreshHeaderInfo()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#87" target="_blank" rel="noopener">api.refreshHeaderLoading()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#37" target="_blank" rel="noopener">api.refreshHeaderLoadDone</a></li></ul><h5 id="2-2-2-自定义下了刷新"><a href="#2-2-2-自定义下了刷新" class="headerlink" title="2.2.2 自定义下了刷新"></a>2.2.2 自定义下了刷新</h5><ul><li><a href="http://docs.apicloud.com/Client-API/api#94" target="_blank" rel="noopener">api.setCustomRefreshHeaderInfo()</a></li><li><a href="http://docs.apicloud.com/Client-API/UI-Layout/UIPullRefresh" target="_blank" rel="noopener">UIPullRefresh模块</a></li><li><a href="http://docs.apicloud.com/Client-API/UI-Layout/UIPullRefreshDrop" target="_blank" rel="noopener">UIPullRefreshDrop模块</a></li><li><a href="http://docs.apicloud.com/Client-API/UI-Layout/UIPullRefreshFlash" target="_blank" rel="noopener">UIPullRefreshFlash模块</a></li><li><a href="http://docs.apicloud.com/Client-API/UI-Layout/UIPullRefreshMotive" target="_blank" rel="noopener">UIPullRefreshMotive模块</a><br>h<h3 id="2-3-实现下拉刷新功能"><a href="#2-3-实现下拉刷新功能" class="headerlink" title="2.3 实现下拉刷新功能"></a>2.3 实现下拉刷新功能</h3></li></ul><div id="P3"></div>## 3. 实现加载更多--<h3 id="3-1-上拉加载实现机制"><a href="#3-1-上拉加载实现机制" class="headerlink" title="3.1 上拉加载实现机制"></a>3.1 上拉加载实现机制</h3><h3 id="3-2-相关API使用"><a href="#3-2-相关API使用" class="headerlink" title="3.2 相关API使用"></a>3.2 相关API使用</h3><ul><li>监听scrolltobottom事件</li></ul><h3 id="3-3-实现上拉加载功能"><a href="#3-3-实现上拉加载功能" class="headerlink" title="3.3 实现上拉加载功能"></a>3.3 实现上拉加载功能</h3><ul><li>tapmode处理（<a href="">api.parseTapmode()</a>）</li></ul><div id="P4"></div>## 4. 实现图片缓存--<h3 id="4-1-图片缓存机制"><a href="#4-1-图片缓存机制" class="headerlink" title="4.1 图片缓存机制"></a>4.1 图片缓存机制</h3><h3 id="4-2-相关API使用"><a href="#4-2-相关API使用" class="headerlink" title="4.2 相关API使用"></a>4.2 相关API使用</h3><ul><li>图片缓存：<a href="http://docs.apicloud.com/Client-API/api#78" target="_blank" rel="noopener">api.imageCache()</a></li></ul><h3 id="4-3-实现图片缓存功能"><a href="#4-3-实现图片缓存功能" class="headerlink" title="4.3 实现图片缓存功能"></a>4.3 实现图片缓存功能</h3><div id="P5"></div>## 5. 本地数据存储--<h3 id="5-1-APICloud平台提供的本地数据存储能力"><a href="#5-1-APICloud平台提供的本地数据存储能力" class="headerlink" title="5.1 APICloud平台提供的本地数据存储能力"></a>5.1 APICloud平台提供的本地数据存储能力</h3><h3 id="5-1-1-localStorage"><a href="#5-1-1-localStorage" class="headerlink" title="5.1.1 localStorage"></a>5.1.1 localStorage</h3><ul><li>在平台内部扩展实现，不再受Webkit默认存储容量限制</li><li>实现跨窗口同步存取机制</li><li>支持JSON对象存取操作</li></ul><h3 id="5-1-2-偏好设置"><a href="#5-1-2-偏好设置" class="headerlink" title="5.1.2 偏好设置"></a>5.1.2 偏好设置</h3><ul><li>封装了系统偏好设置相关接口，应用内全局有效</li></ul><h2 id="5-1-3-文件"><a href="#5-1-3-文件" class="headerlink" title="#5.1.3 文件"></a>#5.1.3 文件</h2><ul><li>封装了标准的文件操作相关接口</li><li>支持同步方式接口调用</li></ul><h3 id="5-1-4-数据库"><a href="#5-1-4-数据库" class="headerlink" title="5.1.4 数据库"></a>5.1.4 数据库</h3><ul><li>封装了标准的数据库操作相关接口</li><li>支持同步方式接口调用</li></ul><h3 id="5-2-数据存储相关API使用"><a href="#5-2-数据存储相关API使用" class="headerlink" title="5.2 数据存储相关API使用"></a>5.2 数据存储相关API使用</h3><h3 id="5-2-1-localStorage"><a href="#5-2-1-localStorage" class="headerlink" title="5.2.1 localStorage"></a>5.2.1 localStorage</h3><ul><li><a href="http://docs.apicloud.com/Front-end-Framework/framework-dev-guide#37" target="_blank" rel="noopener">$api.setStorage()</a></li><li><a href="http://docs.apicloud.com/Front-end-Framework/framework-dev-guide#38" target="_blank" rel="noopener">$api.getStorage()</a></li><li><a href="http://docs.apicloud.com/Front-end-Framework/framework-dev-guide#39" target="_blank" rel="noopener">$api.rmStorage()</a></li><li><a href="http://docs.apicloud.com/Front-end-Framework/framework-dev-guide#40" target="_blank" rel="noopener">$api.clearStorage()</a></li></ul><h3 id="5-2-2-preference"><a href="#5-2-2-preference" class="headerlink" title="5.2.2 preference"></a>5.2.2 preference</h3><ul><li><a href="http://docs.apicloud.com/Client-API/api#45" target="_blank" rel="noopener">api.setPref()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#21" target="_blank" rel="noopener">api.getPref()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#39" target="_blank" rel="noopener">api.removePref()</a></li></ul><h3 id="5-2-3-file"><a href="#5-2-3-file" class="headerlink" title="5.2.3 file"></a>5.2.3 file</h3><ul><li><a href="http://docs.apicloud.com/Client-API/api#61" target="_blank" rel="noopener">api.writeFile()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#36" target="_blank" rel="noopener">api.readFile()</a></li><li><a href="http://docs.apicloud.com/Client-API/Func-Ext/fs" target="_blank" rel="noopener">fs模块</a></li></ul><h3 id="5-2-4-database"><a href="#5-2-4-database" class="headerlink" title="5.2.4 database"></a>5.2.4 database</h3><ul><li><a href="http://docs.apicloud.com/Client-API/Func-Ext/db" target="_blank" rel="noopener">db模块</a><ul><li>打开数据库</li></ul></li></ul><h3 id="5-2-5-存储容量相关"><a href="#5-2-5-存储容量相关" class="headerlink" title="5.2.5 存储容量相关"></a>5.2.5 存储容量相关</h3><ul><li><a href="http://docs.apicloud.com/Client-API/api#85" target="_blank" rel="noopener">api.getFreeDiskSpace()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#84" target="_blank" rel="noopener">api.getCacheSize()</a></li><li><a href="http://docs.apicloud.com/Client-API/api#9" target="_blank" rel="noopener">api.clearCache()</a></li></ul><h3 id="5-3-实现数据存储功能"><a href="#5-3-实现数据存储功能" class="headerlink" title="5.3 实现数据存储功能"></a>5.3 实现数据存储功能</h3><ul><li>实现保存用户信息</li><li>实现保存购物车信息</li><li>实现清除缓存</li><li>实现退出登录</li><li>DB操作相关JS框架封装</li></ul><div id="P6"></div>## 6. 应用沙箱结构--<h3 id="6-1-默认的沙箱位置"><a href="#6-1-默认的沙箱位置" class="headerlink" title="6.1 默认的沙箱位置"></a>6.1 默认的沙箱位置</h3><ul><li>Android的默认沙箱位置：sdcard/UZMap/appId</li><li>iOS的默认沙箱位置：Documents/uzfs/appId</li></ul><h3 id="6-2-修改Android默认沙箱位置"><a href="#6-2-修改Android默认沙箱位置" class="headerlink" title="6.2 修改Android默认沙箱位置"></a>6.2 修改Android默认沙箱位置</h3><ul><li>通过修改config.xml文件中的sandbox属性，来指定Android虚拟沙箱位置<pre><code class="hljs routeros">&lt;widget <span class="hljs-attribute">id</span>=<span class="hljs-string">"A1234567890123"</span>, <span class="hljs-attribute">sandbox</span>=<span class="hljs-string">"myBox"</span>&gt;</code></pre></li></ul><p><em>推荐视频：<a href="http://www.apicloud.com/video_play?list=2&index=12" target="_blank" rel="noopener">初级代码篇第</a></em></p><div id="P7"></div>## 7. 资源访问协议--<h3 id="7-1-资源存放的位置"><a href="#7-1-资源存放的位置" class="headerlink" title="7.1 资源存放的位置"></a>7.1 资源存放的位置</h3><ul><li>widget包中</li><li>应用沙箱中（APICloud应用虚拟沙箱和Native应用真实沙箱）</li></ul><h3 id="7-2-资源访问协议"><a href="#7-2-资源访问协议" class="headerlink" title="7.2 资源访问协议"></a>7.2 资源访问协议</h3><ul><li>widget://（访问widget包中资源）</li><li>fs://（访问APICloud应用虚拟沙箱中资源）</li><li>cache://（访问缓存中资源）</li><li>box://（访问应用真实沙箱中的资源）</li></ul><h3 id="7-3-资源访问相关API属性"><a href="#7-3-资源访问相关API属性" class="headerlink" title="7.3 资源访问相关API属性"></a>7.3 资源访问相关API属性</h3><ul><li>api.wgtDir（返回widget包根路径）</li><li>api.fsDir（返回APICloud应用沙箱根路径）</li><li>api.cacheDir（返回缓存根路径）</li><li>api.boxDir（返回应用真实沙箱根路径）</li></ul><p><strong><em>第五天：了解APICloud引擎架构，理解模块扩展机制、调用过程和模块设计规范；掌握自定义模块扩展方法，掌握常用UI模块的使用；了解平台提供的多媒体支持能力及相关API</em></strong></p><p><a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/56a7db2d2ba277713bc30882efe12913.zip" target="_blank" rel="noopener">第五天课程源码</a></p><p>教程更新：<a href="https://github.com/apicloudcom/APICloud-7Days-Online-Training-Tutorials/blob/master/Day5.md" target="_blank" rel="noopener">Github地址</a></p><h1 id="Day5学习"><a href="#Day5学习" class="headerlink" title="Day5学习"></a>Day5学习</h1><ol><li><p><strong><a href="#P1">APICloud端引擎架构介绍</a></strong></p></li><li><p><strong><a href="#P2">模块调用过程</a></strong></p></li><li><p><strong><a href="#P3">模块扩展机制</a></strong></p><p> 3.1 绑定<br> 3.2 桥接<br> 3.3 生命周期<br> 3.4 界面布局</p></li><li><p><strong><a href="#P4">自定义扩展模块</a></strong></p></li><li><p><strong><a href="#P5">扩展模块使用</a></strong></p><p> 5.1 UI类模块常用接口<br> 5.2 UI类模块使用</p></li><li><p><strong><a href="#P6">多媒体相关模块</a></strong></p><p> 6.1 APICloud平台多媒体能力支持<br> 6.2 相关API使用</p></li></ol><div id="P1"></div>## 1. 端引擎架构--![端引擎架构](http://docs.apicloud.com/img/docImage/seven-course/day5/5.1.png)<div id="P2"></div>## 2. 模块调用过程--![模块调用过程](http://docs.apicloud.com/img/docImage/seven-course/day5/5.2.png)<div id="P3"></div>## 3. 模块扩展机制--### 3.1 绑定: - JavaScript对象与Native模块实例绑定；一对一或是一对多。<h3 id="3-2-桥接"><a href="#3-2-桥接" class="headerlink" title="3.2 桥接:"></a>3.2 桥接:</h3><ul><li>JavaScript对象方法与Native模块接口桥接；通过module.json文件声明。</li></ul><h3 id="3-3-生命周期："><a href="#3-3-生命周期：" class="headerlink" title="3.3 生命周期："></a>3.3 生命周期：</h3><ul><li>通过引擎Native接口实现APP生命周期同步；创建、初始化、资源释放、销毁等。</li></ul><h3 id="3-4-界面布局："><a href="#3-4-界面布局：" class="headerlink" title="3.4 界面布局："></a>3.4 界面布局：</h3><ul><li>UI模块独立渲染，可以添加到Window或Frame中进行混合布局。</li></ul><div id="P4"></div>## 4. 如何自定义扩展模块--<p>开发者可以基于APICloud标准的模块扩展机制扩展自定义模块。</p><p><em>推荐文档</em></p><ul><li><a href="http://docs.apicloud.com/Dev-Guide/module-dev-guide-for-android" target="_blank" rel="noopener">Android模块开发指南</a></li><li><a href="http://docs.apicloud.com/Dev-Guide/module-dev-guide-for-ios" target="_blank" rel="noopener">iOS模块开发指南</a></li><li><a href="http://docs.apicloud.com/APICloud/module-dev-standard" target="_blank" rel="noopener">模块设计规范</a></li><li><a href="http://docs.apicloud.com/APICloud/Module-audit-specification-Android" target="_blank" rel="noopener">Android模块审核规范</a></li><li><a href="http://docs.apicloud.com/APICloud/Module-audit-specification-ios" target="_blank" rel="noopener">iOS模块审核规范</a></li><li><a href="http://docs.apicloud.com/APICloud/Upload-custom-module" target="_blank" rel="noopener">自定义模块使用说明</a></li></ul><p><em>推荐视频</em></p><ul><li><a href="http://apicloud.com/video_play?list=8&index=1" target="_blank" rel="noopener">Android模块开发视频教程</a></li><li><a href="http://apicloud.com/video_play?list=6&index=1" target="_blank" rel="noopener">iOS模块开发视频教程</a></li></ul><p><em>推荐源码</em></p><ul><li><a href="http://apicloud.com/source_code" target="_blank" rel="noopener">官方模块源码</a></li></ul><div id="P5"></div>## 5. UI类扩展模块使用--<h3 id="5-1-UI类模块常用接口"><a href="#5-1-UI类模块常用接口" class="headerlink" title="5.1 UI类模块常用接口"></a>5.1 UI类模块常用接口</h3><ul><li><p>打开：open()</p><ul><li>指定rect(x,y,w,h)来定义显示区域</li><li>指定callback来注册事件监听函数</li><li>指定fixed和fixedOn参数来确定添加到的Window或Frame</li></ul></li><li><p>关闭：close()</p></li><li><p>隐藏：hide()</p></li><li><p>显示：show()</p></li><li><p>刷新：update()</p></li><li><p>赋值：setValue()</p></li><li><p>设置样式：setStyle()</p></li><li><p>重新加载：reloadData()</p></li><li><p>加载更多：appendData()</p></li></ul><h3 id="5-2-UI类模块使用Demo"><a href="#5-2-UI类模块使用Demo" class="headerlink" title="5.2 UI类模块使用Demo"></a>5.2 UI类模块使用Demo</h3><ul><li><a href="http://docs.apicloud.com/Client-API/UI-Layout/UIInput" target="_blank" rel="noopener">UIInput</a></li><li><a href="http://docs.apicloud.com/Client-API/UI-Layout/UIScrollPicture" target="_blank" rel="noopener">UIScrollPicture</a></li><li><a href="http://docs.apicloud.com/Client-API/UI-Layout/UIActionSelector" target="_blank" rel="noopener">UIActionSelector</a></li></ul><div id="P6"></div>## 6. 多媒体相关模块使用--<h3 id="6-1-APICloud平台多媒体能力支持"><a href="#6-1-APICloud平台多媒体能力支持" class="headerlink" title="6.1 APICloud平台多媒体能力支持"></a>6.1 APICloud平台多媒体能力支持</h3><ul><li><p>图片</p><ul><li>api对象：<ul><li>拍照或打开相册：<a href="http://docs.apicloud.com/Client-API/api#20" target="_blank" rel="noopener">api.getPicture()</a></li><li>保存到相册：<a href="http://docs.apicloud.com/Client-API/api#81" target="_blank" rel="noopener">api. saveMediaToAlbum()</a></li></ul></li><li>扩展模块：文档搜索</li></ul></li><li><p>音频</p><ul><li>api对象<ul><li>录音：<a href="http://docs.apicloud.com/Client-API/api#54" target="_blank" rel="noopener">api.startRecord</a>，<a href="http://docs.apicloud.com/Client-API/api#58" target="_blank" rel="noopener">api.stopRecord</a></li><li>播放：<a href="http://docs.apicloud.com/Client-API/api#53" target="_blank" rel="noopener">api.startPlay</a>，<a href="http://docs.apicloud.com/Client-API/api#57" target="_blank" rel="noopener">api.stopPlay</a></li></ul></li><li>扩展模块：文档搜索</li></ul></li><li><p>视频</p><ul><li>api对象<ul><li>播放：<a href="http://docs.apicloud.com/Client-API/api#62" target="_blank" rel="noopener">api.openVideo</a></li></ul></li><li>扩展模块：文档搜索</li></ul></li></ul><h3 id="6-2-相关API使用"><a href="#6-2-相关API使用" class="headerlink" title="6.2 相关API使用"></a>6.2 相关API使用</h3><p><strong><em>第六天：了解如何在APICloud应用中使用第三方开放平台服务，如推送、分享、地图等；了解APICloud平台目前以支撑的第三方服务，掌握第三方模块申请和使用流程；理解自定义Loader的原理，掌握如何编译、安装和使用自定义Loader调试应用。</em></strong></p><p><a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/0a92a2e3947b8563077bcca6dffeb51c.zip" target="_blank" rel="noopener">第六天课程源码</a></p><p>教程更新：<a href="https://github.com/apicloudcom/APICloud-7Days-Online-Training-Tutorials/blob/master/Day6.md" target="_blank" rel="noopener">Github地址</a></p><h1 id="Day6学习"><a href="#Day6学习" class="headerlink" title="Day6学习"></a>Day6学习</h1><ol><li><p><strong><a href="#P1">集成第三方服务</a></strong></p><p> 1.1 第三方服务集成流程</p><p> 1.2 目前已经集成的第三方服务模块</p><p> 1.3 自己集成指定的第三方服务模块</p></li><li><p><strong><a href="#P2">自定义AppLoader</a></strong></p><p> 2.1 自定义Loader作业和运行原理</p><p> 2.2 编译自定义Loader</p><p> 2.3 安装自定义Loader</p><p> 2.4 使用自定义Loader</p></li><li><p><strong><a href="#P3">第三方服务模块使用流程</a></strong></p></li><li><p><strong><a href="#P4">第三方地图模块服务使用</a></strong></p></li><li><p><strong><a href="#P5">第三方登录服务使用</a></strong></p></li><li><p><strong><a href="#P6">第三方推送服务使用</a></strong></p></li></ol><div id="P1"></div>## 1. 第三方服务集成<h3 id="1-1-集成流程"><a href="#1-1-集成流程" class="headerlink" title="1.1 集成流程"></a>1.1 集成流程</h3><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day6/6.1.png" srcset="/img/loading.gif" alt="集成流程"></p><h3 id="1-2-目前已经集成的第三方服务模块"><a href="#1-2-目前已经集成的第三方服务模块" class="headerlink" title="1.2 目前已经集成的第三方服务模块"></a>1.2 目前已经集成的第三方服务模块</h3><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day6/6.2.png" srcset="/img/loading.gif" alt="集成情况"></p><p><em>详细参考：<a href="http://www.apicloud.com/mod-sdk" target="_blank" rel="noopener">APICloud聚合API-开发SDK</a></em></p><p>###1.3 自己集成指定的第三方服务模块</p><p>与自定义扩展模块实现方式一样，详解自定义扩展模块相关文档和视频</p><div id="P2"></div>## 2. 自定义LoaderAppLoader（官方或自定义）其实就是一个APP，只不过他启动后不会读区自己的Widget包中的网页代码，而是加载指定位置的网页代码。在进行调试的时候APICloud开发工具插件将测试代码同步的这个指定的位置。<h3 id="2-1-原理"><a href="#2-1-原理" class="headerlink" title="2.1 原理"></a>2.1 原理</h3><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day6/6.3.png" srcset="/img/loading.gif" alt="自定义Loader"></p><h3 id="2-2-编译"><a href="#2-2-编译" class="headerlink" title="2.2 编译"></a>2.2 编译</h3><ul><li><a href="http://www.apicloud.com/module-loader" target="_blank" rel="noopener">网站编译入口</a></li><li>在工具插件中编译</li></ul><h3 id="2-3-安装"><a href="#2-3-安装" class="headerlink" title="2.3 安装"></a>2.3 安装</h3><ul><li>扫码</li><li>USB同步</li></ul><h3 id="2-4-使用"><a href="#2-4-使用" class="headerlink" title="2.4 使用"></a>2.4 使用</h3><ul><li>Sublime Text</li><li>webStorm</li><li>Atom</li><li>Eclipse</li><li>CLI</li></ul><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Guide/Custom_Loader" target="_blank" rel="noopener">自定义Loader说明</a></em></p><p><em>推荐视频：<a href="http://apicloud.com/video_play?list=2&index=9" target="_blank" rel="noopener">初级代码篇第9－10讲</a></em></p><div id="P3"></div>## 3. 第三方服务模块使用流程<ul><li>第一步：到第三方服务开放平台申请相关Id和Key</li><li>第二步：在APICloud应用的Config文件中配置相关Id和Key</li><li>第三步：确定控制台配置应用的包名和证书与申请开放服务时填写的完全一致</li><li>第四步：编译自定义Loader，使用自定义Loader调试</li><li>第五步：在应用代码中require相关模块，并调用API</li></ul><div id="P4"></div>## 4. 地图<p>百度地图模块</p><ul><li>配置</li></ul><pre><code class="hljs pgsql">&lt;feature <span class="hljs-type">name</span>="bMap"&gt;        &lt;param <span class="hljs-type">name</span>="android_api_key" <span class="hljs-keyword">value</span>="0nKBc8SkhvOGxGOLZ96Q6iWXcSU0iOhe" /&gt;                &lt;param <span class="hljs-type">name</span>="ios_api_key" <span class="hljs-keyword">value</span>="iObZMn4A1N6pxQBhgG4ElbHmaDNshPZR" /&gt;        &lt;/feature&gt;</code></pre><ul><li>定位：<a href="http://docs.apicloud.com/Client-API/Open-SDK/bMap#m6" target="_blank" rel="noopener">bMap.getLocation()</a></li><li>根据经纬度获得所在的城市：<a href="http://docs.apicloud.com/Client-API/Open-SDK/bMap#m9" target="_blank" rel="noopener">bMap.getNameFromCoords()</a></li><li>城市智能搜索：<a href="http://docs.apicloud.com/Client-API/Open-SDK/bMap#s7" target="_blank" rel="noopener">bMap.searchInCity()</a></li></ul><p><em>推荐文档</em></p><p><a href="http://docs.apicloud.com/Client-API/Open-SDK/bMap" target="_blank" rel="noopener">百度地图模块文档</a></p><p><a href="http://docs.apicloud.com/Others/Open-SDK-Integration-Guide/baidu" target="_blank" rel="noopener">百度开放平台接入指南</a></p><div id="P5"></div>## 5. 分享和登录<p>微信模块</p><ul><li>配置</li></ul><pre><code class="hljs pgsql"> &lt;feature <span class="hljs-type">name</span>="wx"&gt;         &lt;param <span class="hljs-type">name</span>="urlScheme" <span class="hljs-keyword">value</span>="wxd0d84bbf23b4a0e4"/&gt;                &lt;param <span class="hljs-type">name</span>="apiKey" <span class="hljs-keyword">value</span>="wxd0d84bbf23b4a0e4"/&gt;                &lt;param <span class="hljs-type">name</span>="apiSecret" <span class="hljs-keyword">value</span>="a354f72aa1b4c2b8eaad137ac81434cd"/&gt;        &lt;/feature&gt;</code></pre><ul><li><p>分享</p><ul><li><a href="http://docs.apicloud.com/Client-API/Open-SDK/wx#a2" target="_blank" rel="noopener">wx.shareText()</a></li><li><a href="http://docs.apicloud.com/Client-API/Open-SDK/wx#a3" target="_blank" rel="noopener">wx.shareImage()</a></li><li><a href="http://docs.apicloud.com/Client-API/Open-SDK/wx#a4" target="_blank" rel="noopener">wx.shareMusic()</a></li><li><a href="http://docs.apicloud.com/Client-API/Open-SDK/wx#a5" target="_blank" rel="noopener">wx.shareVideo()</a></li><li><a href="http://docs.apicloud.com/Client-API/Open-SDK/wx#a6" target="_blank" rel="noopener">wx.shareWebpage()</a></li></ul></li><li><p>登录</p><ul><li><a href="http://docs.apicloud.com/Client-API/Open-SDK/wx#a7" target="_blank" rel="noopener">wx.auth()</a></li><li><a href="http://docs.apicloud.com/Client-API/Open-SDK/wx#a8" target="_blank" rel="noopener">wx.getToken()</a></li><li><a href="http://docs.apicloud.com/Client-API/Open-SDK/wx#a9" target="_blank" rel="noopener">wx.getUserInfo()</a></li><li><a href="http://docs.apicloud.com/Client-API/Open-SDK/wx#a10" target="_blank" rel="noopener">wx.refreshToken()</a></li></ul></li></ul><p><em>推荐文档</em></p><p><a href="http://docs.apicloud.com/Client-API/Open-SDK/wx" target="_blank" rel="noopener">微信模块文档</a></p><p><a href="http://docs.apicloud.com/Others/Open-SDK-Integration-Guide/weChat" target="_blank" rel="noopener">微信开放平台接入指南</a></p><p><em>推荐视频</em></p><p><a href="http://apicloud.com/video_play?list=2&index=9" target="_blank" rel="noopener">初级代码篇第9－10讲</a></p><div id="P6"></div>## 6. 推送：<p>个推模块</p><ul><li>配置</li></ul><pre><code class="hljs pgsql">&lt;feature <span class="hljs-type">name</span>="pushGeTui"&gt;        &lt;param <span class="hljs-type">name</span>="ios_appkey" <span class="hljs-keyword">value</span>="xCGkZR1bCp6gscLUB20Dl4" /&gt;                &lt;param <span class="hljs-type">name</span>="ios_appid" <span class="hljs-keyword">value</span>="G5lfFkQZ008VoZUXydA2r2" /&gt;                &lt;param <span class="hljs-type">name</span>="ios_appsecret" <span class="hljs-keyword">value</span>="RuxlC8ExWA7T4NFoJhQFd6" /&gt;                &lt;param <span class="hljs-type">name</span>="android_appkey" <span class="hljs-keyword">value</span>="SsYLDV34ik5CBgtdzCQ608" /&gt;                &lt;param <span class="hljs-type">name</span>="android_appid" <span class="hljs-keyword">value</span>="dASHvkJSLc9Q5vvSEALdI4" /&gt;                &lt;param <span class="hljs-type">name</span>="android_appsecret" <span class="hljs-keyword">value</span>="BmjqFXsFDS6SVMyV2JXglA" /&gt;        &lt;/feature&gt;</code></pre><ul><li>初始化：<ul><li><a href="http://docs.apicloud.com/Client-API/Open-SDK/pushGeTui#a1" target="_blank" rel="noopener">pushGeTui.initialize()</a></li><li><a href="http://docs.apicloud.com/Client-API/Open-SDK/pushGeTui#a2" target="_blank" rel="noopener">pushGeTui.registerDeviceToken()</a></li></ul></li><li>绑定</li><li>推送消息与通知</li><li>监听消息和通知</li><li>监听状态条通知点击事件</li></ul><p><a href="http://docs.apicloud.com/Client-API/Open-SDK/pushGeTui" target="_blank" rel="noopener">个推模块文档</a></p><p><a href="http://docs.apicloud.com/Others/Open-SDK-Integration-Guide/pushGeTui_manual" target="_blank" rel="noopener">个推开放平台接入指南</a></p><p><strong><em>第七天：掌握APICloud应用管理相关服务的配置使用和相关API，包括：应用发布、版本管理、云修复、闪屏广告等。理解APICloud APP优化策略和编码规范；了解APICloud多Widget管理机制和SuperWebview的使用</em></strong></p><p><a href="http://7xy8na.com1.z0.glb.clouddn.com/apicloud/4026ff033ea0ba2bfcf6a8a6ce20fa35.zip" target="_blank" rel="noopener">第七天课程源码</a></p><p>教程更新：<a href="https://github.com/apicloudcom/APICloud-7Days-Online-Training-Tutorials/blob/master/Day7.md" target="_blank" rel="noopener">Github地址</a></p><h1 id="Day7学习"><a href="#Day7学习" class="headerlink" title="Day7学习"></a>Day7学习</h1><p>–</p><ol><li><p><strong><a href="#P1">应用发布</a></strong></p><p> 1.1 云编译</p><p> 1.2 全包加密</p><p> 1.3 其它安全配置</p></li><li><p><strong><a href="#P2">版本管理</a></strong></p><p> 2.1 在APICloud控制台管理版本</p><p> 2.2 Config文件相关配置</p><p> 2.3 mam模块使用</p></li><li><p><strong><a href="#P3">云修复</a></strong></p><p> 3.1 在APICloud控制台进行云修复（应用内热更新）</p><p> 3.2 Config文件相关配置</p><p> 3.3 相关API使用</p></li><li><p><strong><a href="#P4">闪屏广告</a></strong></p><p> 4.1 在APICloud控制台使用闪屏广告</p><p> 4.2 Config文件相关配置</p><p> 4.3 相关API使用</p></li><li><p><strong><a href="#P5">优化策略</a></strong></p><p> 5.1 了解HTML5特性</p><p> 5.2 窗口结构</p><p> 5.3 网页加载速度</p><p> 5.4 不实用重型框架</p><p> 5.5 屏幕适配</p><p> 5.6 数据加载</p><p> 5.7 图片处理</p><p> 5.8 交互响应速度</p><p> 5.9 尊重系统特性</p></li><li><p><strong><a href="#P6">编码规范</a></strong></p></li><li><p><strong><a href="#P7">Widget管理</a></strong></p><p> 7.1 多Widget架构</p><p> 7.2 主Widget</p><p> 7.3 子Widget</p><p> 7.4 相关API使用</p></li><li><p><strong><a href="#P8">SuperWebview</a></strong></p><p> 8.1 SuperWebview介绍</p><p> 8.2 SuperWebview特点</p></li></ol><div id="P1"></div>## 1. APICloud应用发布流程--<h3 id="1-1-云编译"><a href="#1-1-云编译" class="headerlink" title="1.1 云编译"></a>1.1 云编译</h3><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day7/7.1.png" srcset="/img/loading.gif" alt="应用发布流程"></p><h3 id="1-2-代码全包加密"><a href="#1-2-代码全包加密" class="headerlink" title="1.2 代码全包加密"></a>1.2 代码全包加密</h3><ul><li><p>网页全包加密</p><p>  对网页包中全包的html,css,javascript代码进行加密，加密后的网友代码都是不可读的，并且不能通过常用的格式化工具恢复。代码在运行前都是加密的，在运行时进行动态解密。</p></li><li><p>一键加密、运行时解密</p><p>  在开发过程中无需对代码做任何特殊处理，在云编译时选择代码加密即可。</p></li><li><p>零修改、零影响</p><p>  加密后不改变代码大小，不影响运行效率。</p></li><li><p>安全盒子</p><p>  定义了一个安全盒子，在盒子内的代码按照加密和解密进行处理，其它代码不受影响。</p></li><li><p>重新定义资源标准</p><p>  对保护的代码进行统一资源管理，加速资源加载，加速代码运行。</p></li></ul><p>###1.3 其它安全配置</p><p>Config文件中对access字段的配置</p><pre><code class="hljs ada">&lt;<span class="hljs-keyword">access</span> origin=<span class="hljs-string">"local"</span> /&gt;&lt;<span class="hljs-keyword">access</span> origin=<span class="hljs-string">"http://apicloud.com"</span> /&gt;</code></pre><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Guide/app-config-manual" target="_blank" rel="noopener">应用配置说明</a></em></p><div id="P2"></div>## 2. 版本管理--<h3 id="2-1-在APICloud控制台管理版本"><a href="#2-1-在APICloud控制台管理版本" class="headerlink" title="2.1 在APICloud控制台管理版本"></a>2.1 在APICloud控制台管理版本</h3><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Guide/version_update" target="_blank" rel="noopener">本版管理使用说明</a></em></p><h3 id="2-2-Config文件相关配置"><a href="#2-2-Config文件相关配置" class="headerlink" title="2.2 Config文件相关配置"></a>2.2 Config文件相关配置</h3><pre><code class="hljs pgsql">&lt;preference <span class="hljs-type">name</span>="autoUpdate" <span class="hljs-keyword">value</span>="true" /&gt;</code></pre><h3 id="2-3-相关API使用"><a href="#2-3-相关API使用" class="headerlink" title="2.3 相关API使用"></a>2.3 相关API使用</h3><ul><li><a href="http://docs.apicloud.com/Client-API/Cloud-Service/mam" target="_blank" rel="noopener">mam模块</a></li></ul><div id="P3"></div>## 3. 云修复--<p><img src="http://docs.apicloud.com/img/docImage/seven-course/day7/7.2.png" srcset="/img/loading.gif" alt="云修复"></p><h3 id="3-1-在APICloud控制台进行云修复（应用内热更新）"><a href="#3-1-在APICloud控制台进行云修复（应用内热更新）" class="headerlink" title="3.1 在APICloud控制台进行云修复（应用内热更新）"></a>3.1 在APICloud控制台进行云修复（应用内热更新）</h3><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Guide/smartUpdate" target="_blank" rel="noopener">云修复使用说明</a></em></p><h3 id="3-2-Config文件相关配置"><a href="#3-2-Config文件相关配置" class="headerlink" title="3.2 Config文件相关配置"></a>3.2 Config文件相关配置</h3><pre><code class="hljs pgsql">&lt;preference <span class="hljs-type">name</span>="autoUpdate" <span class="hljs-keyword">value</span>="true" /&gt;&lt;preference <span class="hljs-type">name</span>="smartUpdate" <span class="hljs-keyword">value</span>="false" /&gt;</code></pre><h3 id="3-3-相关API使用"><a href="#3-3-相关API使用" class="headerlink" title="3.3 相关API使用"></a>3.3 相关API使用</h3><ul><li>smartupdatefinish事件</li><li>api.rebootApp()方法</li></ul><div id="P4"></div>## 4. 闪屏广告--<h3 id="4-1-在APICloud控制台使用闪屏广告"><a href="#4-1-在APICloud控制台使用闪屏广告" class="headerlink" title="4.1 在APICloud控制台使用闪屏广告"></a>4.1 在APICloud控制台使用闪屏广告</h3><p><em>推荐文档：<a href="http://docs.apicloud.com/Dev-Guide/start-page-ad-guid" target="_blank" rel="noopener">闪屏广告使用说明</a></em></p><h3 id="4-2-Config文件相关配置"><a href="#4-2-Config文件相关配置" class="headerlink" title="4.2 Config文件相关配置"></a>4.2 Config文件相关配置</h3><pre><code class="hljs pgsql">&lt;preference <span class="hljs-type">name</span>="autoUpdate" <span class="hljs-keyword">value</span>="true" /&gt;</code></pre><h3 id="4-3-相关API使用"><a href="#4-3-相关API使用" class="headerlink" title="4.3 相关API使用"></a>4.3 相关API使用</h3><ul><li>launchviewclicked事件</li></ul><div id="P5"></div>## 5. 优化策略--<h3 id="5-1-了解HTML5特性"><a href="#5-1-了解HTML5特性" class="headerlink" title="5.1 了解HTML5特性"></a>5.1 了解HTML5特性</h3><ul><li>去掉浏览器默认样式</li><li>可点击区域使用div</li><li>使用语义化的标签</li><li>发挥HTML5和CSS3的新特性</li></ul><h3 id="5-2-窗口结构"><a href="#5-2-窗口结构" class="headerlink" title="5.2 窗口结构"></a>5.2 窗口结构</h3><ul><li>Window + Frame 结构</li><li>Frame的高度计算</li><li>按需求优先使用Layout</li></ul><h3 id="5-3-页面加载速度"><a href="#5-3-页面加载速度" class="headerlink" title="5.3 页面加载速度"></a>5.3 页面加载速度</h3><ul><li>HTML、CSS、JS代码写在同一个页面中</li><li>公用的CSS、JS尽量少和小，不要随意加载无用的CSS或JS文件</li><li>尽量减少过多的link或script标签</li></ul><h3 id="5-4-不用重型框架"><a href="#5-4-不用重型框架" class="headerlink" title="5.4 不用重型框架"></a>5.4 不用重型框架</h3><ul><li>避免使用jQuery或BootStrap等重型的框架</li><li>摆脱对$的依赖，培养自己动手的习惯</li><li>使用Mobile First，功能独立的框架</li></ul><h3 id="5-5-屏幕适配"><a href="#5-5-屏幕适配" class="headerlink" title="5.5 屏幕适配"></a>5.5 屏幕适配</h3><ul><li>Viewport</li><li>UI尺寸</li><li>量图标准</li><li>布局方式（弹性响应式＋流式）</li></ul><h3 id="5-6-数据加载"><a href="#5-6-数据加载" class="headerlink" title="5.6 数据加载"></a>5.6 数据加载</h3><ul><li>掌握api.ajax所有参数配置作用，按需求配置使用</li><li>监听网络状态</li><li>合理处理异常信息</li><li>下拉刷新和上拉加载</li><li>JS模版</li><li>数据缓存</li></ul><h3 id="5-7-图片处理"><a href="#5-7-图片处理" class="headerlink" title="5.7 图片处理"></a>5.7 图片处理</h3><ul><li>减少内存占用</li><li>减少图片缩放等耗性能的操作</li><li>在服务区端或使用第三方存储服务来处理图片</li></ul><h3 id="5-8-交互响应速度"><a href="#5-8-交互响应速度" class="headerlink" title="5.8 交互响应速度"></a>5.8 交互响应速度</h3><ul><li>click事件速度优化</li><li>使用平台扩展手势事件</li><li>使用api.parseTapmode进行主动tapmode处理</li><li>点击区域和点击交互效果</li></ul><h3 id="5-9-尊重系统特性"><a href="#5-9-尊重系统特性" class="headerlink" title="5.9 尊重系统特性"></a>5.9 尊重系统特性</h3><ul><li>适时更新UI，理解窗体切换和界面渲染关系</li><li>避免body级别的背景图片，以原生的方式高效实现</li><li>页面之间使用pageParam传完成轻量级参数传递，避免使用过大的参数</li></ul><div id="P6"></div>## 6. 编码规范--<ul><li>遵循<a href="http://docs.apicloud.com/Dev-Guide/widget-package-structure-manual" target="_blank" rel="noopener">APICloud Widget包结构</a>来组成应用代码</li><li>Window、Frame及html文件命名规范</li><li>使用语义化的标签组织页面结构，JS代码中获取的元素要明确指定id，非语义化标签样式定义需要添加class</li><li>任何文件避免使用中文命名、不用包含大写字母</li><li>避免使用?进行参数传递，要使用pageParam</li></ul><div id="P7"></div>## 7. Widget管理--<h3 id="7-1-多Widget架构"><a href="#7-1-多Widget架构" class="headerlink" title="7.1 多Widget架构"></a>7.1 多Widget架构</h3><p><img src="http://docs.apicloud.com/img/docImage/seven-course/day7/7.3.png" srcset="/img/loading.gif" alt="应用组成结构"></p><ul><li>通过ID对Widget进行管理</li><li>Widget在界面上表现为独立的窗口容器，由多个窗口所组成</li><li>每一个Widget在代码、资源、窗口上都完全独立</li><li>同一时刻，应用中只能有一个Widget在界面显示</li><li>按作用分为主Widget和子Widget</li><li>Widget之间可以相互调用</li></ul><h3 id="7-2-主Widget"><a href="#7-2-主Widget" class="headerlink" title="7.2 主Widget"></a>7.2 主Widget</h3><ul><li>加载机制：是应用的入口Widget，应用启动之后首先自动加载运行主Widget</li><li>生命周期：等于整个应用的生命周期，关闭主Widget就会退出应用</li><li>配置文件：作为应用的配置文件，在云端编译应用的时候使用</li><li>代码位置：编译后存在于应用的安装包中，即ipa或apk包中</li></ul><h3 id="7-3-子Widget"><a href="#7-3-子Widget" class="headerlink" title="7.3 子Widget"></a>7.3 子Widget</h3><ul><li>加载机制：不会被应用自动加载运行，需要被其他的Widget调用才能运行</li><li>生命周期：从api.openWidget开始，到api.closeWidget结束</li><li>配置文件：对引擎和云端设置的配置项无效，其他的配置项有效</li><li>代码位置：可以存在于应用的安装包中，也可以存在于应用沙箱中</li></ul><h3 id="7-4-相关API使用"><a href="#7-4-相关API使用" class="headerlink" title="7.4 相关API使用"></a>7.4 相关API使用</h3><ul><li>打开子Widget：api.openWidget</li><li>关闭子Widget：api.closeWidget</li><li>获取参数：api.wgtParam</li></ul><blockquote><p>子Widget搜索路径：主widget包的wgt目录、沙箱中的wgt目录</p></blockquote><p><em>推荐视频：<a href="http://www.apicloud.com/video_play?list=2&index=13" target="_blank" rel="noopener">初级代码篇第13讲</a></em></p><div id="P8"></div>## 8. SuperWebview--<h3 id="8-1-SuperWebview介绍"><a href="#8-1-SuperWebview介绍" class="headerlink" title="8.1 SuperWebview介绍"></a>8.1 SuperWebview介绍</h3><p>SuperWebView是APICloud一款重要的端引擎产品，致力于解决系统WebView功能弱、体验差等问题，加速H5与Native的融合。SuperWebView以SDK的方式提供，原生应用嵌入SuperWebView替代系统WebView，即可在H5代码中使用APICloud平台的所有端API和云服务。</p><h3 id="8-2-SuperWebview特点"><a href="#8-2-SuperWebview特点" class="headerlink" title="8.2 SuperWebview特点"></a>8.2 SuperWebview特点</h3><ul><li>以SDK的方式提供，嵌入到原生工程中使用；</li><li>为每个应用动态编译生成专属的SuperWebView；</li><li>可以调用平台所有端API，通过应用控制台进行配置；</li><li>可以使用平台所有的云服务，如版本管理、云修复、数据云等；</li></ul><p><em>推荐文档</em></p><p><a href="http://docs.apicloud.com/Dev-Guide/SuperWebview-guide-for-android" target="_blank" rel="noopener">SuperWebview开发指南Android</a></p><p><a href="http://docs.apicloud.com/Dev-Guide/SuperWebview-guide-for-ios" target="_blank" rel="noopener">SuperWebview开发指南IOS</a></p><p><a href="http://docs.apicloud.com/superwebview/Android/" target="_blank" rel="noopener">SuperWebView Android API Reference</a></p><p><a href="http://docs.apicloud.com/superwebview/iOS/" target="_blank" rel="noopener">SuperWebView iOS API Reference</a></p><p><em>推荐视频</em></p><p><a href="http://www.apicloud.com/video_play?list=3&index=1" target="_blank" rel="noopener">SuperWebview公开课视频</a></p><p><a href="http://www.apicloud.com/video_play?list=9&index=1" target="_blank" rel="noopener">SuperWebview视频 Android</a></p><p><a href="http://www.apicloud.com/video_play?list=7&index=1" target="_blank" rel="noopener">SuperWebview视频 iOS</a></p>]]></content>
    
    
    <categories>
      
      <category>work</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APICloud app混合开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k-近邻算法</title>
    <link href="/2020/07/24/k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/"/>
    <url>/2020/07/24/k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="k-近邻算法"><a href="#k-近邻算法" class="headerlink" title="k-近邻算法"></a>k-近邻算法</h1><p>k近邻算法采用测量不同特征值之间的距离方法进行分类  </p><ul><li>优点：精度高、对异常值不敏感、无数据输入假定。</li><li>缺点：计算复杂度高、空间复杂度高。</li><li>适用数据范围：数值型和标称型。</li></ul><p>工作原理：<br>存在一个样本数据集合，也称作训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一数据与所属分类的对应关系。输入没有标签的新数据之后，将新数据的每个特征与样本集中数据对应的特征进行比较，然后算法提取样本集中特征最相似（最近邻）数据的分类标签。一般来说，我们只选择样本数据集中前k个最相似的数据，这就是k-近邻法中k的出处，通常k是不大于20的整数。最后，选择k个最相似数据中出现次数最多的分类，作为新数据的分类。</p><p>k-近邻算法的一般流程：</p><ol><li>收集数据：可以使用任何方法</li><li>准备数据：距离计算所需要的数值，最好是结构化的数据格式。</li><li>分析数据：可以使用任何方法</li><li>训练算法：此步骤不用于k-近邻算法</li><li>测试算法：计算错误率</li><li>使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输入数据属于哪个分类，最后应用对计算出的分类执行后续的处理。</li></ol><h2 id="准备：使用Python导入数据"><a href="#准备：使用Python导入数据" class="headerlink" title="准备：使用Python导入数据"></a>准备：使用Python导入数据</h2><p>创建名为kNN.py的python模块。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> operator <span class="hljs-comment">#运算符模块</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createDataSet</span><span class="hljs-params">()</span>:</span>    group = array([[<span class="hljs-number">1.0</span>,<span class="hljs-number">1.1</span>],[<span class="hljs-number">1.0</span>,<span class="hljs-number">1.0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>]])    labels = [<span class="hljs-string">'A'</span>,<span class="hljs-string">'A'</span>,<span class="hljs-string">'B'</span>,<span class="hljs-string">'B'</span>]    <span class="hljs-keyword">return</span> group,labels</code></pre><p>进入python开发环境之后，导入kNN模块。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> kNN</code></pre><p>为了确保输入相同的数据集</p><pre><code class="hljs python">group,labels = kNN.createDataSet</code></pre><h2 id="实施-k-近邻算法"><a href="#实施-k-近邻算法" class="headerlink" title="实施 k-近邻算法"></a>实施 k-近邻算法</h2><p>其伪代码为：<br>对未知类别属性的数据集中的每个点依次执行以下操作：  </p><ol><li>计算已知类别数据集中的点与当前点之间的距离</li><li>按照距离递增排列</li><li>选取与当前点距离最小的k个点</li><li>确定前k个点所在类别的出现频率</li><li>返回前k个点出现频率最高的类别作为当前点的预测分类</li></ol><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">classify0</span><span class="hljs-params">(inX, dataSet, labels, k)</span>:</span>         <span class="hljs-comment">#inX用于分类的输入向量;dataSet训练样本集;labels标签向量，k选择最近邻居数目</span>    dataSetSize = dataSet.shape[<span class="hljs-number">0</span>]                  <span class="hljs-comment">#shape[0]读取矩阵第一维度的长度</span>    diffMat = tile(inX, (dataSetSize,<span class="hljs-number">1</span>))-dataSet    <span class="hljs-comment">#tile（a, [b,c]）a在行上重复b次，在列上重复c次 </span>    sqDiffMat = diffMat**<span class="hljs-number">2</span>                         <span class="hljs-comment">#欧式距离公式</span>    sqDistances = sqDiffMat.sum(axis=<span class="hljs-number">1</span>)    distances = sqDistances**<span class="hljs-number">0.5</span>    sortedDistIndicies = distances.argsort() <span class="hljs-comment">#argsort()对数组数值从小到大排列，按顺序返回索引</span>    classCount=&#123;&#125;    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range (k):        voteIlabel = labels[sortedDistIndicies[i]]        classCount[voteIlabel] = classCount.get(voteIlabel,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span> <span class="hljs-comment">#返回字典classCount中voteIlabel元素对应的值</span>        <span class="hljs-comment">#若无，则进行初始化，+1是每一次都会起作用的,因为不管遇到字典内已经存在的或者不存在的，都需要把这个元素记录下来</span>    sortedClassCount = sorted(classCount.items(), key = operator.itemgetter(<span class="hljs-number">1</span>), reverse = <span class="hljs-literal">True</span>)    <span class="hljs-comment">#operator.itemgetter(1)返回一个可调用对象,如果制定了多个items，返回一个由查询值组成的元组</span>    <span class="hljs-keyword">return</span> sortedClassCount[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]</code></pre><h2 id="如何测试分类器"><a href="#如何测试分类器" class="headerlink" title="如何测试分类器"></a>如何测试分类器</h2><p>可以使用已知答案的数据进行测试，通过大量的测试数据，我们可以得到分类器的错误率</p><h1 id="示例：在约会网站上使用k-近邻算法"><a href="#示例：在约会网站上使用k-近邻算法" class="headerlink" title="示例：在约会网站上使用k-近邻算法"></a>示例：在约会网站上使用k-近邻算法</h1><ol><li>收集数据：提供文本文件</li><li>准备数据：使用Python解析文件</li><li>分析数据：使用Matplotlib画二维扩散图</li><li>训练算法：此步骤不适用于k-近邻算法</li><li>测试算法：使用海伦提供的部分数据作为测试样本</li><li>使用算法：产生简单命令行程序，然后海伦可以输入一些特征数据判断对方是否是自己喜欢的类型</li></ol><h2 id="从文本中解析数据"><a href="#从文本中解析数据" class="headerlink" title="从文本中解析数据"></a>从文本中解析数据</h2><p>数据存放在datingTestSet2.txt中，每个样本数据占据一行，总共1000行，包含3种特征：</p><ul><li>每年获得的飞行常客里程数</li><li>玩视频游戏所耗时间百分比</li><li>每周消费的冰淇淋公升数 </li></ul><pre><code class="hljs python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> operator <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">file2matrix</span><span class="hljs-params">(filename)</span>:</span>    fr = open(filename)    arrayOLines = fr.readlines() <span class="hljs-comment"># readlines()一次性读取整个文件；自动将文件内容分析成一个行的列表</span>    numberOfLines = len(arrayOLines)    returnMat = zeros((numberOfLines,<span class="hljs-number">3</span>)) <span class="hljs-comment">#创建以0填充的矩阵Numpy</span>    classLabelVector = []    index = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> arrayOLines:        line = line.strip() <span class="hljs-comment">#line.strip()截取掉所有的回车字符</span>        listFromLine = line.split(<span class="hljs-string">'\t'</span>) <span class="hljs-comment">#使用tab将上一步得到的整行数据分割成元素列表</span>        returnMat[index,:] = listFromLine[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]        classLabelVector.append(int(listFromLine[<span class="hljs-number">-1</span>]))        index += <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> returnMat, classLabelVector</code></pre><pre><code class="hljs python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> operator datingDataMat,datingLabels = file2matrix(<span class="hljs-string">'/home/liu/Documents/jupyter/machine/data/Ch02/datingTestSet2.txt'</span>)</code></pre><pre><code class="hljs python">datingDataMat</code></pre><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>([[<span class="hljs-number">4.0920000e+04</span>, <span class="hljs-number">8.3269760e+00</span>, <span class="hljs-number">9.5395200e-01</span>],        [<span class="hljs-number">1.4488000e+04</span>, <span class="hljs-number">7.1534690e+00</span>, <span class="hljs-number">1.6739040e+00</span>],        [<span class="hljs-number">2.6052000e+04</span>, <span class="hljs-number">1.4418710e+00</span>, <span class="hljs-number">8.0512400e-01</span>],           ...,        [<span class="hljs-number">2.6575000e+04</span>, <span class="hljs-number">1.0650102e+01</span>, <span class="hljs-number">8.6662700e-01</span>],        [<span class="hljs-number">4.8111000e+04</span>, <span class="hljs-number">9.1345280e+00</span>, <span class="hljs-number">7.2804500e-01</span>],        [<span class="hljs-number">4.3757000e+04</span>, <span class="hljs-number">7.8826010e+00</span>, <span class="hljs-number">1.3324460e+00</span>]])</code></pre><pre><code class="hljs python">datingLabels[<span class="hljs-number">0</span>:<span class="hljs-number">20</span>]</code></pre><pre><code class="hljs json">[<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</code></pre><h2 id="分析数据：使用Matplotlib创建散点图"><a href="#分析数据：使用Matplotlib创建散点图" class="headerlink" title="分析数据：使用Matplotlib创建散点图"></a>分析数据：使用Matplotlib创建散点图</h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltfig = plt.figure()ax = fig.add_subplot(<span class="hljs-number">111</span>) <span class="hljs-comment">#一行一列，1x1网格，第一子图</span>ax.scatter(datingDataMat[:,<span class="hljs-number">1</span>],datingDataMat[:,<span class="hljs-number">2</span>],<span class="hljs-number">15.0</span>*array(datingLabels),<span class="hljs-number">15.0</span>*array(datingLabels))plt.show()</code></pre><p><img src="/img/kNN/01.png" srcset="/img/loading.gif" alt="png"></p><p>带有样本分类标签的约会数据散点图。虽然能够比较容易区分数据点从属类别，但依然很难根据这张图得出结论性的信息</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltfig = plt.figure()ax = fig.add_subplot(<span class="hljs-number">111</span>) <span class="hljs-comment">#一行一列，1x1网格，第一子图</span>ax.scatter(datingDataMat[:,<span class="hljs-number">0</span>],datingDataMat[:,<span class="hljs-number">1</span>],<span class="hljs-number">15.0</span>*array(datingLabels),<span class="hljs-number">15.0</span>*array(datingLabels))plt.show()</code></pre><p><img src="/img/kNN/02.png" srcset="/img/loading.gif" alt="png"></p><p>每年赢得飞行常客里程数与玩视频游戏所占百分比的约会数据散点图。约会数据有三个特征，通过图中展示的两个特征更容易区分数据点从属的类别</p><h2 id="准备数据：归一化数值"><a href="#准备数据：归一化数值" class="headerlink" title="准备数据：归一化数值"></a>准备数据：归一化数值</h2><p>在处理这种不同取值范围的特征值时，通常采用归一化处理。</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">autoNorm</span><span class="hljs-params">(dataSet)</span>:</span>    minVals = dataSet.min(<span class="hljs-number">0</span>) <span class="hljs-comment">#参数0取每列的最小值</span>    maxVals = dataSet.max(<span class="hljs-number">0</span>)      ranges = maxVals - minVals    normDataSet = zeros(shape(dataSet))    m = dataSet.shape[<span class="hljs-number">0</span>]    normDataSet = dataSet - tile(minVals, (m,<span class="hljs-number">1</span>)) <span class="hljs-comment">#使用当前值减去最小值再除以数值变化范围</span>    normDataSet = normDataSet/tile(ranges, (m,<span class="hljs-number">1</span>))    <span class="hljs-keyword">return</span> normDataSet, ranges, minVals</code></pre><pre><code class="hljs python">normDataSet, ranges, minVals = autoNorm(datingDataMat)</code></pre><pre><code class="hljs python">normDataSet</code></pre><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>([[<span class="hljs-number">0.44832535</span>, <span class="hljs-number">0.39805139</span>, <span class="hljs-number">0.56233353</span>],       [<span class="hljs-number">0.15873259</span>, <span class="hljs-number">0.34195467</span>, <span class="hljs-number">0.98724416</span>],       [<span class="hljs-number">0.28542943</span>, <span class="hljs-number">0.06892523</span>, <span class="hljs-number">0.47449629</span>],       ...,       [<span class="hljs-number">0.29115949</span>, <span class="hljs-number">0.50910294</span>, <span class="hljs-number">0.51079493</span>],       [<span class="hljs-number">0.52711097</span>, <span class="hljs-number">0.43665451</span>, <span class="hljs-number">0.4290048</span> ],       [<span class="hljs-number">0.47940793</span>, <span class="hljs-number">0.3768091</span> , <span class="hljs-number">0.78571804</span>]])</code></pre><pre><code class="hljs python">ranges</code></pre><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>([<span class="hljs-number">9.1273000e+04</span>, <span class="hljs-number">2.0919349e+01</span>, <span class="hljs-number">1.6943610e+00</span>])</code></pre><pre><code class="hljs python">minVals</code></pre><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>([<span class="hljs-number">0.</span>      , <span class="hljs-number">0.</span>      , <span class="hljs-number">0.001156</span>])</code></pre><pre><code class="hljs python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> operator <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">datingClassTest</span><span class="hljs-params">()</span>:</span>    hoRatio = <span class="hljs-number">0.50</span>      <span class="hljs-comment">#hold out 10%</span>    datingDataMat,datingLabels = file2matrix(<span class="hljs-string">'/home/liu/Documents/jupyter/machine/data/Ch02/datingTestSet2.txt'</span>)       <span class="hljs-comment">#load data setfrom file</span>    normMat, ranges, minVals = autoNorm(datingDataMat)    m = normMat.shape[<span class="hljs-number">0</span>]    numTestVecs = int(m*hoRatio)    errorCount = <span class="hljs-number">0.0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(numTestVecs):        classifierResult = classify0(normMat[i,:],normMat[numTestVecs:m,:],datingLabels[numTestVecs:m],<span class="hljs-number">3</span>)        print(<span class="hljs-string">"the classifier came back with: %d, the real answer is: %d"</span> % (classifierResult, datingLabels[i]))        <span class="hljs-keyword">if</span> (classifierResult != datingLabels[i]): errorCount += <span class="hljs-number">1.0</span>    <span class="hljs-keyword">print</span> (<span class="hljs-string">"the total error rate is: %f"</span> % (errorCount/float(numTestVecs)))    <span class="hljs-keyword">print</span> (errorCount)</code></pre><pre><code class="hljs python">datingClassTest()</code></pre><details>  <summary>详细结果，点击查看</summary> <pre><code>     the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 2    the classifier came back with: 2, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 1    the classifier came back with: 3, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the total error rate is: 0.066000    33.0 </code></pre></details><p>这个例子表明分类器处理约会数据集的错误率是6.6%</p><h2 id="使用算法：构建完整可用系统"><a href="#使用算法：构建完整可用系统" class="headerlink" title="使用算法：构建完整可用系统"></a>使用算法：构建完整可用系统</h2><p>通过该程序海伦在约会网站上找到某个人的信息，程序会给出她对对方喜欢程度的预测值。</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">classifyPerson</span><span class="hljs-params">()</span>:</span>    resultList = [<span class="hljs-string">'not at all'</span>, <span class="hljs-string">'in small doses'</span>, <span class="hljs-string">'in large doses'</span>]    percentTats = float(input(<span class="hljs-string">"percentage of time spent palying video games?"</span>))    ffMiles = float(input(<span class="hljs-string">"frequent flier miles earned per year?"</span>))    iceCream =  float(input(<span class="hljs-string">"liters of ice cream consumed per year?"</span>))    datingDataMat,datingLables = file2matrix(<span class="hljs-string">'/home/liu/Documents/jupyter/machine/data/Ch02/datingTestSet2.txt'</span>)    normMat,ranges,minVals = autoNorm(datingDataMat)    inArr = array([ffMiles,percentTats,iceCream])    classifierResult = classify0((inArr-minVals)/ranges, normMat, datingLabels,<span class="hljs-number">3</span>)    print(<span class="hljs-string">"You will probaly like this person:"</span>, resultList[classifierResult <span class="hljs-number">-1</span>])</code></pre><pre><code class="hljs python">classifyPerson()</code></pre><pre><code class="hljs angelscript">percentage of time spent palying video games?<span class="hljs-number">20</span>frequent flier miles earned per year?<span class="hljs-number">2000</span>liters of ice cream consumed per year?<span class="hljs-number">1</span>You will probaly like <span class="hljs-keyword">this</span> person: <span class="hljs-keyword">in</span> large doses</code></pre><h1 id="示例：手写识别系统"><a href="#示例：手写识别系统" class="headerlink" title="示例：手写识别系统"></a>示例：手写识别系统</h1><p>构造的系统识别1-9位数字，且需要识别的数字用图形处理软件，处理成具有相同大小色彩的黑白图像。</p><h2 id="准备数据：将图像转换为测试向量"><a href="#准备数据：将图像转换为测试向量" class="headerlink" title="准备数据：将图像转换为测试向量"></a>准备数据：将图像转换为测试向量</h2><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">img2vector</span><span class="hljs-params">(filename)</span>:</span>    returnVect = zeros((<span class="hljs-number">1</span>,<span class="hljs-number">1024</span>))    fr = open(filename)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>):        lineStr = fr.readline()        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>):            returnVect[<span class="hljs-number">0</span>,<span class="hljs-number">32</span>*i+j] = int(lineStr[j])    <span class="hljs-keyword">return</span> returnVect</code></pre><pre><code class="hljs python">testVector = img2vector(<span class="hljs-string">'/home/liu/Documents/jupyter/machine/data/Ch02/digits/testDigits/0_13.txt'</span>)</code></pre><pre><code class="hljs python">testVector[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>:<span class="hljs-number">31</span>]</code></pre><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>([<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>,       <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>])</code></pre><pre><code class="hljs python"><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> listdir<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handwritingClassTest</span><span class="hljs-params">()</span>:</span>    hwLabels = []    trainingFileList = listdir(<span class="hljs-string">'/home/liu/Documents/jupyter/machine/data/Ch02/digits/trainingDigits/'</span>)           <span class="hljs-comment">#load the training set</span>    m = len(trainingFileList)    trainingMat = zeros((m,<span class="hljs-number">1024</span>))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(m):        fileNameStr = trainingFileList[i]        fileStr = fileNameStr.split(<span class="hljs-string">'.'</span>)[<span class="hljs-number">0</span>]     <span class="hljs-comment">#take off .txt</span>        classNumStr = int(fileStr.split(<span class="hljs-string">'_'</span>)[<span class="hljs-number">0</span>])        hwLabels.append(classNumStr)        trainingMat[i,:] = img2vector(<span class="hljs-string">'/home/liu/Documents/jupyter/machine/data/Ch02/digits/trainingDigits/%s'</span> % fileNameStr)    testFileList = listdir(<span class="hljs-string">'/home/liu/Documents/jupyter/machine/data/Ch02/digits/testDigits/'</span>)        <span class="hljs-comment">#iterate through the test set</span>    errorCount = <span class="hljs-number">0.0</span>    mTest = len(testFileList)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(mTest):        fileNameStr = testFileList[i]        fileStr = fileNameStr.split(<span class="hljs-string">'.'</span>)[<span class="hljs-number">0</span>]     <span class="hljs-comment">#take off .txt</span>        classNumStr = int(fileStr.split(<span class="hljs-string">'_'</span>)[<span class="hljs-number">0</span>])        vectorUnderTest = img2vector(<span class="hljs-string">'/home/liu/Documents/jupyter/machine/data/Ch02/digits/testDigits/%s'</span> % fileNameStr)        classifierResult = classify0(vectorUnderTest, trainingMat, hwLabels, <span class="hljs-number">3</span>)        <span class="hljs-keyword">print</span> (<span class="hljs-string">"the classifier came back with: %d, the real answer is: %d"</span> % (classifierResult, classNumStr))        <span class="hljs-keyword">if</span> (classifierResult != classNumStr): errorCount += <span class="hljs-number">1.0</span>    <span class="hljs-keyword">print</span> (<span class="hljs-string">"\nthe total number of errors is: %d"</span> % errorCount)    <span class="hljs-keyword">print</span> (<span class="hljs-string">"\nthe total error rate is: %f"</span> % (errorCount/float(mTest)))</code></pre><pre><code class="hljs python">handwritingClassTest()</code></pre><details>  <summary>详细结果，点击查看</summary>```<pre><code>    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 6, the real answer is: 8    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 9    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 3, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 1, the real answer is: 8    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 1    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 9, the real answer is: 3    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 6, the real answer is: 5    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 7, the real answer is: 9    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 5, the real answer is: 9    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 8    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 2, the real answer is: 2    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 8, the real answer is: 8    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 4, the real answer is: 4    the classifier came back with: 5, the real answer is: 5    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 6, the real answer is: 6    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 3, the real answer is: 3    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 7, the real answer is: 7    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 1, the real answer is: 1    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 9, the real answer is: 9    the classifier came back with: 0, the real answer is: 0    the classifier came back with: 9, the real answer is: 9<pre><code>the total number of errors is: 12the total error rate is: 0.012685</code></pre><p></code></pre></p></details><p>k-近邻算法识别手写数据集，错误率为1.2%。改变k的值、修改函数随机选取样本的数目，都会对k近邻算法的错误率产生影响。</p><p>k-近邻算法应用时十分耗时，其次它无法给出任何数据的基础结构信息，因此我们也无法知晓平均实例样本和典型实例样本具有什么特征。</p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine-learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jupyter-notebook</title>
    <link href="/2020/07/22/Jupyter%20notebook%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <url>/2020/07/22/Jupyter%20notebook%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<p>(转载，原博文链接)<br><a href="https://github.com/TommyZihao/zihaopython" target="_blank" rel="noopener">同济子豪Github</a><br></p><h1 id="为什么学Jupyter-notebook？"><a href="#为什么学Jupyter-notebook？" class="headerlink" title="为什么学Jupyter notebook？"></a>为什么学Jupyter notebook？</h1><p><img src="/img/jupyter/1.png" srcset="/img/loading.gif" alt="jupyter notebook"></p><p>能够编写、运行python文件的程序很多，比如python安装自带的IDLE、程序员喜爱的pycharm、数据科学全家桶Anaconda，还有Spyder、Thonny等。</p><p>而我，独爱jupyter notebook。</p><p>Jupyter notebook是用python进行数据科学、机器学习的必备工具。</p><p>突出优点：</p><ul><li><p>学习Jupyter notebook非常容易，按照我的视频教程一步步做，再自己尝试一下，之后写代码即可健步如飞。</p></li><li><p>能够独立运行一个、几个或全部python代码块，更容易看到中间变量的值，从而进行调试</p></li><li><p>可以插入Markdown说明文字和Latex数学公式，让枯燥的代码充满颜值，可读性爆表</p></li><li><p>能够调用Ipython丰富的“魔法函数”，比如程序计时、重复运行、显示图片等</p></li><li><p>写好的代码和文档能够以网页和ppt的形式在线分享。<a href="https://nbviewer.jupyter.org/" target="_blank" rel="noopener">在线看Jupyter notebook文件</a><br></p></li><li><p>可以在云端远程服务器运行，不需本地安装配置各种环境。<a href="https://jupyter.org/try" target="_blank" rel="noopener">体验一下</a><br></p></li></ul><p>比如下图，包含了Markdown说明文档、代码块、代码运行结果、图片嵌入等元素，特别适合Python数据科学和机器学习撰写文档。</p><p><img src="/img/jupyter/2.png" srcset="/img/loading.gif" alt="jupyter notebook代码分块运行、嵌入Markdown文档和图片"></p><p>吴恩达的《深度学习》慕课的课后编程作业、大数据竞赛网站Kaggle上的代码文档、美国大学的数据科学课程的课后资料及编程作业，都是以jupyter notebook文件的形式给出的，也就是<code>.ipynb</code>文件。</p><blockquote><p>其实Jupyter notebook不止可以运行python，还可以运行julia、R、Javascript等语言，这也是<code>jupyter</code>这个名字的由来。<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels" target="_blank" rel="noopener">Jupyter notebook支持的编程语言</a><br></p><p>Jupyter notebook集编程和写作于一身，这就叫做“文学编程”。</p></blockquote><h1 id="Jupyter-notebook——在浏览器网页中运行python"><a href="#Jupyter-notebook——在浏览器网页中运行python" class="headerlink" title="Jupyter notebook——在浏览器网页中运行python"></a>Jupyter notebook——在浏览器网页中运行python</h1><h2 id="Ipython内核——更高级的python解释器"><a href="#Ipython内核——更高级的python解释器" class="headerlink" title="Ipython内核——更高级的python解释器"></a>Ipython内核——更高级的python解释器</h2><p>Jupyter notebook是基于Ipython内核的，在浏览器中以网页形式运行Python代码的工具，十分方便。</p><blockquote><p>Ipython是啥？</p><p>Ipython可以理解成更高级的python解释器，相比原生的python交互式命令行，Ipython有更强大的命令计数、自动补全等交互功能。</p><p>Spyder和Jupyter notebook都是以Ipython为内核的。</p></blockquote><p><img src="/img/jupyter/3.png" srcset="/img/loading.gif" alt="ipython"></p><h2 id="安装Jupyter-notebook"><a href="#安装Jupyter-notebook" class="headerlink" title="安装Jupyter notebook"></a>安装Jupyter notebook</h2><p>如果你安装了python数据科学全家桶Anaconda，那么其中自带了Jupyter notebook。</p><p>如果你没安装Anaconda，可以直接在命令行里运行这行命令</p><pre><code class="hljs shell">pip install jupyter -i https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><h2 id="运行Jupyter-notebook"><a href="#运行Jupyter-notebook" class="headerlink" title="运行Jupyter notebook"></a>运行Jupyter notebook</h2><p>打开命令行，输入<code>jupter notebook</code>，回车。稍等片刻即可跳出浏览器网页。</p><p><img src="/img/jupyter/4.png" srcset="/img/loading.gif" alt="jupyter notebook打开界面"></p><p>点击右边的New-Python3即可创建python文档。</p><p>点击New-Folder可以创建新文件夹。</p><p>点击New-Text File可以创建空的<code>.txt</code>文件。</p><p>点击New-Terminal可以打开操作系统命令行，你可以使用操作系统对应的命令行进行目录切换、解压文件等操作。</p><p>勾选文件夹，点击rename即可重命名</p><p><img src="/img/jupyter/5.png" srcset="/img/loading.gif" alt="勾选文件夹，点击rename重命名"></p><p>最常用的是点击右边的New-Python3，创建python文档。</p><h1 id="用Jupyter-notebook写python代码"><a href="#用Jupyter-notebook写python代码" class="headerlink" title="用Jupyter notebook写python代码"></a>用Jupyter notebook写python代码</h1><h2 id="写下并运行第一行python代码"><a href="#写下并运行第一行python代码" class="headerlink" title="写下并运行第一行python代码"></a>写下并运行第一行python代码</h2><p>点击左上角<code>Untitled</code>给新建的python文档文件重新命名。</p><p><img src="/img/jupyter/6.png" srcset="/img/loading.gif" alt="重命名"></p><p>在代码框中输入第一行python代码，shift+回车运行</p><p><img src="/img/jupyter/7.png" srcset="/img/loading.gif" alt="输入第一行python代码"></p><p><img src="/img/jupyter/8.png" srcset="/img/loading.gif" alt="运行第一行python代码"></p><h2 id="蓝绿两模式：命令模式、编辑模式"><a href="#蓝绿两模式：命令模式、编辑模式" class="headerlink" title="蓝绿两模式：命令模式、编辑模式"></a>蓝绿两模式：命令模式、编辑模式</h2><p>Jupyter notebook中，代码和文档都存在于一个个单元格中，每个单元格都有蓝色和绿色两种状态。</p><ul><li><p>命令模式（蓝色）：用于执行键盘输入的快捷命令（新增单元格、剪切、复制等等）。通过 <code>Esc</code> 键从绿色的编辑模式切换到蓝色的命令模式，此时单元左侧显示蓝色竖线。</p></li><li><p>编辑模式（绿色）：编辑文本和代码。选中单元并按 <code>Enter</code> 键进入编辑模式，此时单元左侧显示绿色竖线。</p></li></ul><blockquote><p>命令模式和编辑模式，其实是源自于著名的vim编辑器，vim编辑器以特别难学和学成之后可以超神而闻名于世。</p></blockquote><h2 id="两种单元格：代码单元格和Markdown单元格"><a href="#两种单元格：代码单元格和Markdown单元格" class="headerlink" title="两种单元格：代码单元格和Markdown单元格"></a>两种单元格：代码单元格和Markdown单元格</h2><p>Jupyter notebook中，有两种单元格：代码单元格和Markdown单元格。</p><ul><li>代码单元格：这里是你编写代码的地方，通过按 <code>Shift + Enter</code> 运行代码，其结果显示在本单元下方。代码单元左边有 <code>In [1]:</code> 这样的序列标记，方便人们查看代码的执行次序。在蓝色命令模式下，按<code>y</code>键可以将Markdown单元格转换为代码单元格。</li><li>Markdown 单元格：在这里对文本进行编辑，采用 markdown 的语法规范，可以设置文本格式、插入链接、图片甚至数学公式。同样使用 <code>Shift + Enter</code> 运行 markdown 单元来显示渲染后的文本。在蓝色命令模式下按<code>m</code>键可以将代码单元格转换为Markdown单元格。</li></ul><blockquote><p>Markdown是程序员通用的撰写文档的语法，可以轻松实现标题、引用、链接、图片等，非常简洁易学，Github代码托管网站、有道云笔记、简书、知乎、CSDN论坛、电子邮件等都支持Markdown语法。</p><p>学习Markdown，推荐我制作的博客和视频教程：</p><p><a href="https://www.jianshu.com/p/4475b9d8810f" target="_blank" rel="noopener">二十分钟精通排版神器Markdown，从此word和秀米是路人</a><br></p><p><a href="https://www.bilibili.com/video/av35579542" target="_blank" rel="noopener">Bilibili视频：二十分钟精通排版神器Markdown</a><br></p></blockquote><p>编辑Markdown单元格，输入以下内容：</p><pre><code class="hljs markdown"><span class="hljs-section"># 我是Markdown一号标题</span><span class="hljs-section">## 我是Markdown二号标题</span><span class="hljs-section">### 我是Markdown三号标题</span>&gt;我是引用，我这行开头有一个灰色竖杠[<span class="hljs-string">我是外部链接，点我上百度</span>](<span class="hljs-link">www.baidu.com</span>)</code></pre><p><img src="/img/jupyter/9.png" srcset="/img/loading.gif" alt="编辑Markdown单元格"></p><p>然后按<code>shift</code>+<code>Enter</code>运行该单元格。</p><p><img src="/img/jupyter/10.png" srcset="/img/loading.gif" alt="Markdown渲染效果"></p><h1 id="抛弃鼠标，只用键盘"><a href="#抛弃鼠标，只用键盘" class="headerlink" title="抛弃鼠标，只用键盘"></a>抛弃鼠标，只用键盘</h1><p>下面介绍Jupyter notebook快捷键，掌握这些快捷键之后，你将彻底解放你拿鼠标的那只手，更专注、高效地敲代码了。</p><h2 id="最常用快捷键（必会）"><a href="#最常用快捷键（必会）" class="headerlink" title="最常用快捷键（必会）"></a>最常用快捷键（必会）</h2><p>h 查看所有快捷键</p><p>Enter 从命令模式进入编辑模式</p><p>Esc 从编辑模式退回到命令模式</p><p>m 将代码单元格转换为Markdown单元格</p><p>y 将Markdown单元格转换为代码单元格</p><p>shift+Enter 运行本单元格，选择下面的代码块</p><p>ctrl+Enter 运行本单元格</p><p>alt+Enter 运行本单元格，在下方新建一个单元格</p><p>a 在上方新建一个单元格（above）</p><p>b 在下方新建一个单元格（below）</p><p>d 删除选中的单元格（delete）</p><p>x 剪切本单元格</p><p>c 复制本单元格</p><p>shift v 粘贴到上面</p><p>v 粘贴到下面</p><p>l 显示代码行号</p><h2 id="所有快捷键"><a href="#所有快捷键" class="headerlink" title="所有快捷键"></a>所有快捷键</h2><p>h 查看所有快捷键</p><p><img src="/img/jupyter/11.png" srcset="/img/loading.gif" alt="命令模式快捷键"></p><p><img src="/img/jupyter/12.png" srcset="/img/loading.gif" alt="编辑模式快捷键"></p><h2 id="在Markdown单元格中输入数学公式"><a href="#在Markdown单元格中输入数学公式" class="headerlink" title="在Markdown单元格中输入数学公式"></a>在Markdown单元格中输入数学公式</h2><p>分别在两个Markdown单元格内输入以下内容：</p><pre><code class="hljs latex">这是爱因斯坦的质能转换方程$E&#x3D;mc^2$，揭示了质量和能量之间的关系</code></pre><pre><code class="hljs latex">这是一元二次方程求解公式$$x &#x3D; \frac&#123;-b\pm \sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;$$初中数学内容</code></pre><p><img src="/img/jupyter/13.png" srcset="/img/loading.gif" alt="在Markdown单元格中输入Latex公式"></p><p>按<code>shift</code>+<code>Enter</code>渲染运行：</p><p><img src="/img/jupyter/14.png" srcset="/img/loading.gif" alt="渲染之后的Latex数学公式"></p><h1 id="数据分析与可视化实战案例：学习时间与成绩的关系（线性回归）"><a href="#数据分析与可视化实战案例：学习时间与成绩的关系（线性回归）" class="headerlink" title="数据分析与可视化实战案例：学习时间与成绩的关系（线性回归）"></a>数据分析与可视化实战案例：学习时间与成绩的关系（线性回归）</h1><p>先用excel把玩数据</p><p><img src="/img/jupyter/15.png" srcset="/img/loading.gif" alt="excel中的线性回归"></p><p>观察数据、导入数据、划分特征和标签、划分训练集和测试集、构建模型，模型可视化</p><h1 id="用Jupyter-notebook制作ppt并在线分享"><a href="#用Jupyter-notebook制作ppt并在线分享" class="headerlink" title="用Jupyter notebook制作ppt并在线分享"></a>用Jupyter notebook制作ppt并在线分享</h1><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://www.jianshu.com/p/86117613b7a6" target="_blank" rel="noopener">左手代码，右手写作：你必须会的Jupyter Notebook</a><br></p><p><a href="https://www.jianshu.com/p/4475b9d8810f" target="_blank" rel="noopener">二十分钟精通排版神器Markdown，从此word和秀米是路人</a><br></p><p><a href="https://www.bilibili.com/video/av35579542" target="_blank" rel="noopener">Bilibili视频：二十分钟精通排版神器Markdown</a><br></p>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>machine-learning</tag>
      
      <tag>Jupyter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习清单——未完待续</title>
    <link href="/2020/07/15/%E5%AD%A6%E4%B9%A0%E6%B8%85%E5%8D%95%E2%80%94%E2%80%94%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/"/>
    <url>/2020/07/15/%E5%AD%A6%E4%B9%A0%E6%B8%85%E5%8D%95%E2%80%94%E2%80%94%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/</url>
    
    <content type="html"><![CDATA[<h3 id="学习清单"><a href="#学习清单" class="headerlink" title="学习清单"></a>学习清单</h3><ul><li><input checked="" disabled="" type="checkbox"> linux基础</li><li><input checked="" disabled="" type="checkbox"> Python</li><li><input checked="" disabled="" type="checkbox"> Git&amp;Github</li><li><input checked="" disabled="" type="checkbox"> Markdown写博客 </li><li><input checked="" disabled="" type="checkbox"> 爬虫</li><li><input checked="" disabled="" type="checkbox"> Numpy、Matplotlib、Pandas</li><li><input checked="" disabled="" type="checkbox"> 吴恩达机器学习</li><li><input disabled="" type="checkbox"> 《算法图解》</li><li><input disabled="" type="checkbox"> 开始刷Leecode</li><li><input disabled="" type="checkbox"> 《大话数据结构》</li><li><input disabled="" type="checkbox"> 《统计学习》、《机器学习实战》</li><li><input disabled="" type="checkbox"> Kaggle项目入门</li><li><input disabled="" type="checkbox"> 数据挖掘理论算法补充</li><li><input disabled="" type="checkbox"> Kaggle、“天池” 项目比赛实战 </li><li><input disabled="" type="checkbox"> 实习  </li></ul>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D入门（一）</title>
    <link href="/2020/07/09/Unity3D%E5%85%A5%E9%97%A8/"/>
    <url>/2020/07/09/Unity3D%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Unity3D介绍"><a href="#Unity3D介绍" class="headerlink" title="Unity3D介绍"></a>Unity3D介绍</h3><p>创建游戏和三维互动内容的开发工具<br>Virtual Reality（VR）利用电脑模拟产生一个三维空间的虚拟世界，并提供视觉、听觉、触觉等感官的模拟。使用者通过各种输入设备与虚拟环境中的事物进行交互，从而产生身临其境的体验。<br>游戏引擎，程序的框架，一款游戏最核心的代码，包含：渲染引擎、碰撞检测系统、音效、脚本引擎、动画系统、人工智能、网络引擎、以及场景管理。使用游戏引擎，开发者可以重用已有的核心技术，将精力集中在游戏逻辑和设计上，从而简单快速的创建游戏。  </p><ul><li>Unity环境搭建</li><li>C#语言基础</li><li>Unity API</li><li>物理引擎1</li><li>3D数学基础</li><li>UGUI  </li><li>Unity高级组件</li><li>IO，协程，多线程</li><li>Unity高级组件应用</li><li>常用数据结构</li><li>AR项目、VR项目</li><li>NGUI-ARPG项目贯穿</li><li>美术资源性能优化</li><li>Shader</li><li>面向对象</li><li>类库开发</li><li>设计模式</li><li>人工智能</li><li>美术规范及优化</li><li>XML及Json</li><li>数据库</li><li>项目制作</li></ul><h4 id="面板介绍"><a href="#面板介绍" class="headerlink" title="面板介绍"></a>面板介绍</h4><p><strong>project</strong> 工程素材文件、资源，直接拖进去（Assets文件夹。右键可以导出unity包 同样也可以导入。<br><img src="/img/unity/01.png" srcset="/img/loading.gif" alt="图1"><br><strong>Hierarchy</strong> 放游戏对象，从资源中拖过来，创建对象，使用对象。<br><strong>Scene</strong> 对游戏对象进行操作，旋转、平移等：  </p><ol><li>按下鼠标滚轮拖动场景，滑动滚轮缩放场景。</li><li>鼠标右键旋转场景，点击“小手”后，通过左键移动场景。</li><li>点击右键的同时按下W/S/A/D/Q/E可实现场景漫游。</li><li>在Scene面板中选中物体后按F键，或在Hierarchy面板双击物体，可将物体设置为场景视图的中心。</li><li>按住alt键同时通过鼠标左键围绕某物体旋转场景，鼠标右键缩放场景。  </li></ol><p><strong>Game</strong>面板 游戏运行之后进行预览<br>播放暂停键，运行暂停游戏<br><strong>Inspector</strong>面板，显示当前选定的游戏对象附加的组件及其属性信息。为重要游戏物体选择图标。<br><img src="/img/unity/02.png" srcset="/img/loading.gif" alt="图2">   </p><h4 id="摆放物体"><a href="#摆放物体" class="headerlink" title="摆放物体"></a>摆放物体</h4><p>放置单面平板<br><img src="/img/unity/03.png" srcset="/img/loading.gif" alt="图3"><br>放置完之后点reset，使之置于零点，便于开发<br>变换切换：  </p><ul><li>左边是改变游戏对象的轴心点<br>Center:设置轴心点在物体的中心<br>Pivot：使用物体本身的轴心  </li><li>右边是改变物体的坐标，Global：世界坐标;Local：自身坐标  </li></ul><h4 id="创建物体"><a href="#创建物体" class="headerlink" title="创建物体"></a>创建物体</h4><p><strong>场景Scene</strong>：一组相关联的游戏对象的集合，通常游戏中每个关卡就是一个场景，用于展现当前关卡中所有的物体。<br><strong>游戏对象GameObject</strong>：运行时出现在场景中的游戏物体;是一种容器，可以挂载组件;父子物体，在Hierarchy面板中，将一个物体拖拽到另一个物体中。子物体将继承父物体的移动，旋转和缩放属性，但子物体不影响父物体。<br><strong>组件Component</strong>：是游戏的功能模块；每个组件都是一个类的实例。</p><ul><li>Transform变换组件：决定物体位置、旋转、缩放比例。</li><li>Mesh Filter网格过滤器：用于从资源中获取网格信息。</li><li>Mesh Renderer网格渲染器：从网络过滤器中获得几何形状，再根据变化组件定义的位置进行渲染</li><li>网格过滤器和网格渲染器联合使用，使模型显示到屏幕上。  </li></ul><p>创建一个立方体：  </p><ol><li>创建空物体：GameObject-Create Empty。</li><li>创建网格过滤器：Component-Mesh-MeshFilter 设置Mesh属性。</li><li>创建网格渲染器：Component-Mesh-Mesh Renderer 设置材质Material属性。</li></ol><p><img src="/img/unity/04.png" srcset="/img/loading.gif" alt="图4">   </p><h4 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h4><p>材质：物体的质地，指色彩、纹理、光滑度、透明度、反射率、发光度等等。实际就是Shader的实例。<br>Shader着色器：专门用来渲染3D图形的技术，可以使纹理以某种方式展现。实际上就是一段嵌入到渲染管线中的程序，可以控制GPU运算图像效果的算法。<br>Texture纹理：附加到物体表面的贴图。<br>在资源中右键创建  </p><ul><li>渲染模式<br>Opaque 不透明，默认选项<br>Transparent 透明，用于半透明和全透明物体，如玻璃<br>Cutout 镂空，用于完全透明或完全不透明物体，如栅栏<br>Fade渐变，用于需要淡入淡出的物体。</li></ul><p><img src="/img/unity/05.png" srcset="/img/loading.gif" alt="图5"><br>Main Maps</p><ul><li>Albedo 基础贴图：决定物体表面纹理与颜色。</li><li>Metallic金属：使用金属特性模拟外观。</li><li>Specular 镜面反射：使用镜面特性模拟外观</li><li>Smoothness光滑度：设置物体表面光滑程度。</li><li>Normal Map 法线贴图：描述物体表面凹凸程度。</li><li>Emission 自发光：控制物体表面自发光颜色和贴图。<br>–None 不影响环境<br>–Realitime 实时动态改变<br>–Backed 烘焙生效  </li><li>Tiling 平铺：沿着不同的轴，纹理平铺个数。</li><li>Offset 偏移：滑动纹理。</li></ul><p>物体轮廓  </p><ol><li>创建材质Outline</li><li>指定着色器 BasicOutline</li><li>指定纹理 Texture</li><li>设置到物体中  </li></ol><h4 id="摄像机"><a href="#摄像机" class="headerlink" title="摄像机"></a>摄像机</h4><ul><li>附加了摄像机Camera组件的游戏对象</li><li>向玩家捕获和显示世界的设备</li><li>场景中的摄像机不受限制</li></ul><p>摄像机组件：</p><ul><li>Transform 变换组件</li><li>Camera 摄像机：向玩家捕获和显示世界</li><li>Flare Layer 耀斑层：激活可显示光源耀斑</li><li>GUI Layer：激活可渲染二维GUI元素</li><li>Audio Listener音频监听器：接收场景输入的音频源Audio Source 并通过计算机的扬声器播放声音。</li></ul><p>使用天空盒</p><ul><li>设置摄像机Clear Flags 属性为Skybox</li><li>方式一：摄像机添加组件Skybox</li><li>方法二：光照窗口<br>Window-Lighting-Environment Lighting –Skybox可作为反射源将天空色彩反射到场景中的物体。</li></ul><p>天空盒材质种类：6 Sided、Procedural、Cubemap<br>属性：</p><ul><li>Clear Flags 清除标识：决定屏幕的空白部分如何处理<br> Skybox 天空盒：空白部分显示天空盒图案<br> Solid Color 纯色：空白部分显示背景颜色<br> Depth Only 仅深度：画中画效果时，小画面摄像机选择该项可清除屏幕空部分信息只保留物体颜色信息<br> Don`t Clear 不清除：不清除任何颜色或者深度缓存。</li><li>Background 背景：所有元素绘制后，没有天空盒的情况下，剩余屏幕的颜色。</li><li>Culling Mask 选择屏蔽层：选择要照射的蹭Layer。</li><li>Projection 投射方式：<br> Perspective透视：透视图，物体具有近大远小效果<br> Orthographic正交：摄像机会均匀地渲染物体，没有透视感，通常小地图使用。</li><li>Size大小（正交模式）：摄像机视口的大小</li><li>Field of view 视野（透视模式）：设置相机视野的远近距离</li><li>Field of view 裁剪面：相机从开始到结束渲染的距离<br>   Near近：绘制的最近点<br>   Far远：绘制的最远点</li><li>Viewport Rect 视口矩形：标明这台相机视图将会在屏幕上绘制的屏幕坐标。<br> X：摄像机视图的开始水平位置<br> Y：摄像机视图的开始垂直位置<br> W宽度：摄像机输出在屏幕上的宽度<br> H高度：摄像机输出在屏幕上的高度</li><li>Depth 深度：相机在渲染顺序上的位置。具有较低深度的摄像机将在较高深度的摄像机之前渲染。  </li></ul><h4 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h4><p>图形数据在GPU上经过运算处理，最后输出到屏幕的过程。<br><img src="/img/unity/06.png" srcset="/img/loading.gif" alt="图6"><br>顶点处理：接收模型顶点的数据;坐标系转换。<br>图元装配：组装面，连接相邻的顶点，绘制为三角面。<br>光栅化： 计算三角面上的像素，并为后面着色阶段提供合理的插值参数。<br>像素处理：对每个像素区域进行着色。写入到缓存中。<br>缓存：一个存储像素数据的内存块，最重要的缓存是帧缓存与深度缓存。帧缓存：存储每个像素的色彩，即渲染后的图像。帧缓存常常在显存中，显卡不断读取并输出到屏幕中。深度缓存z-buffer：存储像素的深度信息，即物体到摄像机的距离。光栅化时便于计算各像素的深度值，如果新的深度值比现有值更近，则像素颜色被写到帧缓存，并替换深度缓存。    </p><p>即时遮挡剔除</p><ul><li>即时遮挡剔除Instant Occlusion Culling</li><li>遮挡剔除：当物体被送进渲染流水线之前，将摄像机视角内看不到的物体进行剔除，从而减少了每帧渲染数据量，提高渲染性能。</li></ul><p>LOD  </p><ul><li>多细节层次 Level of Detail<br>LOD技术指的是根据物体模型的节点在显示环境中所处的位置和重要度，决定物体渲染的资源分配，降低非重要物体的面数和细节度，从而获得高效率的渲染运算。</li></ul><h4 id="光照系统"><a href="#光照系统" class="headerlink" title="光照系统"></a>光照系统</h4><p>Global Illumination</p><ul><li>简称GI，即全局光照</li><li>能够计算直接光、间接光、环境光以及反射光的光照系统。</li><li>通过GI算法可以使渲染出来的光照效果更为真实丰富。</li></ul><p>直接光照：</p><ul><li>从光源直接发出的光，通过Light组件实现</li><li>Type类型：灯光对象的当前类型<br>–Directional Light 平行光：平行发射光线，可以照射场景里所有物体，用于模拟太阳。<br>–Point Light点光源：在灯光位置上向四周发射光线，可以照射其范围内的所有对象，用于模拟灯泡。<br>–Spot Light聚光灯：在灯光位置上向圆锥区域发射光线，只有在这个区域内的物体才会受到光线照射，用于模拟探照灯。<br>–Area Light区域光：由一个面向一个方向发射光线，只照射该区域内的物体，仅烘焙时有效，用在光线较为集中的区域。<br>–Range范围：光从物体的中心发射的范围。仅适用于点光源和聚光灯。<br>–Spot Angle 聚光角度：灯光的聚光角度，只适用于聚光灯。<br>–Color颜色：光线的明亮程度。<br>–Intensity强度：光线的明亮程度。<br>–Culling Mask 选择遮蔽层：选择要照射的层Layer。</li><li>Shadow Type阴影类型：Hard硬阴影、Soft软阴影<br>–Strength 硬度：阴影的黑暗程度。<br>–Resolution 分辨率：设置阴影的细节程度。<br>–Bias 偏移：物体与阴影的偏移。  </li><li>通过Mesh Renderer组件启用禁用阴影<br>–Cast/Receive Shadows 当前物体是否投射/接收阴影。<br>–Off 不投射阴影，On投射阴影，Two Sided 双面阴影，Shadows Only 隐藏物体只投射阴影</li><li>阴影剔除：设置显示阴影的距离<br>Edit-&gt;Project Settings-&gt;Quality-&gt;Shadows Disdance  </li></ul><p>环境光照：  </p><ul><li>作用于场景内所有物体的光照，通过Environment Lighting中的Ambient控制。</li><li>Ambient Source 环境光源<br>–Skybox通过天空盒颜色设置环境光照<br>–Gradient梯度颜色<br>Sky 天空颜色、Equator 地平线颜色、Ground 地面颜色<br>–Ambient Color纯色  </li><li>Ambient Intensity 环境光强度     </li><li>Ambient GI 环境光GI模式<br>–Realtime 实时更新，环境光源会改变选择此项<br>–Backed  烘焙，环境光源不会改变选择此项。  </li></ul><p>反射光照</p><ul><li>根据天空盒或立方体贴图计算的作用于所有物体的反射效果，通过Environment Lighting中Reflection控制。</li><li>Reflection Source反射源<br>–Skybox天空盒<br>Resolution 分辨率 Compression 是否压缩<br>–Custom 自定义<br>Cubemap 立方体贴图  </li><li>Reflection Intensity 反射强度  </li><li>Reflection Bounces 使用Reflection Probe 后允许不同游戏对象间来回反弹的次数。  </li></ul><p>间接光照</p><ul><li>物体表面在接受关照之后反射出来的光。  </li><li>通过Light组件中Bounce Intensity反弹强度控制。</li><li>可以通过Scene面板中Irradiance模式查看间接光照。</li><li>注意：只有标记Lightmaping Static的物体才能产生间接反弹光照。</li></ul><p>Realtime GI</p><ul><li>所谓实时是指在运行期间任意修改光源，而所有的变化可以立即更新。</li><li>正是由于Unity5引入了实时全局光照技术Enlighten系统，才可以在运行时产生间接光照，使场景更为真实丰富<br>操作步骤：  <ol><li>游戏对象设置为Lightmaping Static</li><li>启用Lighting面板的Precomputed Realtime GI</li><li>点击Build按钮（如果勾选Auto编辑器会自动检测场景的改动修复光照效果） </li></ol></li></ul><p>烘焙Lightmap</p><ul><li>当场景包含大量物体时，实时光照和阴影对游戏性能有很大影响。使用烘焙技术，可以将光线效果预渲染成贴图再作用到物体上模拟光照，从而提高性能。<ol><li>游戏对象设置为Lightmaping Static</li><li>设置Light组件Baking属性</li><li>启用Lighting面板的Baked GI</li><li>点击Build按钮（如果勾选Auto编辑器会景的改动修复光照效果  </li></ol><ul><li>Light组件Baking属性：烘焙模式<br> –Realtime 仅实时光照时起作用<br> –Baked 仅烘焙时起作用<br> –Mixed 混合，烘焙和实时光照都起作用<br>可以通过Scene面板的Baked模式查看光照贴图。  </li></ul></li></ul><p>光源侦测Light Probes</p><ul><li>由于LightMapping只能作用于static物体，所以导致运动的物体与场景中的光线无法融合在一起，显得非常不真实。而Light Probes组件可以通过Probe收集光影信息，然后对运动物体邻近的几个Probe进行插值运算，最后将光照作用到物体上。  </li></ul>]]></content>
    
    
    <categories>
      
      <category>work</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>吴恩达机器学习（三）</title>
    <link href="/2020/07/02/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2020/07/02/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><h4 id="无监督学习的概念"><a href="#无监督学习的概念" class="headerlink" title="无监督学习的概念"></a>无监督学习的概念</h4><p>在无监督学习中，我们的数据并不带有任何标签。聚类算法有很多的实际应用，例如市场分割、社交网络分析，组织计算集群，天文数据分析。</p><h4 id="K-Means算法"><a href="#K-Means算法" class="headerlink" title="K-Means算法"></a>K-Means算法</h4><p><img src="/img/machine-learning/51.png" srcset="/img/loading.gif" alt="图51">  </p><ol><li>执行k均值算法，第一步是随机生成两点，这两点称为聚类中心。</li></ol><p><img src="/img/machine-learning/52.png" srcset="/img/loading.gif" alt="图52"><br>K均值算法是一种迭代算法，它会做两件事，第一个是簇分配，第二个是移动聚类中心。在K均值算法中，每次内循环的第一步，是要进行簇分配，也就是说，我要遍历每个样本，也就是图上的每个绿点，然后根据每一个点，是与红色聚类中心更近，还是与蓝色聚类中心更近，来将每个数据点分配给两个聚类中心之一。具体来说，就是遍历你的数据集，然后将每个点染成红色或蓝色，这取决于某个点是更接近于红色聚类中心还是更接近蓝色聚类中心，现在已经分好了图中点。<br><img src="/img/machine-learning/53.png" srcset="/img/loading.gif" alt="图53"><br>这就是簇分配的步骤。<br>K均值的第二步就是移动聚类中心，我们要做的是将两个聚类中心，也就是红色和蓝色的叉，将其移动到同色的点的均值处，因为我们要做的是，找出所有红色的点，然后计算它们的均值，也就是所有的红色点的平均位置，然后把红色的聚类中心移动到这里，蓝色聚类中心也一样，找出所有蓝点并计算它们的均值，然后把蓝色聚类中心移动到那里。<br><img src="/img/machine-learning/54.png" srcset="/img/loading.gif" alt="图54"><br>如果不断运行K均值算法的迭代，可以得到<br><img src="/img/machine-learning/55.png" srcset="/img/loading.gif" alt="图55"><br>K均值算法接受两个输入，一个是参数K，它表示你想从数据中聚类出的簇的个数，另一个输出就是一系列无标签的，只用x来表示的数据集。<br>Input：  </p><ul><li>K(number of clusters)</li><li>Training set{$x^{(1)},x^{(2)},..,x^{(m)}$}</li><li>$x^{i}\in\mathbb{R}^n$(drop $x_0=1$ convention)<br>K均值算法：<br>随机初始化K个聚类中心 $\mu_1,\mu_2,..,\mu_k\in\mathbb{R}^n$  <blockquote><p>Repeat {<br>for $i=1$ to $m$<br>  $c^{(i)}$:=index(from 1 to K) of cluster centroid closest to $x^{(i)}$<br>for $k=1$ to K<br>  $\mu_k$:=average (mean) of points assigned to cluster k<br>}  </p></blockquote></li></ul><ol><li>$c^{(i)}$来表示第1个到第k个，最接近$x^{(i)}$的聚类中心，这就是簇分配步骤，将每个样本，根据它离哪一个聚类中心更近一些，将其染成对应的颜色。所以$c^{(i)}$是一个在1到k之间的数，它表明这个点是更接近红色的叉还是蓝色的叉。  </li><li>$\mu_k$代表这个簇中所有点的均值</li></ol><h4 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h4><p>K均值的优化目标函数</p><blockquote><p>$c^{(i)}$ = index of cluster(1,2..,K)to which wxample $x^{(i)}$ is currently assigned<br>$\mu_k$ = cluster centroidk ($\mu_k\in\mathbb{R}$)<br>$\mu_{c^{(i)}}$ = cluster centroid of cluster to which example $x^{(i)}$ has been assigned</p></blockquote><p>优化目标函数(失真函数)可以表示为：<br>$$J(c^{(1)},…,c^{(m)},\mu_1,…,\mu_k)=\frac{1}{m}\parallel x^{(i)}-\mu_{c^{(i)}}\parallel^2$$<br>$$\min\limits_{c^{(1)},…,c^{(m)},\mu_1,…,\mu_k}J(c^{(1)},…,c^{(m)},\mu_1,…,\mu_k)$$</p><h4 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h4><p>当运行K均值算法时，你应该把聚类中心数值K设置为比训练样本数量m小的值。如果运行一个K均值算法，它的聚类中心数等于或大于样本数会很奇怪。<br>随机挑选K个训练样本，然后设定$\mu_1$到$\mu_k$,让它们等于这K个样本。<br>假设K等于2,为了初始化聚类中心，随机挑选两个样本，要初始化聚类中心，只需要将这两个样本作为聚类中心。<br>K均值算法可能会落在局部最优，如果随机初始化不好，则会得到较差的局部最优。我们能做的就是初始化K均值算法很多次，并运行K均值算法很多次，以此来保证我们最终能得到一个足够好的结果，具体做法为：  </p><blockquote><p>For i = 1 to 100{<br>    Randomly initialize K-means.<br>    Run K-means. Get $c^{(1)},…,c^{(m)},\mu_1,…,\mu_k$.<br>    Compute cost function (distortion)<br>     $J(c^{(1)},…,c^{(m)},\mu_1,…,\mu_k)$<br>}<br>Pick clustering that gave lowest cost $J(c^{(1)},…,c^{(m)},\mu_1,…,\mu_k)$  </p></blockquote><h4 id="选取聚类数量"><a href="#选取聚类数量" class="headerlink" title="选取聚类数量"></a>选取聚类数量</h4><p>选择聚类数量，肘部法则，通过改变K值来计算目标优化函数的值并画图。<br><img src="/img/machine-learning/56.png" srcset="/img/loading.gif" alt="图56"><br>有时，您正在运行K-means以获得群集以用于稍后的/下游用途。根据指标评估K均值，以了解该指标在以后的目的中的表现。也就是根据目的去选择K的数量。  </p><h3 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h3><h4 id="目标1-数据压缩"><a href="#目标1-数据压缩" class="headerlink" title="目标1 数据压缩"></a>目标1 数据压缩</h4><p>有些数据的特征是可以削减的，例如厘米和英尺这两个特征。<br>2D to 1D 将数据投影到直线<br>3D to 2D 将数据投影到平面  </p><h4 id="目标2-可视化"><a href="#目标2-可视化" class="headerlink" title="目标2 可视化"></a>目标2 可视化</h4><p>多维数据不能可视化，需要降维呈现。降维后特征所表述的意义可以通过图像来理解。</p><h4 id="主成分分析问题规划"><a href="#主成分分析问题规划" class="headerlink" title="主成分分析问题规划"></a>主成分分析问题规划</h4><p>降维操作最常用的算法是一个叫做主成分分析（PCA）的算法。找一个低维平面，然后将高维数据都投影在该平面上。<br>在应用PCA之前，常规的做法是先进性均值归一化和特征规范化，使得特征均值为0，并且其数值在可比较范围之内。<br><img src="/img/machine-learning/57.png" srcset="/img/loading.gif" alt="图57"><br>从2维减少到1维：找到要在其上投影数据的方向（向量$u^{(1)}\in\mathbb{R}^n$，以最大程度地减少投影误差。<br>PCA并不是线性回归<br><img src="/img/machine-learning/58.png" srcset="/img/loading.gif" alt="图58"><br>PCA试图找到一个低维的平面，来对数据进行投影，以便最小化投影误差的平方，以及最小化每个点与投影后的对应点之间距离的平方值。  </p><p>数据预处理<br>训练集：$x^{(1)},x^{(2)},…,x^{(m)}$<br>预处理（特征缩放/均值标准化）：<br>$$\mu_j=\frac{1}{m}\sum^m_{i=1}x_j^{(i)}$$<br>用$x_j-\mu_j$去代替$x_j^{(i)}$.<br>如果不同的特征规模不同的话，（例如$x_1=size\quad of \quad house,x_2=number\quad of \quad bedrooms$）,缩放特征量以具有可比较的值范围。</p><p>主成分分析（PCA）算法<br>将数据从n维降到k维<br>计算“协方差”:<br>$$\Sigma=\frac{1}{m}\sum_{i=1}^n(x^{(i)})(x^{(i)})^T$$</p><blockquote><p>From <code>[U,S,V]=svd(Sigma)</code>, we get:<br>$U=\begin{bmatrix} |&amp;|&amp;…&amp;| \ u^{(1)}&amp;u^{(2)}&amp;…&amp;u^{(n)} \ |&amp;|&amp;…&amp;| \end{bmatrix}\in\mathbb{R}^{n\times n}$<br>take the first K Columns of the U matrix</p></blockquote><p><img src="/img/machine-learning/59.png" srcset="/img/loading.gif" alt="图59">  </p><h4 id="主成分数量的选择"><a href="#主成分数量的选择" class="headerlink" title="主成分数量的选择"></a>主成分数量的选择</h4><p>选择K（主成分数量）<br>平均投影误差平方：$\frac{1}{m}\sum\limits^m_{i=1}\parallel x^{(i)}-x_{approx}^{(i)}\parallel^2$<br>数据的总变化：$\frac{1}{m}\sum\limits^m_{i=1}\parallel x^{(i)}\parallel^2$<br>通常，将k选择为最小值，以便<br>$$\frac{\frac{1}{m}\sum\limits_{i=1}^m\parallel x^{(i)}-x_{approx}^{(i)}\parallel^2} {\frac{1}{m}\sum\limits^m_{i=1}\parallel x^{(i)}\parallel^2}\leq0.01 \qquad (1%)$$<br>“保留99％的方差信息”<br><img src="/img/machine-learning/60.png" srcset="/img/loading.gif" alt="图60">  </p><blockquote><p>Pick smallest value of k for which<br>$\frac{\sum\limits^k_{i=1}S_{ii}}{\sum\limits^m_{i=1}S_{ii}}\geq0.99$<br>(99% of variance retained)  </p></blockquote><h4 id="压缩重现（解压）"><a href="#压缩重现（解压）" class="headerlink" title="压缩重现（解压）"></a>压缩重现（解压）</h4><p>$z^{(i)}=U^T_{reduce}x^{(i)}$<br>$x^{(i)}=U_{reduce}z^{(i)}$</p><h4 id="应用PCA的建议"><a href="#应用PCA的建议" class="headerlink" title="应用PCA的建议"></a>应用PCA的建议</h4><p>利用PCA对监督学习算法进行加速<br>假设有一个监督学习的例子<br>$(x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}),…,(x^{(m)},y^{(m)})$<br>如果$x^{(i)}\in\mathbb{R}^{10000}$,对于这种高维的特征向量，运行学习算法时将变得非常慢。使用PCA可以减少数据的维度，从而使得算法运行更加高效。  </p><ol><li>首先可以检查已经被标记的训练集，并抽取输入，把y暂时放在一边,所以我们就得到了一个无标签的训练集。<br>Unlabeled dataset：$x^{(1)},x^{(2)},..,x^{(m)}\in\mathbb{R}^{10000}$  </li><li>接着我们使用PCA得到原始数据的低维表示$z^{(1)},z^{(2)},..,z^{(m)}\in\mathbb{R}^{1000}$  </li><li>这就给了我们一个新的训练集$(z^{(1)},y^{(1)}),(z^{(2)},y^{(2)}),…,(z^{(m)},y^{(m)})$  </li><li>我们可以将新的训练集输入假设函数，进行计算，但不能应用在交叉验证集或者在测试集上。  </li></ol><p>！！PCA不可以去修缮过拟合的问题</p><h3 id="异常检测"><a href="#异常检测" class="headerlink" title="异常检测"></a>异常检测</h3><p>假如你是一个飞机引擎生产商，在生产飞机引擎时，你需要进行质量控制测试，而作为这个测试一部分，你测量了飞机引擎的一些特征变量。例如：<br>Aircraft engine features:<br>$x_1 = heat\quad generated$<br>$x_2 = vibration\quad intensity$<br>…<br>Dataset:{$x^{(1)},x^{(2)},…,x^{(m)}$}<br>加入有一天有了一个新引擎，有一个特征变量集$x_{test}$。所谓的异常检测问题就是，我们希望知道这个新的飞机引擎是否有某种异常。<br>定义：<br>数据集：{$x^{(1)},x^{(2)},…,x^{(m)}$}<br>这个数据集里是正常的，那新的$x_{test}$是否正常呢？<br>欺诈识别:<br>$x^{(i)}$=用户活动的特征<br>Model $p(x)$ from data<br>通过 $p(x)&lt;\varepsilon$ 检查哪些非正常用户    </p><h4 id="高斯分布（-正态分布）"><a href="#高斯分布（-正态分布）" class="headerlink" title="高斯分布（/正态分布）"></a>高斯分布（/正态分布）</h4><p>对于$x\in\mathbb{R}$. 如果x服从均值为$\mu$,方差为$\sigma^2$的正态分布。 可写作：<br>$x\sim N(\mu,\sigma^2)$<br>$$p(x;\mu,\sigma^2)=\frac{1}{\sqrt{2\pi}\sigma}exp(-\frac{(x-\mu)^2}{2\sigma^2})$$<br><img src="/img/machine-learning/61.png" srcset="/img/loading.gif" alt="图61"><br>参数估计<br>Dataset：{$x^{(1)},x^{(2)},…,x^{(m)}$}<br>假设这些样本来自一个高斯分布的总体，假设我猜测每一个样本$x^{(i)}$服从高斯分布，但是我们不知道$\mu$和$\sigma^2$是多少。参数估计就是从数据集中估计出未知的参数。<br>$$\mu=\frac{1}{m}\sum_{i=1}^mx^{(i)}$$<br>$$\sigma^2=\frac{1}{m}\sum_{i=1}^m(x^{(i)}-\mu)^2$$</p><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>概率密度估算<br>Training set:{$x^{(1)},x^{(2)},…,x^{(m)}$}<br>Each example is $x\in\mathbb{R}^m$<br>$x_1\sim N(\mu_1,\sigma_1^2)$<br>$x_2\sim N(\mu_2,\sigma_3^2)$<br>$x_3\sim N(\mu_3,\sigma_3^2)$<br>…<br>$x_m\sim N(\mu_m,\sigma_m^2)$<br>$p(x)=p(x_1;\mu_1,\sigma^2_1)p(x_2;\mu_2,\sigma^2_2)…p(x_m;\mu_m,\sigma^2_m)=\prod\limits_{j=1}^m p(x_j;\mu_j,\sigma^2_j)$  </p><ol><li>选择你认为服从正态分布的特征量$x_i$</li><li>去估算出参数</li><li>给出新的样板x，计算p(x)<br>$$p(x)=\prod\limits_{j=1}^m p(x_j;\mu_j,\sigma^2_j)=\prod\limits_{j=1}^m\frac{1}{\sqrt{2\pi}\sigma}exp(-\frac{(x-\mu)^2}{2\sigma^2})$$<br>Anomaly if p(x) &lt; $\varepsilon$  </li></ol><h4 id="开发和评估异常检测系统"><a href="#开发和评估异常检测系统" class="headerlink" title="开发和评估异常检测系统"></a>开发和评估异常检测系统</h4><p>假设我们有一个数据集：$(x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}),…,(x^{(m)},y^{(m)})$(假设是正常的样本/没有异常的样本)<br>交叉验证集:$(x_cv^{(1)},y_cv^{(1)}),…,(x_cv^{(m)},y_cv^{(m)})$<br>测试集：$(x_test^{(1)},y_test^{(1)}),…,(x_test^{(m)},y_test^{(m)})$<br>如果有10000个好的飞机引擎，有20个异常的飞机引擎<br>训练集：6000个好引擎<br>交叉验证集：2000个好引擎（y=0），10个异常引擎(y=1)<br>测试集：2000个好引擎(y=0)，10个异常引擎(y=1)<br>算法应用：</p><blockquote><p>Fit model p(x) on training set{$x^{(1)},x^{(2)},…,x^{(m)}$}<br>On a cross validation/test example x, predict<br>$y=\begin{cases}1 &amp; if&amp;p(x)&lt;\varepsilon&amp;(anomaly)\ 0 &amp; if&amp;p(x)\geq\varepsilon&amp;(nomaly)\end{cases}$<br>Possible evalution metric:<br>1 True positive, false positive, false negative, true negative<br>2 Precision/Recall<br>3 $F_1$-score<br>Can also use cross validation set to choose parameter $\varepsilon$  </p></blockquote><h4 id="异常检测-VS-监督学习"><a href="#异常检测-VS-监督学习" class="headerlink" title="异常检测 VS 监督学习"></a>异常检测 VS 监督学习</h4><ul><li>异常检测<br>如果一个遇到一个正常的样本数量很少，而异常的样本有很多的情况。 任何算法都很难从正例中学习异常现象。 未来的异常可能看起来与我们到目前为止所看到的任何异常示例都不相似。  </li><li>监督学习<br>大量的正面和负面的例子。足够的正例可以使算法理解正例，未来的正例可能与训练集中的正例相似。</li></ul><h4 id="怎样选择特征"><a href="#怎样选择特征" class="headerlink" title="怎样选择特征"></a>怎样选择特征</h4><p>如果你画出数据的直方图， 并且发现图形看起来与高斯分布相差甚远，那么就有必要进行一些不同的转换，通过这些方法让数据更接近高斯分布。</p><p>在检测异常的算法中，我们希望p(x)在正常样本时比较大，在异常样本的情况下比较小。一种常见的情况是，如果p(x)是可比较的，当正常样本和异常时p(x)的值都比较大。看看一些异常的样本会不会启发自己创造新的特征。  </p><p>选择在发生异常情况时可能具有异常大或小的值的特征。</p><h4 id="多变量高斯分布"><a href="#多变量高斯分布" class="headerlink" title="多变量高斯分布"></a>多变量高斯分布</h4><p>$x\in\mathbb{R}^n.$不要分开建立模型$p(x_1),p(x_2),…,etc.$ 要建立统一的模型。<br>参数 $\mu\in\mathbb{R}^n,\Sigma\in\mathbb{R}^{n\times n}$(协方差矩阵)<br>$$p(x;\mu,\Sigma)=\frac{1}{(2\pi)^{\frac{n}{2}}\mid\Sigma\mid^{\frac{1}{2}}}exp(-\frac{1}{2}(x-\mu)T\Sigma^{-1}(x-\mu))$$<br>参数估计：<br>给出训练集：{$x^{(1)},x^{(2)},…,x^{(m)}$}<br>$\mu=\frac{1}{m}\sum\limits_{i=1}^mx^{(i)}$<br>$\Sigma=\frac{1}{m}\sum\limits_{i=1}^m(x^{(i)}-\mu)(x^{(i)}-\mu)^T$  </p><ol><li>$p(x)$ 参数估计<br>$\mu=\frac{1}{m}\sum\limits_{i=1}^mx^{(i)}$<br>$\Sigma=\frac{1}{m}\sum\limits_{i=1}^m(x^{(i)}-\mu)(x^{(i)}-\mu)^T$  </li><li>给出一个新样本，计算<br>$$p(x;\mu,\Sigma)=\frac{1}{(2\pi)^{\frac{n}{2}}\mid\Sigma\mid^{\frac{1}{2}}}exp(-\frac{1}{2}(x-\mu)T\Sigma^{-1}(x-\mu))$$<br>标记为异常如果$p(x)&lt;\varepsilon$<br>原始的高斯模型是多元高斯模型的一种特殊情况。  </li></ol><ul><li>原始模型：手动创建特征以捕获异常，其中$x_1,x_2$采用不寻常的值组合。<br>Computaionally cheaper(alternatively,scales better to large n)<br>OK even if m (training set size) is small</li><li>多元模型：自动捕获要素之间的关联<br>Computationally more expensive<br>Must have m&gt;n, or else $\Sigma$ is non-invertible</li></ul><h3 id="推荐系统"><a href="#推荐系统" class="headerlink" title="推荐系统"></a>推荐系统</h3><h4 id="问题规划"><a href="#问题规划" class="headerlink" title="问题规划"></a>问题规划</h4><p><img src="/img/machine-learning/62.png" srcset="/img/loading.gif" alt="图62"><br>我们根据此想开发一个推荐系统<br>一个可以自动填补这些缺失值的算法，这样我们就可以看一下，该用户还有哪些电影没有看过，并推荐新电影给该用户。 </p><h4 id="基于内容的推荐算法"><a href="#基于内容的推荐算法" class="headerlink" title="基于内容的推荐算法"></a>基于内容的推荐算法</h4><p><img src="/img/machine-learning/63.png" srcset="/img/loading.gif" alt="图63"><br>For each user j, learn a parameter $\theta^{(j)}\in\mathbb{R^{n+1}}$. Predict user j as rating movie i with $(\theta^{(j)})^Tx^{(i)}$ stars. </p><p>$r(i,j)$ = 1 如果用户评价了电影i，我们就将$r(i,j)$记为1.，否则记为0.<br>$y^{(i,j)}$ = 对该电影的评价，如果评价存在的话<br>$\theta^{(j)}$ = 每个用户 $x^{(i)}$ 的一个参数。<br>$x^{(i)}$ = 特定电影的一个特征向量<br>对于每一个用户和电影，我们会预测：$(\theta^{(j)})^T(x^{(i)})$<br>$m^{(j)}$ = 评价了电影的用户数量</p><p>为了学习参数向量$\theta^{(j)}$:<br>$$\min\limits_{\theta^{(j)}}\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum^n_{k=1}(\theta_k^{(j)})^2$$<br>为了学习所有用户的$\theta^{(1)},\theta^{(2)},…,\theta^{(n_u)}$:<br>$$\min\limits_{\theta^{(j)}}\sum^{n_u}<em>{j=1}\sum</em>{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum^{n_u}<em>{j=1}\sum^n</em>{k=1}(\theta_k^{(j)})^2$$<br>下面，为了实现最小化，采用梯度下降的方法：<br>$$\theta_k^{(j)}:=\theta_k^{(j)}-\alpha\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})x_k^{(i)}\quad(for\quad k = 0)$$<br>$$\theta_k^{(j)}:=\theta_k^{(j)}-\alpha(\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})x_k^{(i)}+\lambda\theta_k^{(j)})\quad(for\quad k \neq 0)$$</p><h4 id="协同过滤"><a href="#协同过滤" class="headerlink" title="协同过滤"></a>协同过滤</h4><p>如果你有所有电影评分的集合，即 $r(i,j)$、$y^{(i,j)}$,于是根据不同电影的特征，我们可以学习不同用户的参数$\theta$<br>如果你的用户愿意为你提供这些参数，你就能估计出各种电影的特征值。<br>$\theta-x-\theta-x…$不断互相推导，互相改进，最终算法会收敛到一个合理的系统推荐模型。<br><img src="/img/machine-learning/64.png" srcset="/img/loading.gif" alt="图64">  </p><p>将这两个优化函数结合为一个函数，同时最小化 $x^{(1)},x^{(2)},…,x^{(n_m)}$ 和 $\theta^{(1)},\theta^{(2)},…,\theta^{(m)}$:<br>$$J(x^{(1)},..,x^{(n_m)},\theta^{(1)},…,\theta^{(n_u)})=\frac{1}{2}\sum\limits_{(i,j):r(i,j)=1}((\theta^{(j)})^T-y^{(i,j)})^2+\frac{\lambda}{2}\sum^{n_m}<em>{i=1}\sum^n</em>{k=1}(x_k^{(i)})^2+\frac{\lambda}{2}\sum^{n_u}<em>{j=1}\sum^n</em>{k=1}(\theta_k^{(j)})^2$$<br>$$\min\limits_{x^{(1)},x^{(2)},…,x^{(n_m)},\theta^{(1)},\theta^{(2)},…,\theta^{(m)}}J(x^{(1)},..,x^{(n_m)},\theta^{(1)},…,\theta^{(n_u)})$$<br><img src="/img/machine-learning/65.png" srcset="/img/loading.gif" alt="图65">   </p><h4 id="矢量化：低秩矩阵"><a href="#矢量化：低秩矩阵" class="headerlink" title="矢量化：低秩矩阵"></a>矢量化：低秩矩阵</h4><p>找到相关的电影：<br>对于每一个产品i，我们学习的特征向量为 $x^{(i)}\in\mathbb{R}^n$.<br>怎么样去找到与电影i相关的电影j。<br>5 个相似于电影i的电影：<br>找到5个电影，满足smllest$\parallel x^{(i)}-x^{(j)}\parallel$.  </p><h4 id="实施细节：均值归一化"><a href="#实施细节：均值归一化" class="headerlink" title="实施细节：均值归一化"></a>实施细节：均值归一化</h4><p>如果有个人从来不对电影进行评价，那就无法给他推荐相关的电影。均值归一化的想法可以让我们解决这个问题。和以前一样我们把所有的评分放在矩阵Y里，就是把所有的这些评分，全部整合到矩阵Y里，全是？的一列对应Eve没有给任何电影评分，要实现归一化，要做的就是计算，每个电影所得评分的均值，我们把它们存在一个叫$\mu$的向量中。<br><img src="/img/machine-learning/66.png" srcset="/img/loading.gif" alt="图66"><br>对于用户j，基于i预测：$(\theta^{(j)})^T(x^{(i)})+\mu_i$  </p><h3 id="大规模机器学习"><a href="#大规模机器学习" class="headerlink" title="大规模机器学习"></a>大规模机器学习</h3><h4 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降"></a>随机梯度下降</h4><p>代价函数 $cost(\theta,(x^{(i)},y^{(i)}))=\frac{1}{2}(h_\theta(x^{(i)})-y^{(i)})^2$<br>目标优化函数<br>$$J_{train}(\theta)=\frac{1}{m}\sum^m_{i=1}cost(\theta,(x^{(i)},y^{(i)}))$$</p><ol><li>将所有m个训练样本重新随机排列</li><li>Repeat{<br>  for i:=1,…,m{   <pre><code>$\theta_j:=\theta_j-\alpha(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}$  (for every j=0,...,n)  </code></pre>  }  </li></ol><p>}<br>循环1～10次就好了  </p><h4 id="Mini-Batch-梯度下降"><a href="#Mini-Batch-梯度下降" class="headerlink" title="Mini-Batch 梯度下降"></a>Mini-Batch 梯度下降</h4><p>批量梯度下降：在每次迭代中使用所有m个样本<br>随机梯度下降：每次迭代均使用1个样本<br>小批量梯度下降：在每次迭代中使用b个样本<br><img src="/img/machine-learning/67.png" srcset="/img/loading.gif" alt="图67">  </p><h4 id="随机梯度下降收敛"><a href="#随机梯度下降收敛" class="headerlink" title="随机梯度下降收敛"></a>随机梯度下降收敛</h4><blockquote><p>Batch gradient descent:<br>Plot $J_{train}(\theta)$ as a function of the number of iterations of gradient descent.<br>$J_{train}(\theta)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2$<br>Stochastic gradient descent:<br>$cost(\theta,(x^{(i)},y^{(i)}))=\frac{1}{2}(h_\theta(x^{(i)})-y^{(i)})^2$<br>During learning, compute $cost(\theta,(x^{(i)},y^{(i)}))$ before updating $\theta$ using $(x^{(i)},y^{(i)})$<br>Every 1000 iterations(say), plot $cost(\theta,(x^{(i)},y^{(i)}))$ averaged over the last 1000 examples processed by algorithm.</p></blockquote><p>比起之前的算法需要时不时地计算$J_{train}$，那样就得遍历所有的训练样本，而梯度下降法的这个步骤，只用在更新$\theta$之前计算这些cost函数，并不需要太大的计算量。我们要做就是每1000次迭代运算中，求出前1000个cost函数的平均值，然后把它画出来，通过画出来的图，我们就能检查出，随机梯度下降是否在收敛。<br><img src="/img/machine-learning/68.png" srcset="/img/loading.gif" alt="图68"><br><img src="/img/machine-learning/69.png" srcset="/img/loading.gif" alt="图69">  </p><h4 id="在线学习"><a href="#在线学习" class="headerlink" title="在线学习"></a>在线学习</h4><p>如果你有一个由不断进入网站的用户流所产生的连续的数据流，你就可以使用在线学习机制，从数据流中学习用户的偏好，然后用这些信息来优化关于网站的决策。<br>用户来到的运输服务网站，指定出发地和目的地，您提供要价的方式运输其包裹，并且用户有时选择使用您的运输服务（y = 1），有时不选择（y = 0）。<br>特征量 x 捕获用户属性，来源/目的地和要价的功能。 我们想通过学习$p(y=1|x;\theta)$以优化价格。  </p><h4 id="减少映射与数据并行"><a href="#减少映射与数据并行" class="headerlink" title="减少映射与数据并行"></a>减少映射与数据并行</h4><p>Map-reduce解决随机梯度下降解决不了的更大规模数据的问题。<br>批量梯度下降：$\theta_j:=\theta_j-\alpha\frac{1}{400}\sum\limits_{i=1}^400(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}$<br>Machine 1: Use $(x^{(1)},y^{(1)}),…,(x^{(100)},y^{(100)})$<br>Machine 2: Use $(x^{(101)},y^{(101)}),…,(x^{(200)},y^{(200)})$<br>Machine 3: Use $(x^{(201)},y^{(201)}),…,(x^{(300)},y^{(300)})$<br>Machine 4: Use $(x^{(301)},y^{(301)}),…,(x^{(400)},y^{(400)})$<br>将数据分到四台机器上使得计算速度提高了四倍。<br><img src="/img/machine-learning/70.png" srcset="/img/loading.gif" alt="图70"><br>只要你的学习算法可以表示为对训练集的求和 </p><h3 id="应用举例-照片OCR"><a href="#应用举例-照片OCR" class="headerlink" title="应用举例 照片OCR"></a>应用举例 照片OCR</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>照片OCR全称为“照片光学字符识别”，其注重让计算机读出图片中的文字信息。</p><ol><li>首先，给定某张照片，它将图像扫描一遍。</li><li>然后找出照片中的文字信息，之后它将重点关注这些文字区域，并对区域中的文字进行识别，分割成独立字符</li><li>当它正确读出这些文字后，它会将这些文字内容显示并记录下来。</li></ol><p>Photo OCR pipeline（过程流水线）<br><img src="/img/machine-learning/71.png" srcset="/img/loading.gif" alt="图71">  </p><h4 id="滑动窗口分类器"><a href="#滑动窗口分类器" class="headerlink" title="滑动窗口分类器"></a>滑动窗口分类器</h4><p>照片OCR的第一步，文字识别：  </p><ol><li>从数据集中收集一些正样本和负样本<br><img src="/img/machine-learning/72.png" srcset="/img/loading.gif" alt="图72"> </li><li>利用固定比例的窗口滑动算法，然后将发现的白色区域放大周围范围 </li><li>字符分割，使用监督学习算法，提供正样本和负样本  </li></ol><h4 id="获取大量数据和人工数据"><a href="#获取大量数据和人工数据" class="headerlink" title="获取大量数据和人工数据"></a>获取大量数据和人工数据</h4><p>人工数据合成主要有两种形式，第一种实际上是自己创造数据，即从零开始创造新数据，第二种是我们已经有了小的标签训练集，然后以某种方式扩充训练集。<br><img src="/img/machine-learning/73.png" srcset="/img/loading.gif" alt="图73"><br><img src="/img/machine-learning/74.png" srcset="/img/loading.gif" alt="图74"><br>对原数据进行扩充要有代表性。  </p><ol><li>Make sure you have a low bias classifier before expending the effort.(Plot learning curves).E.g.keep increasing the number of features/number of hidden units in neural network until you have a low bias classifier.</li><li>“How much work would it be to get 10x as much data as we currently have?” <ul><li>人工合成数据</li><li>扩充已有数据集</li><li>“crowd source”</li></ul></li></ol><h4 id="天花板分析：下一步的流程线"><a href="#天花板分析：下一步的流程线" class="headerlink" title="天花板分析：下一步的流程线"></a>天花板分析：下一步的流程线</h4><p>上限分析<br><img src="/img/machine-learning/75.png" srcset="/img/loading.gif" alt="图75"><br>哪一个模块需要花更多的时间？<br>提升哪个模块对系统性能改善最有效果？<br><img src="/img/machine-learning/76.png" srcset="/img/loading.gif" alt="图76"><br><img src="/img/machine-learning/77.png" srcset="/img/loading.gif" alt="图77">      </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>First Step ， and thank you for your teaching!!!</strong><br><img src="/img/machine-learning/78.png" srcset="/img/loading.gif" alt="图78"><br><img src="/img/machine-learning/79.png" srcset="/img/loading.gif" alt="图79">      </p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>machine-learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>吴恩达机器学习（二）</title>
    <link href="/2020/06/20/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/06/20/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>分类问题，例如<br>Email: 垃圾邮件/不是垃圾邮件<br>Online：信息是真的/信息是假的<br>Tumor：良性的/恶性的<br>$y={0,1}$<br>0:Negative Class负类/1:Positive Class正类<br><img src="/img/machine-learning/09.png" srcset="/img/loading.gif" alt="图9"><br>将分类器的输出$h_\theta(x)$阀值定位0.5<br>如果$h_\theta\geq0.5$,预测’y=1’<br>如果$h_\theta&lt;0.5$,预测‘y=0’ </p><h4 id="假设陈述"><a href="#假设陈述" class="headerlink" title="假设陈述"></a>假设陈述</h4><p>逻辑分类模型<br>我们想要$0\leq h_\theta(x) \leq 1$<br>$h_\theta(x)=g(\theta^Tx)$<br>$g(z)=\frac{1}{1+e^{-z}}$ z是实数 ，g(z)一端趋向1一端趋向0。<br>关于假设h(x)函数的解释：<br>$h_\theta(x)$= 输入x对于y=1的估计概率<br>举例：如果 $x=\begin{bmatrix}x_0 \ x_1\end{bmatrix}=\begin{bmatrix}1 \ tumorSize \end{bmatrix}$<br>$h_\theta(x)=0.7$<br>可以说明病人的肿瘤有70%的概率为恶性肿瘤。<br>当特征变量为x，变量的参数为$\theta$，可以表示‘y=1’或‘y=0’的概率为：<br>$$h_\theta(x)=P(y=1|x;\theta)$$<br>$$P(y=0|x;\theta)+P(y=1|x;\theta)=1$$<br>$$P(y=0|x;\theta)=1-P(y=1|x;\theta)$$</p><h4 id="决策界限（decision-boundary）"><a href="#决策界限（decision-boundary）" class="headerlink" title="决策界限（decision boundary）"></a>决策界限（decision boundary）</h4><p>分类函数：<br>$h_\theta(x)=g(\theta^Tx)=P(y=1|x;\theh<br>ta)$<br>$g(z)=\frac{1}{1+e^{-z}}$<br><img src="/img/machine-learning/10.png" srcset="/img/loading.gif" alt="图10"><br>$g(z)\geq0.5$ when $z \geq 0$。$h_\theta(x)=g(\theta^Tx)\geq0.5$ when $\theta^T\geq0$<br>假设：预测“y=1” 如果$h_\theta(x)\geq0.5$<br>预测“y=0” 如果$h_\theta(x)&lt;0.5$<br><img src="/img/machine-learning/11.png" srcset="/img/loading.gif" alt="图11"><br>假设$h_\theta(x)=g(\theta_0+\theta x_1+\theta x_2)$,并且已知$\theta^T=\begin{bmatrix}-3 &amp; 1 &amp; 1\end{bmatrix}$<br>可以预测”y=1”, 如果 $-3+x_1+x_2\geq0$，也就是$x_1+x_2\geq3$<br><img src="/img/machine-learning/12.png" srcset="/img/loading.gif" alt="图12"><br>$h_\theta(x)=g(\theta_0+\theta_1x_1+\theta_2x_2+\theta_3x_1^2+\theta_4x_4^2)$<br>$\theta^T=\begin{bmatrix}-1 &amp; 0 &amp; 0 &amp; 1 &amp;1\end{bmatrix}$<br>预测“y=1”，如果$-1+x_1^2+x_2^2\geq0$，可改写为$x_1^2+x_2^2\geq0$<br>一旦有了参数$\theta$，决策边界就可以确定了。</p><h4 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h4><p>训练集：{$(x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}),…,(x^{(m)},y^{(m)})$}<br>m个特征 $x\in\begin{bmatrix}x_0\x_1\…\x_n\end{bmatrix}$<br>$x_0=1,y\in{0,1}$<br>$$h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}$$<br>我们应该怎么去确定参数$\theta$呢？<br>代价函数：<br>线性回归：<br>$$J(\theta)=\frac{1}{m}\sum^m_{i=1}\frac{1}{2}(h_\theta(x^{(i)})-y^{(i)})^2$$<br>平均误差平方可以写为：<br>$$Cost(h_\theta(x^{(i)}),y^{(i)})=\frac{1}{2}(h_\theta(x^{(i)})-y^{(i)})^2$$<br>如果直接代入，画出代价函数（优化目标函数如左图，有很多局部最优，且是非凸函数）<br><img src="/img/machine-learning/13.png" srcset="/img/loading.gif" alt="图13"><br>逻辑回归代价函数<br>$$Cost(h_\theta(x),y)=\begin{cases}<br>-log(h_\theta(x)&amp;if&amp;y=1\<br>-log(1-h_\theta(x))&amp;if&amp;y=0<br>\end{cases}<br>$$<br><img src="/img/machine-learning/14.png" srcset="/img/loading.gif" alt="图14"><br>搞错的代价是巨大的<br><img src="/img/machine-learning/15.png" srcset="/img/loading.gif" alt="图15">    </p><h4 id="简化代价函数与梯度下降"><a href="#简化代价函数与梯度下降" class="headerlink" title="简化代价函数与梯度下降"></a>简化代价函数与梯度下降</h4><p>逻辑回归代价函数（优化目标函数）<br>$$J(\theta)=\frac{1}{m}\sum^m_{i=1}Cost(h_\theta(x^{(i)}),y^{(i)})$$<br>$$Cost(h_\theta(x),y)=\begin{cases}<br>-log(h_\theta(x)&amp;if&amp;y=1\<br>-log(1-h_\theta(x))&amp;if&amp;y=0<br>\end{cases}<br>$$<br>Note:y=0 or 1 always<br>简化$Cost(h_\theta(x),y)=-ylog(h_\theta(x))-(1-y)log(1-h_\theta(x))$<br>由此我们可以得到：<br>$$J(\theta)=-\frac{1}{m}[\sum^m_{i-1}y^{(i)}logh_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]$$<br>为了拟合出参数$\theta$,我们应该找出让$J(\theta)$取得最小值的参数$\theta$：<br>$\min\limits_\theta J(\theta)$<br>得到了参数，当我们输入一组新的特征去预测时<br>输出：$h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}$<br>使用梯度下降法来找出代价函数的最小值<br>$$J(\theta)=-\frac{1}{m}[\sum^m_{i-1}y^{(i)}logh_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]$$<br>想要得到$\min\limits_\theta J(\theta)$：<br>Repeat{<br>$$\theta_j:\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta)=\theta_j-\alpha\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}$$<br>(同时更新所有的$\theta_j$)<br>}<br>它与线性回归的参数求解公式一样，但是因为线性回归和逻辑回归所设定的假设函数不一样，一个是$h_\theta(x)=\theta^Tx$,一个是$h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}$.  </p><h4 id="高级优化"><a href="#高级优化" class="headerlink" title="高级优化"></a>高级优化</h4><p>优化算法<br>代价函数$J(\theta)$,想得到$\min\limits_\theta J(\theta)$<br>当我们输入参数$\theta$的时候，我们可以使用代码计算  </p><ul><li>$J(\theta)$</li><li>$\frac{\partial}{\partial\theta_j}J(\theta)\quad (for\quad j=0,1,2…,n)$<br>梯度下降：<br>Repeat {<br>$$\theta_j:\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta)$$<br>}<br><img src="/img/machine-learning/16.png" srcset="/img/loading.gif" alt="图16"><br>(共轭梯度法、BFGS、L-BFGS)<br>举例：<br>$\theta=\begin{bmatrix}\theta_1 \ \theta_2\end{bmatrix}$<br>$J(\theta)=(\theta_1-5)^2+(\theta_2-5)^2$<br>$\frac{\partial}{\partial\theta_1}J(\theta)=2(\theta_1-5)$<br>$\frac{\partial}{\partial\theta_2}J(\theta)=2(\theta_2-5)$    <pre><code class="hljs lsl">funtion[jVal,gradient]        = costFunction(theta)    jVal = (theta(<span class="hljs-number">1</span>)<span class="hljs-number">-5</span>)^<span class="hljs-number">2</span> + ...    (theta(<span class="hljs-number">2</span>)<span class="hljs-number">-5</span>)^<span class="hljs-number">2</span>;    gradient = zeros(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);    gradient(<span class="hljs-number">1</span>) = <span class="hljs-number">2</span>*(theta(<span class="hljs-number">1</span>)<span class="hljs-number">-5</span>);    gradient(<span class="hljs-number">2</span>) = <span class="hljs-number">2</span>*(theta(<span class="hljs-number">2</span>)<span class="hljs-number">-5</span>);options = optimst('GradObj', 'on','MaxIter','<span class="hljs-number">100</span>');initialTheta = zeros(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);[optTheta, functionVal, exitFlag] ...    =fminunc(@costFunction,initialTheta,options)</code></pre></li></ul><h4 id="多元算法"><a href="#多元算法" class="headerlink" title="多元算法"></a>多元算法</h4><p>多元分类问题<br>Email 标签归类：工作、朋友、家庭和爱好<br>医学诊断：没有生病、感冒、发烧<br>天气：晴朗、多云、下雨、下雪<br><img src="/img/machine-learning/17.png" srcset="/img/loading.gif" alt="图17"><br><img src="/img/machine-learning/18.png" srcset="/img/loading.gif" alt="图18"><br>训练一个逻辑回归分类器$h_\theta^{(i)}(x)$对每一个种类进行预测。<br>新输入一个x去做分类预测，取$\max\limits_ih_\theta^{(i)}(x)$即最大值，有最好分类效果的分类器。</p><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><h4 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h4><p><img src="/img/machine-learning/19.png" srcset="/img/loading.gif" alt="图19"><br>欠拟合/正常拟合与过拟合<br>如果我们具有太多的特征，则学习的假设可能非常适合训练集，但无法归纳为新的示例（在新示例上预测价格,无法泛化一般化去预测）<br><img src="/img/machine-learning/20.png" srcset="/img/loading.gif" alt="图20"><br>有两个办法防止过拟合</p><ol><li>减少特征的数量</li></ol><ul><li>人为的删除某些特征变量</li><li>模型选择算法</li></ul><ol start="2"><li>正则化</li></ol><ul><li>保留所有的特征变量，但是减少参数值的大小</li><li>这个方法非常有效，当我们有很多特征变量时，每个变量都可以对预测做出贡献  </li></ul><p><img src="/img/machine-learning/21.png" srcset="/img/loading.gif" alt="图21"><br>假设我们在函数中加入惩罚项，使得$\theta_3$,$\theta_4$非常小<br>$$\min\limits_\theta\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2$$<br>$$\min\limits_\theta\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2+1000\theta_3^2+1000\theta_4^2$$<br>要想改写后的代价函数尽可能小，那么$\theta_3$,$\theta_4$的值都要尽量接近于0。也就是说我们只需要多余项的参数足够小，这样就可以避免过拟合。现在，如果我们要最小化这个函数，那么为了最小化这个新的代价函数，我们要让参数尽可能小。因为，如果你在原有代价函数的基础上加上 1000 乘以 参数 这一项 ，那么这个新的代价函数将变得很大，所以，当我们最小化这个新的代价函数时， 我们将使 参数 的值接近于 0，就像我们忽略了参数值一样。如果我们做到这一点（ 参数 接近 0 ），那么我们将得到一个近似的多项式函数。<br>将参数的值减小，我们会得到一个更简单的假设模型，也更不容易出现过拟合的现象。<br>举例房屋问题：</p><ul><li>特征：$x_1,x_2,…,x_{100}$</li><li>参数：$\theta_0$,$\theta_1$,$\theta_2$,…,$\theta_{100}$ </li></ul><p>这里有很多特征量，并且我们一时间无法筛查出哪些是不相关的<br>$$J(\theta)=\frac{1}{2m}\sum^m_{i=1}(h(x^{(i)})-y^{(i)})^2$$<br>改写代价函数为(正则化)：<br>$$J(\theta)=\frac{1}{2m}[\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2+\lambda\sum^n_{j=1}\theta_j^2]$$<br>$\lambda$称为正则化系数，它的作用是控制两个不同目标之间的取舍。<br>在正则化中，我们选择$\theta$去缩小<br>$$J(\theta)=\frac{1}{2m}[\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2+\lambda\sum^n_{j=1}\theta_j^2]$$<br>如果$theta$被设定为一个极大的值，例如$\theta=10^{10}$,参数的值接近于0,可能出现欠拟合的现象。  </p><h4 id="线性回归的正则化"><a href="#线性回归的正则化" class="headerlink" title="线性回归的正则化"></a>线性回归的正则化</h4><p>梯度下降法：<br>Repeat<br>$$\theta_j:=\theta_j-\alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}$$<br>正则化改写成：<br>$$\theta_j:=\theta_j-\alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}+\frac{\lambda}{m}\theta_j$$<br>$$\theta_j=:\theta_j(1-\alpha\frac{\lambda}{m})-\alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}$$<br>使每次迭代，都使$\theta_j$乘以一个比1略小的数。<br>正规方程法：<br>$X=\begin{bmatrix}(x^{(1)})^T \…\ (x^{(m)})^T\end{bmatrix}$     $\quad y=\begin{bmatrix}y^{(1)} \…\ y^{(m)}\end{bmatrix}$<br>$$\theta=(X^TX)^{-1}X^Ty$$<br>正则化改写为：<br>$$(X^TX+\lambda\begin{bmatrix}0&amp;0&amp;0&amp;…&amp;0 \ 0&amp;1&amp;0&amp;…&amp;0 \ 0&amp;0&amp;1&amp;…&amp;0 \ 0&amp;0&amp;0&amp;…&amp;0 \ 0&amp;0&amp;0&amp;…&amp;1\end{bmatrix})^{-1}X^Ty$$  </p><h4 id="Logistic回归的正则化"><a href="#Logistic回归的正则化" class="headerlink" title="Logistic回归的正则化"></a>Logistic回归的正则化</h4><p>代价函数：<br>$$j(\theta)=-[\frac{1}{m}\sum_{i=1}^my^{(i)}log h_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]$$<br>正则化改写为：<br>$$j(\theta)=-[\frac{1}{m}\sum_{i=1}^my^{(i)}log h_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]+\frac{\lambda}{2m}\sum_{j=1}^n\theta_j^2$$<br>梯度下降法：<br>Repeat<br>$$\theta_j:=\theta_j-\alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}$$<br>正则化改写成：<br>$$\theta_j:=\theta_j-\alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}+\frac{\lambda}{m}\theta_j$$<br>$$\theta_j=:\theta_j(1-\alpha\frac{\lambda}{m})-\alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}$$</p><h3 id="神经网络学习"><a href="#神经网络学习" class="headerlink" title="神经网络学习"></a>神经网络学习</h3><h4 id="非线性假设"><a href="#非线性假设" class="headerlink" title="非线性假设"></a>非线性假设</h4><p>对于一般机器学习问题，特征量都会非常多。<br><img src="/img/machine-learning/22.png" srcset="/img/loading.gif" alt="图22">  </p><h4 id="神经元与大脑"><a href="#神经元与大脑" class="headerlink" title="神经元与大脑"></a>神经元与大脑</h4><p>起源：试图模仿大脑的算法。 在80年代和90年代初期被广泛使用； 在90年代后期，人气下降。<br>最近的复兴：适用于许多应用的最新技术.<br><img src="/img/machine-learning/23.png" srcset="/img/loading.gif" alt="图23"><br>模拟单个神经元<br><img src="/img/machine-learning/24.png" srcset="/img/loading.gif" alt="图24"><br>模拟神经网络<br><img src="/img/machine-learning/25.png" srcset="/img/loading.gif" alt="图25"><br>$a_i^{j}=$ “激活值” of unit i in layer j<br>$\Theta^{(j)}=$ 权重控制矩阵从第 j 层到第 j+1 层的映射<br>$$a_1^{(2)}=g(\Theta^{(1)}<em>{10}x_0+\Theta^{(1)}_{11}x_1+\Theta^{(1)}_{12}x_2+\Theta^{(1)}_{13}x_3)$$<br>$$a_2^{(2)}=g(\Theta^{(1)}</em>{20}x_0+\Theta^{(1)}<em>{21}x_1+\Theta^{(1)}_{22}x_2+\Theta^{(1)}_{23}x_3)$$<br>$$a_3^{(2)}=g(\Theta^{(1)}</em>{30}x_0+\Theta^{(1)}<em>{31}x_1+\Theta^{(1)}_{32}x_2+\Theta^{(1)}_{33}x_3)$$<br>$$h_\Theta(x)=a_1^{(3)}=g(\Theta^{(2)}_{10}a_0^{(2)}+\Theta^{(2)}_{11}a_1^{(2)}+\Theta^{(2)}_{12}a_2^{(2)}+\Theta^{(2)}_{13}a_3^{(2)})$$<br>如果神经网络在j层有$s_j$个单元，在 j+1 层有$s</em>{j+1}$个单元，因此$\Theta^{(j)}$将会是一个$s_{j+1}\times(s_j+1)维度的矩阵$。<br>将上述式子进行改写并向量化<br>$$a_1^{(2)}=g(z_1^{(2)})$$<br>$$a_2^{(2)}=g(z_2^{(2)})$$<br>$$a_3^{(2)}=g(z_3^{(2)})$$<br>$$<br>x=\begin{bmatrix}<br>x_0 \ x_1 \ x_2 \x_3<br>\end{bmatrix}<br>\quad z^{(2)}=\begin{bmatrix}<br> z_1^{(2)} \ z_2^{(2)} \ z_3^{(2)}<br>\end{bmatrix}<br>$$<br>$z^{(2)}=\Theta^{(1)}x=\Theta^{(1)}a^{(1)}$<br>$a^{(2)}=g(z^{(2)})$<br>Add $a_0^{(2)}=1$<br>$z^{(3)}=\Theta^{(2)}a^{(2)}$<br>$h_\Theta(x)=a^{(3)}=g(z^{(3)})$<br>上述称为向前传播<br><img src="/img/machine-learning/26.png" srcset="/img/loading.gif" alt="图26">  </p><h4 id="例子与直觉理解"><a href="#例子与直觉理解" class="headerlink" title="例子与直觉理解"></a>例子与直觉理解</h4><p><img src="/img/machine-learning/27.png" srcset="/img/loading.gif" alt="图27"><br>Simple example:AND<br>$x_1,x_2\in{0,1}$<br>$y=x_1\quad AND\quad x_2$<br><img src="/img/machine-learning/28.png" srcset="/img/loading.gif" alt="图28"><br><img src="/img/machine-learning/29.png" srcset="/img/loading.gif" alt="图29"><br>隐藏层可以计算一些，然后下一层计算更复杂的，层数越多，计算越复杂，最后这些特征作用于输出。  </p><h4 id="多元分类"><a href="#多元分类" class="headerlink" title="多元分类"></a>多元分类</h4><p>要在神经网络中实现多类别分类，采用的方法本质上是一种一对多法的扩展。<br><img src="/img/machine-learning/30.png" srcset="/img/loading.gif" alt="图30">   </p><h3 id="神经网络参数的反向传播算法"><a href="#神经网络参数的反向传播算法" class="headerlink" title="神经网络参数的反向传播算法"></a>神经网络参数的反向传播算法</h3><h4 id="代价函数-1"><a href="#代价函数-1" class="headerlink" title="代价函数"></a>代价函数</h4><p><img src="/img/machine-learning/31.png" srcset="/img/loading.gif" alt="图31"><br>二元分类：<br>$y=0/1$<br>1个输出结果<br>多元分类：<br>$y=\mathbb{R}^K \quad E.g.\begin{bmatrix}1 \ 0 \ 0 \ 0\end{bmatrix},\begin{bmatrix}0 \ 1 \ 0 \ 0\end{bmatrix},\begin{bmatrix}0 \ 0 \ 1 \ 0\end{bmatrix},\begin{bmatrix}0 \ 0 \ 0 \ 1\end{bmatrix}$<br>K个输出。<br>逻辑回归的代价函数<br>$$J(\theta)=-\frac{1}{m}[\sum^m_{i=1}y^{(i)}log h_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]+\frac{\lambda}{2m}\sum^n_{j=1}\theta_j^2$$<br>神经网络：<br>$h_\Theta(x)\in\mathbb{R}^K,(h_\Theta(x))<em>i=i^{th}output$<br>$$j(\Theta)=-\frac{1}{m}[\sum</em>{i=1}^m\sum^K_{k=1}y_k^{(i)}log(h_\Theta(x^{(i)}))<em>k+(1-y^{(i)}<em>k)log(1-(h_\Theta(x^{(i)}))_k)]+\frac{\lambda}{2m}\sum^{L-1}</em>{l=1}\sum^{s_l}_{i=1}\sum^{s</em>{l+1}}<em>{j=1}(\Theta^{(l)}</em>{ji})^2$$</p><h4 id="反向传播算法"><a href="#反向传播算法" class="headerlink" title="反向传播算法"></a>反向传播算法</h4><p>$$j(\Theta)=-\frac{1}{m}[\sum_{i=1}^m\sum^K_{k=1}y_k^{(i)}log(h_\Theta(x^{(i)}))<em>k+(1-y^{(i)}<em>k)log(1-(h_\Theta(x^{(i)}))_k)]+\frac{\lambda}{2m}\sum^{L-1}</em>{l=1}\sum^{s_l}_{i=1}\sum^{s</em>{l+1}}<em>{j=1}(\Theta^{(l)}</em>{ji})^2$$<br>目的是$\min_\Theta J(\Theta)$<br>我们需要计算</p><ul><li>$J(\Theta)$</li><li>$\frac{\partial}{\partial\Theta^{(l)}_{ij}}J(\Theta)$  </li></ul><p><img src="/img/machine-learning/32.png" srcset="/img/loading.gif" alt="图32"><br>给一个训练样板（x，y）：<br>按照下面的顺序进行计算：<br>$a^{(1)}=x$<br>$z{(2)}=\Theta^{(1)}a^{(1)}$<br>$a^{(2)}=g(z^{(2)})\quad (add\quad a_0^{(2)})$<br>$z^{(3)}=\Theta^{(2)}a^{(2)}$<br>$a^{(3)}=g(z^{(3)})\quad (add\quad a_0^{(3)})$<br>$z^{(4)}=\Theta^{(3)}a^{(3)}$<br>$a^{(4)}=h_\Theta(x)=g(z^{(4)})$<br>误差：$\delta^{(l)}<em>j=$ 第l层第j个节点的误差。<br>例如对于每一个输出（层数L=4）<br>$$\delta_j^{(4)}=a_j^{4}-y_j$$<br>$$\delta^{(3)}=(\Theta^{(3)})^T\delta^{(4)}.*g’(z^{(3)})$$<br>$$\delta^{(3)}=(\Theta^{(3)})^T\delta^{(4)}.*g’(z^{(3)})$$<br>推导见<br><a href="https://zhuanlan.zhihu.com/p/25609953" target="_blank" rel="noopener">神经网络反向传播算法详细推导</a><br>反向传播算法：<br>训练集${(x^{(1)},y^{(1)}),…,(x^{(m)},y^{(m)})}$<br>设$\Delta^{(l)}_{ij}=0(对于全部的l,i,j来说)$<br>For i=1 to m<br>Set $a^{(1)}=x^{(i)}$<br>Perform forward propagation to compute $a^{(l)}$ for l = 2,3,…,L.<br>Using $y^{(i)}$,compute $\delta^{(L)}=a^{(L)}-y^{(i)}$<br>Compute $\delta^{(L-1)},\delta^{(L-2)},…,\delta^{(2)}$<br>$\Delta^{(l)}</em>{ij}:=\Delta^{(l)}<em>{ij}+a_j^{(l)}\delta_i^{(l+1)}$<br>我们可以得到<br>$D</em>{ij}^{(l)}:=\frac{1}{m}\Delta^{(l)}<em>{ij}+\lambda\Theta</em>{ij}^{(l)}$ if $j\neq 0$<br>$D_{ij}^{(l)}:=\frac{1}{m}\Delta^{(l)}<em>{ij}$ if $j= 0$<br>则有：$\frac{\partial}{\partial\Theta^{(l)}</em>{ij}}J(\Theta)=D_{ij}^{(l)}$</p><h4 id="理解反向传播算法"><a href="#理解反向传播算法" class="headerlink" title="理解反向传播算法"></a>理解反向传播算法</h4><p><img src="/img/machine-learning/33.png" srcset="/img/loading.gif" alt="图33"><br>反向传播算法做了什么工作？<br>$$j(\Theta)=-\frac{1}{m}[\sum_{i=1}^m\sum^K_{k=1}y_k^{(i)}log(h_\Theta(x^{(i)}))<em>k+(1-y^{(i)}<em>k)log(1-(h_\Theta(x^{(i)}))_k)]+\frac{\lambda}{2m}\sum^{L-1}</em>{l=1}\sum^{s_l}_{i=1}\sum^{s</em>{l+1}}<em>{j=1}(\Theta^{(l)}</em>{ji})^2$$<br>Focusing on a single example $x^{(i)},y^{(i)},$ the case of 1 output unit, and ignoring regularization ($\lambda=0$),<br>$$cost(i)\approx y^{(i)}logh_\Theta(x^{(i)})+(1-y^{(i)})logh_\Theta(x^{(i)})$$<br>(Think of $cost(i)\approx(h_\Theta(x^{(i)})-y^{(i)})^2$)<br>l.e. how well is the network doing on example i?<br>$\delta_j^{(l)}$=”error” of cost for $a_j^{(l)}$(unit j in layer l)<br>$\delta_j^{(l)}=\frac{\partial}{\partial z_j^{(l)}}$ for $j \geq 0$, where<br>$$cost(i)= y^{(i)}logh_\Theta(x^{(i)})+(1-y^{(i)})logh_\Theta(x^{(i)})$$  </p><h4 id="梯度检测"><a href="#梯度检测" class="headerlink" title="梯度检测"></a>梯度检测</h4><p>参数向量 $\theta$ (e.g. $\theta$ is “unrolled” version of $\Theta^{(1)},\Theta^{(2)},\Theta^{(3)}$)<br>$\theta=\theta_1,\theta_2,\theta_3…,\theta_n$<br>$\frac{\partial}{\partial\theta_1}J(\theta)\approx\frac{J(\theta_1+\epsilon,\theta_2,\theta_3,..,\theta_n)-J(\theta_1-\epsilon,\theta_2,\theta_3,..,\theta_n)}{2\epsilon}$<br>$\frac{\partial}{\partial\theta_2}J(\theta)\approx\frac{J(\theta_1,\theta_2+\epsilon,\theta_3,..,\theta_n)-J(\theta_1,\theta_2-\epsilon,\theta_3,..,\theta_n)}{2\epsilon}$<br>…<br>$\frac{\partial}{\partial\theta_n}J(\theta)\approx\frac{J(\theta_1,\theta_2,\theta_3,..,\theta_n+\epsilon)-J(\theta_1,\theta_2,\theta_3,..,\theta_n-\epsilon)}{2\epsilon}$<br>检查这种方法计算出来的 GradApprox$\approx$DVec,即可证明我们计算的导数是正确的。  </p><h4 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h4><p>对于梯度下降法，我们需要对变量$\Theta$给予初始值，如果全部给0的话，在每次迭代之后，权重的大小不会改变，函数式子也会相等，这个神经网络所有的隐藏单元都在计算相同的特征，计算不出什么有趣的东西。<br>解决办法：<br>Initialize each $\Theta^{(l)}_{ij}$ to a random value in $[-\epsilon,\epsilon]$</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>选择一个网络架构（神经元之间的连接模式）<br><img src="/img/machine-learning/34.png" srcset="/img/loading.gif" alt="图34"><br>No.of input units : Dimension of features $x^{(i)}$<br>No.of output units: Number of classes<br>Reasonable defalt: 1 hidden layer, or if &gt;1 hidden layer, have same no.of hidden units in every layer(usually the more the better)<br>训练一个神经网络：  </p><ol><li>Randomly initial weights</li><li>Implement foeward propagation to get $h_\theta(x^{(i)})$ for any $x^{(i)}$</li><li>Implement code to compute cost funtion $J(\Theta)$</li><li>Implement backprop to compute partial derivatives $\frac{\partial}{\partial\Theta_{jk}^{(l)}}J(\Theta)$</li><li>Use gradient checking to compare $\frac{\partial}{\partial\Theta_{jk}^{(l)}}J(\Theta)$ computed using backpropagation vs. using numerical estimate of gradient of $J(\Theta)$.<br>Then disable gradient checking code.  </li><li>Use gradient descent or advanced optimization method with backpropagation ti try minimize $J(\Theta)$ as a function of parameters.  </li></ol><h4 id="无人驾驶"><a href="#无人驾驶" class="headerlink" title="无人驾驶"></a>无人驾驶</h4><p>神经网络应用的一个实例    </p><h3 id="应用机器学习的建议"><a href="#应用机器学习的建议" class="headerlink" title="应用机器学习的建议"></a>应用机器学习的建议</h3><p>当要选择或者优化一个机器学习算法的时候，大多数人可能会凭感觉去选择：</p><ul><li>获取更多训练数据</li><li>试试更少的特征量</li><li>试试更多的特征</li><li>增加多项式</li><li>试试增加$\lambda$的值</li><li>试试减少$\lambda$的值<br>盲目选择可能会浪费时间。</li></ul><p>机器学习诊断法：<br>诊断法：您可以运行该测试来了解学习算法在哪些方面有效，哪些无效，以及如何最好地提高其性能的指导。  </p><h4 id="评估假设"><a href="#评估假设" class="headerlink" title="评估假设"></a>评估假设</h4><p>判断假设函数是否过拟合  </p><ol><li>特征量小的时候，画出函数图像  </li><li>将数据按照7：3的比例分割成训练集和测试集（乱序）<ul><li>Learn parameter $\theta$ from training data</li><li>Compute test set error</li></ul></li></ol><h4 id="模型选择和训练、验证、测试集"><a href="#模型选择和训练、验证、测试集" class="headerlink" title="模型选择和训练、验证、测试集"></a>模型选择和训练、验证、测试集</h4><p>模型选择  </p><ol><li>$h_\theta(x)=\theta_0+\theta_1x$</li><li>$h_\theta(x)=\theta_0+\theta_1x+\theta_2x^2$</li><li>$h_\theta(x)=\theta_0+\theta_1x+…+\theta_3x^3$<br>.<br>.   </li><li>$h_\theta(x)=\theta_0+\theta_1x+…+\theta_{10}x^{10}$</li></ol><p>拟合这个模型并且估计，这个拟合好的模型假设对新样本的泛化能力。<br>就是取每一个假设和它相应的参数，然后计算出它在测试集中的性能。接下来，为了从这些模型中选出最好的一个，应该看哪个模型有最小的测试误差，但是这样仍然不能公正的评估假设函数的泛化能力，原因在于，我们拟合了一个额外的参数d，也就是多项式的次数，我们用测试集拟合了参数d，我们选择了一个最好地拟合测试集的参数d的值。因此，我们的参数向量在测试集上的性能很可能是对泛化误差过于乐观的估计。（<strong>对测试集的效果好，并不一定对新样本的效果好，并不能证明其泛化能力强弱</strong>）<br>更好的方法：将数据集分成三部分，训练集、交叉验证cv（验证集）和测试集，其比例为6：2：2 。然后我们就可以定义：<br>训练误差（Training error）：<br>$$J_{train}(\theta)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2$$<br>交叉验证误差（Cross Validation error）:<br>$$J_{cv}(\theta)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x_{cv}^{(i)})-y^{(i)}<em>{cv})^2$$<br>测试误差（Test error）:<br>$$J</em>{test}(\theta)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x_{test}^{(i)})-y^{(i)}_{test})^2$$<br>计算出各个假设函数的最小代价函数所对应的参数值，使用交叉验证集来选择出最合适的假设，最后可用测试集来估计假设函数的泛化误差。</p><h4 id="诊断偏差和方差"><a href="#诊断偏差和方差" class="headerlink" title="诊断偏差和方差"></a>诊断偏差和方差</h4><p>假设你的学习算法表现不好（$J_{cv}(\theta)$ or $J_{test}(\theta)$的值偏大）。这是偏差问题还是方差问题呢？<br><img src="/img/machine-learning/35.png" srcset="/img/loading.gif" alt="图35"><br>Bias高偏差（欠拟合）：  训练集和交叉验证误差都比较大<br>Variance高方差（过拟合）: 训练集误差会小，交叉验证集误差远远大于训练集误差。<br>正则化线性回归<br>模型：<br>$$h_\theta(x)=\theta_0+\theta_1x+\theta_2x^2+\theta_3x^3+\theta_4x^4$$<br>$$J(\theta)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2+\frac{\lambda}{2m}\sum^m_{(j=1)}\theta_j^2$$<br><img src="/img/machine-learning/36.png" srcset="/img/loading.gif" alt="图36"><br>选择正则化参数$\lambda$<br>模型：<br>$$h_\theta(x)=\theta_0+\theta_1x+\theta_2x^2+\theta_3x^3+\theta_4x^4$$<br>$$J(\theta)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2+\frac{\lambda}{2m}\sum^m_{(j=1)}\theta_j^2$$</p><ol><li>Try $\lambda=0$</li><li>Try $\lambda=0.01$</li><li>Try $\lambda=0.02$</li><li>Try $\lambda=0.04$</li><li>Try $\lambda=00.08$<br>…</li><li>Try $\lambda=10$</li></ol><p>然后选择有最小交叉验证误差的参数$\lambda$<br><img src="/img/machine-learning/37.png" srcset="/img/loading.gif" alt="图37">  </p><h4 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h4><p>绘制学习曲线非常有用，也许想检查你的学习算法运行是否一切正常，或者你希望改进算法的表现。<br>训练误差（Training error）：<br>$$J_{train}(\theta)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2$$<br>交叉验证误差（Cross Validation error）:<br>$$J_{cv}(\theta)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x_{cv}^{(i)})-y^{(i)}_{cv})^2$$<br>将它们绘制成m相关的函数，10个、20个、30个样本…m个样本。<br><img src="/img/machine-learning/38.png" srcset="/img/loading.gif" alt="图38"><br>当m很小时，对每一个训练样本都能很容易地拟合到很好，所以训练误差将会很小，反过来，当m的值逐渐增大，那么想对每一个训练样本都拟合到很好，就显得愈发困难了。训练集的误差就会越来越大。<br>交叉验证误差就是在没有见过的交叉验证集上的误差。当训练集很小的时候，泛化程度不会很好，意思就是不能很好的适应新样本，因此这个假设就不是一个理想的假设。只有当使用一个足够大的训练集时，才有可能得到一个能够更好拟合数据的假设。 </p><p><img src="/img/machine-learning/39.png" srcset="/img/loading.gif" alt="图39"><br>高偏差可以由很高的交叉验证误差和训练误差反映出来。<br>如果学习算法正处于高偏差的情形，那么选用更多的训练集数据对于改善算法无益。<br><img src="/img/machine-learning/40.png" srcset="/img/loading.gif" alt="图40"><br>在高方差的假设函数中，使用更多的训练集数据，对改进算法是有帮助的。  </p><ul><li>获取更多的训练集数据（改善高方差的问题）</li><li>使用更少的特征（对高方差时有效）</li><li>使用更多的特征（对高偏差时有效）</li><li>增加多项式的特征（修正高偏差）</li><li>增加$\lambda$（修正高偏差）</li><li>减小$\lambda$ (修正高方差)</li></ul><h3 id="机器学习系统设计"><a href="#机器学习系统设计" class="headerlink" title="机器学习系统设计"></a>机器学习系统设计</h3><h4 id="确定执行的优先级"><a href="#确定执行的优先级" class="headerlink" title="确定执行的优先级"></a>确定执行的优先级</h4><p>在改进一个算法的时候，有很多的思路，要确定执行改进的顺序。</p><h4 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h4><p>推荐路线：</p><ul><li>从可以快速实现的简单算法开始。 实施它并在您的交叉验证数据上对其进行测试。</li><li>绘制学习曲线，以确定是否有可能提供更多数据，更多功能等。</li><li>错误分析：手动检查算法在其上出错的示例（在交叉验证集中）。 看看您在任何类型的示例上是否发现任何系统趋势，都会使错误发生。</li></ul><p>举例：<br>Error Analysis<br>$m_{cv}=500$ 交叉验证集中有500个样本<br>算法错误分类了100封电子邮件<br>手动检查100个错误，并根据以下错误将其分类:<br>(i) 什么类型的邮件<br>(ii) 你认为什么样的特征可以帮助它们被正确分类<br>帮助分类的特征可能有：错误的拼写、奇怪的邮件来源以及垃圾邮件特有的标点符号使用。<br>数值评估的重要性<br>discount/discounts/discounted/discounting应被视为同一个词吗？<br>可以使用“阻止”软件（例如“ Porter stemmer”）<br>错误分析可能无法帮助您确定这是否可能提高性能。 唯一的解决方案是尝试一下，看看它是否有效。<br>需要对有无词干的算法性能进行数值评估（例如，交叉验证误差）。<br>Without stemming:5% error/With stemming:3% error<br>大小写：Mom vd mom<br>多去想和尝试。</p><h4 id="不对称性分类的误差评估"><a href="#不对称性分类的误差评估" class="headerlink" title="不对称性分类的误差评估"></a>不对称性分类的误差评估</h4><p>在一个样本中，一个类的数据与另一个类的数据相比多很多。如果你有一个偏斜类，用分类精确度并不能很好地衡量算法，因为你可能获得一个很高的精确度和非常低的误差，但我们不知道它是否是一个好的模型。<br>假设让我们判断病人是否患了癌症。<br><img src="/img/machine-learning/41.png" srcset="/img/loading.gif" alt="图41"><br><em>查准率</em><br>（在我们预测$y=1$的所有患者中，实际上有多少癌症？）<br>$$\frac{True\quad Positives}{Predicted\quad Positive}=\frac{True\quad Positive}{True \quad Positive+False\quad Positive}$$<br><em>召回率</em><br>（在所有实际患有癌症的患者中，我们正确地检测出癌症的比例是多少？）<br>$$\frac{True\quad Positive}{Actull\quad Positive}=\frac{True\quad Positive}{True\quad Positive+False \quad Negative}$$  </p><h4 id="精确度和召回率的权衡"><a href="#精确度和召回率的权衡" class="headerlink" title="精确度和召回率的权衡"></a>精确度和召回率的权衡</h4><p>Logistic 回归：$0\leq h_\theta(x)\leq1$<br>Predict 1 if $h_\theta(x)\geq0.5$<br>Predict 0 if $h_\theta(x)&lt; 0.5$<br>假设我们想要预测$y=1$(Cancer) 只有在非常确定的情况下,将0.5修改为0.7,甚至是0.9 。这样会有较高的查准率，较低的召回率。<br>假设我们想避免太多癌症的确诊（避免误诊）。这样会有高的召回率，低的查准率。<br><img src="/img/machine-learning/42.png" srcset="/img/loading.gif" alt="图42"><br>$Average:\frac{P+R}{2}$不可以评估算法的好坏。<br>$F_1Score:2\frac{PR}{P+R}$(F值)  </p><h4 id="机器学习数据"><a href="#机器学习数据" class="headerlink" title="机器学习数据"></a>机器学习数据</h4><p>大数据基础<br>使用具有很多参数的学习算法（例如具有许多特征的逻辑回归/线性回归;具有许多隐藏单元的神经网络）。</p><p>使用大型训练集（不可能过度拟合的情况下）训练出很多参数的假设函数，这可以得到一个高性能的函数。  </p><h3 id="支持向量机（SVM）"><a href="#支持向量机（SVM）" class="headerlink" title="支持向量机（SVM）"></a>支持向量机（SVM）</h3><h4 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h4><p>修改 Logistic 回归<br>$h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}$<br><img src="/img/machine-learning/43.png" srcset="/img/loading.gif" alt="图43"><br>If $y=1$, we want $h_\theta(x)\approx1, \theta^Tx\gg0$<br>If $y=0$, we want $h_\theta(x)\approx1, \theta^Tx\ll0$<br>每个单独的样本对总代价函数的贡献：<br>$$-(ylogh_\theta(x)+(1-y)log(1-h_\theta(x)))=$$<br>$$-ylog\frac{1}{1+e^{-\theta^Tx}}-(1-y)log(1-\frac{1}{1+e^{-\theta^Tx}})$$<br><img src="/img/machine-learning/44.png" srcset="/img/loading.gif" alt="图44"><br>逻辑回归的代价函数：<br>$$\min\limits_\theta\frac{1}{m}[\sum_{i=1}^my^{(i)}(-logh_\theta(x^{(i)}))+(1-y^{(i)})((-log(1-h_\theta(x^{(i)})))]+\frac{\lambda}{2m}\sum_{j=1}^n\theta_j^2$$<br>支持向量机：<br>$$\min\limits_\theta C\sum^m_{i=1}[y^{(i)}cost_1(\theta^Tx^{(i)})+(1-y^{(i)}cost_0(\theta^Tx^{(i)})]+\frac{1}{2}\sum^n_{j=1}\theta^2_j$$<br>$$h_\theta(x)=\begin{cases}1&amp;if&amp;\theta^Tx\geq0\0 &amp;otherwise\end{cases}$$</p><h4 id="直观上对大间隔的理解"><a href="#直观上对大间隔的理解" class="headerlink" title="直观上对大间隔的理解"></a>直观上对大间隔的理解</h4><p><img src="/img/machine-learning/45.png" srcset="/img/loading.gif" alt="图45"><br>分类器分割的距离称为支持向量机的间距，这使得支持向量机具有鲁棒性。因为它在分离数据时，会尽量用大的间距去分离。因此支持向量机有时会被称为大间距分离器。<br><img src="/img/machine-learning/46.png" srcset="/img/loading.gif" alt="图46"><br>当正则化系数C特别大的时候，分类会变得很敏感。  </p><h4 id="大间隔分类器的数学原理"><a href="#大间隔分类器的数学原理" class="headerlink" title="大间隔分类器的数学原理"></a>大间隔分类器的数学原理</h4><p>SVM决策边界<br>$\min\limits_\theta\frac{1}{2}\sum^n_{j=1}\theta^2_j=\frac{1}{2}(\theta_1^2+\theta_2^2)=\frac{1}{2}(\sqrt{\theta_1^2+\theta_2^2})=\frac{1}{2}\parallel\theta\parallel^2$<br>s.t.<br>$$\theta^Tx^{(i)}\geq1 \quad if \quad y^{(i)}=1$$<br>$$\theta^Tx^{(i)}\leq-1 \quad if \quad y^{(i)}=0$$<br>假设$\theta_0=0,n=2$<br><img src="/img/machine-learning/47.png" srcset="/img/loading.gif" alt="图47"><br>$\min\limits_\theta\frac{1}{2}\sum\limits^n_{j=1}\theta^2_j=\frac{1}{2}\parallel\theta\parallel^2$<br>s.t.<br>$$p^{(i)} \cdot \parallel\theta\parallel\geq1\quad if \quad y^{(i)}=1$$<br>$$p^{(i)} \cdot \parallel\theta\parallel\leq-1\quad if \quad y^{(i)}=1$$ </p><h4 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h4><p>预测$y=1$ if $\theta_0+\theta_1x_1+\theta_2x_2+\theta_3x_1x_2+\theta_4x_1^2+\theta_5x_2^2+…\geq0$<br><img src="/img/machine-learning/48.png" srcset="/img/loading.gif" alt="图48"><br>给出x，计算像素上新的特征点。给定一个实例x，让我将第一个特征$f_1$定义为一种相似度的度量，即度量训练样本x与第一个标记的相似度。<br>$f_1=similarity(x,l^{(1)})=exp(-\frac{\parallel x-l^{(1)}\parallel^2}{2\sigma^2})$<br>该函数称为高斯核函数（相似度函数）。<br>核函数和相似度：<br>$f_1=similarity(x,l^{(1)})=exp(-\frac{\parallel x-l^{(1)}\parallel^2}{2\sigma^2})$<br>如果$x\approx l^{(1)}$:<br>$$f_1\approx exp(-\frac{0^2}{2\sigma^2})\approx 1$$<br>如果$x$ 远离$l^{(1)}$<br>$$f_1\approx exp(-\frac{(large \quad number)^2}{2\sigma^2})\approx 0$$<br><img src="/img/machine-learning/49.png" srcset="/img/loading.gif" alt="图49"><br><img src="/img/machine-learning/50.png" srcset="/img/loading.gif" alt="图50">  </p><p>预测$y=1$ 当$\theta_0+\theta_1f_1+\theta_2f_2+\theta_3f_3\geq0$<br>我们应该怎么得到$l^{(1)},l^{(2)},l^{(3)}…?$<br>SVM with kernels<br>给出$(x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}),…,(x^{(m)},y^{(m)})$<br>选择$l^{(1)}=x^{(1)},l^{(2)}=x^{(2)},…,l^{(m)}=x^{(m)}$<br>给出一个样本x：<br>$f_1=similarity(x,l^{(1)})$<br>$f_2=similarity(x,l^{(2)})$<br>…<br>看样本到各特征点的距离，距离近相似度高核函数数值大，距离远相似度低核函数数值小。<br>假设函数：给出x，计算特征量$f\in\mathbb{R}^{m+1}$<br>预测“y=1”，如果$\theta^Tf\geq0$<br>训练：<br>$$\min\limits_\theta C\sum^m_{i=1}[y^{(i)}cost_1(\theta^Tf^{(i)})+(1-y^{(i)}cost_0(\theta^Tf^{(i)})]+\frac{1}{2}\sum^n_{j=1}\theta^2_j$$<br>SVM参数<br>$C(=\frac{1}{\lambda})$ .<br>Large C:低偏差，高方差。<br>Small C：高偏差，低方差。<br>$\sigma^2$<br>Large $\sigma^2$: 特征量$f_i$变化不多，高偏差，低方差。<br>Small$\sigma^2$: 特征量变化剧烈，低偏差，高方差。  </p><h4 id="使用SVM"><a href="#使用SVM" class="headerlink" title="使用SVM"></a>使用SVM</h4><p>使用SVM软件库（例如liblinear,libsvm,..）去解出参数$\theta$，但我们需要去选择参数C和核函数。<br>当我们选择高斯核函数的时候<br>$$f_1= exp(-\frac{(large \quad number)^2}{2\sigma^2})$$<br>需要选择参数$\sigma^2$， 并且注意将特征量归一化，缩放数值比例。</p><blockquote><p>n=number of features($x\in\mathbb{R}^{n+1}$),m=number of training examples.<br>If n is large(relative to m):<br>Use logistic regression, or SVM without a kernel(“linear kernel”)<br>If n is small, m is intermediate:<br>Use SVM with Gaussian kernel<br>If n is small,m is large:<br>Create/add more features, then use logistic regression or SVM without a kernel.  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>machine-learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>吴恩达机器学习（一）</title>
    <link href="/2020/06/10/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/06/10/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="1-欢迎"><a href="#1-欢迎" class="headerlink" title="1 欢迎"></a>1 欢迎</h3><h4 id="1-1-什么是机器学习"><a href="#1-1-什么是机器学习" class="headerlink" title="1.1 什么是机器学习"></a>1.1 什么是机器学习</h4><p> A computer program is said to learn from experience E with respect  to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.<br>Supervised learning 监督学习<br>监督学习是指我们给算法一个数据集，其中包含了正确的答案（回归问题、分类问题 ）<br>Unsupervisef learning  无监督学习<br>聚类算法：探究数据集中的数据结构，数据是没有什么标签的，将数据进行归类<br>强化学习：是指智能系统在与环境的连续互动中学习最优行为测略的机器学习问题，本质是学习最优打序管决策<br><img src="/img/machine-learning/01.png" srcset="/img/loading.gif" alt="图1">  </p><h3 id="2-单变量线性回归"><a href="#2-单变量线性回归" class="headerlink" title="2 单变量线性回归"></a>2 单变量线性回归</h3><h4 id="2-1-代价函数"><a href="#2-1-代价函数" class="headerlink" title="2.1 代价函数"></a>2.1 代价函数</h4><p>$$h_\theta(x)=\theta_0+\theta_1x$$<br>把$\theta$称为模型参数 Parameter<br>假设函数不同，参数也不同<br>在线性回归中，训练集给出一些点，我们要选择最能拟合的假设函数，合理预测y值<br>$$\sum^m_{i=1}(h_\theta(x^{(i)-y^{(i)}}))^2$$<br>预测值和实际值的差的平方误差和或者说预测价格与实际卖出价格的差的平方。m是训练集的容量。<br>代价函数也称平均误差函数，可写作<br>$$J(\theta_0,\theta_1)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)-y^{(i)}}))^2$$<br>我们要做的是关于$\theta_0$和$\theta_1$对函数$J(\theta_0,\theta_1)$求最小值。<br>Hypothesis: $h_\theta(x)=\theta_0+\theta_1x$<br>Parameters: $\theta_0,\theta_1$<br>Cost Function: $J(\theta_0,\theta_1)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2$<br>Goal: $minimize_{\theta_0,\theta_1} J(\theta_0,\theta_1)$<br>代价函数=优化目标<br><img src="/img/machine-learning/02.png" srcset="/img/loading.gif" alt="图2"><br><img src="/img/machine-learning/03.png" srcset="/img/loading.gif" alt="图3">   </p><h4 id="2-2-梯度下降"><a href="#2-2-梯度下降" class="headerlink" title="2.2 梯度下降"></a>2.2 梯度下降</h4><p>用梯度下降算法最小化任意函数J<br>Have some function $J(\theta_0,\theta_1)$<br>Want $min{J(\theta_0,\theta_1})$<br><strong>Outline:</strong></p><ul><li>Start with some $\theta_0,\theta_1$</li><li>Keep changing $\theta_0,\theta_1$ to reduce $J(\theta_0,\theta_1)$ until we hopefully end up at a minimum</li></ul><p><img src="/img/machine-learning/04.png" srcset="/img/loading.gif" alt="图4"><br>$\theta_0$和$\theta_1$在水平轴上，函数J在垂直坐标轴上，图形表面高度则是J的值。我们从$\theta_0$和$\theta_1$的某个值出发，对其两个赋初值，从这个函数表面的某个点出发。<br>Gradient descent algorithm<br>repeat until convergence{<br>$$\theta_j:=\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)\quad(for\quad j=0 \quad and \quad j=1)$$<br>}  </p><hr><p>Corret: Simultaneous update<br>$temp0:=\theta_0-\alpha\frac{\partial}{\partial\theta_0}J(\theta_0,\theta_1)$<br>$temp1:=\theta_1-\alpha\frac{\partial}{\partial\theta_1}J(\theta_0,\theta_1)$<br>$\theta_0:=temp0$<br>$\theta_1:=temp1$<br>用“:=”表示赋值，是一个赋值运算符，这里的$\alpha$是一个被称为学习率的数字，用来控制，梯度下降时，我们迈出多大的步子。<br>我们要同时更新$\theta_0,\theta_1$，同步更新<br>导数项代表该点的斜率<br><img src="/img/machine-learning/05.png" srcset="/img/loading.gif" alt="图5"><br>$\theta_1:=\theta_1\alpha\frac{\partial}{\partial\theta_1}J(\theta_1)$<br>If $\alpha$ is too small,gradient descent can be slow.<br>If $\alpha$ is too large,gradient descent can overshoot the minimum. It may fail to converge, or even diverge.</p><h4 id="2-3-线性回归的梯度下降"><a href="#2-3-线性回归的梯度下降" class="headerlink" title="2.3 线性回归的梯度下降"></a>2.3 线性回归的梯度下降</h4><p>将梯度函数和代价函数结合得到线性回归的算法<br>Gradient descent algorithm<br>repeat until convergence{<br>$$\theta_j:=\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)\quad(for\quad j=0 \quad and \quad j=1)$$<br>}<br>Linear Regression Model<br>Hypothesis:<br>$$h_\theta(x)=\theta_0+\theta_1x$$<br>Cost Function:<br>$$J(\theta_0,\theta_1)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2$$<br>关键问题在导数项：<br>$$\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1) = \frac{\partial}{\partial\theta_j}\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)-y^{(i)}}))^2=\frac{\partial}{\partial\theta_j}\frac{1}{2m}\sum^m_{i=1}(\theta_0+\theta_1x^{i}-y^{i})^2$$<br>$$j=0 : \frac{\partial}{\partial\theta_0}J(\theta_0,\theta_1)=\frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})$$<br>$$j=1 : \frac{\partial}{\partial\theta_1}J(\theta_0,\theta_1)=\frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x^{(i)}$$<br>不断重复同步更新：<br>repeat until convergence<br>$$\theta_0:=\theta_0-\alpha\frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})$$<br>$$\theta_1=\frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x^{(i)}$$<br>我们学习出的算法叫做：Batch梯度下降法 </p><h3 id="3-线性代数回顾"><a href="#3-线性代数回顾" class="headerlink" title="3 线性代数回顾"></a>3 线性代数回顾</h3><h4 id="3-1-矩阵和向量"><a href="#3-1-矩阵和向量" class="headerlink" title="3.1 矩阵和向量"></a>3.1 矩阵和向量</h4><p>矩阵：由数字组成的阵列，并写在方括号里<br>矩阵的维数应该写作：行<em>列<br>向量：n</em>1行的矩阵，有n个元素，R^n<br>一般用大写字母表示矩阵  </p><h4 id="3-2-加法和标量乘法"><a href="#3-2-加法和标量乘法" class="headerlink" title="3.2 加法和标量乘法"></a>3.2 加法和标量乘法</h4><p>加法：<br>$$\begin{bmatrix} 1 &amp; 0 \ 2 &amp; 5 \ 3 &amp; 1\end{bmatrix}+\begin{bmatrix} 4 &amp; 0.5 \ 2 &amp; 5 \ 0 &amp; 1\end{bmatrix}=\begin{bmatrix} 5 &amp; 0.5 \ 4 &amp; 10 \ 3 &amp; 2\end{bmatrix}$$<br>这两个矩阵的每一个元素都逐个相加<br>标量乘法：<br>将标量与矩阵中每一个元素相乘 </p><h4 id="3-3-矩阵向量乘法"><a href="#3-3-矩阵向量乘法" class="headerlink" title="3.3 矩阵向量乘法"></a>3.3 矩阵向量乘法</h4><p>一个矩阵与向量相乘<br>m*n矩阵乘n*1向量 等于m*1向量<br>To get $y_i$,multiply A’s $i^{th}$ row with elements of vector x, and add them up.</p><h4 id="3-4-矩阵乘法"><a href="#3-4-矩阵乘法" class="headerlink" title="3.4 矩阵乘法"></a>3.4 矩阵乘法</h4><p>能够相乘的矩阵，需要满足矩阵的维度相互匹配<br><img src="/img/machine-learning/06.png" srcset="/img/loading.gif" alt="图6">  </p><h4 id="3-5-矩阵乘法的特征"><a href="#3-5-矩阵乘法的特征" class="headerlink" title="3.5 矩阵乘法的特征"></a>3.5 矩阵乘法的特征</h4><p>标量的运算，乘法可以满足交换律，但是这个不能应用在矩阵运算中<br>矩阵运算满足结合律<br>特征矩阵：Identity Matrix<br>$$\begin{bmatrix} 1 &amp; 0 &amp; 0\ 0 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp;1\end{bmatrix}$$<br>对角线上都是1,其他位置都是0,对于任何矩阵A<br>$$A\cdot I = I \cdot A = A$$</p><h4 id="3-6-逆和转置"><a href="#3-6-逆和转置" class="headerlink" title="3.6 逆和转置"></a>3.6 逆和转置</h4><p>如果A矩阵是一个m$\times$m的矩阵(square)，而且它存在一个逆矩阵，<br>$$AA^{-1}=A^{-1}A=I$$<br>$$\begin{bmatrix} 3 &amp; 4 \ 2 &amp; 16 \end{bmatrix}\begin{bmatrix} 0.4 &amp; -0.1 \ -0.05 &amp; 0.075 \end{bmatrix} = \begin{bmatrix} 1 &amp; 0 \ 0 &amp; 1 \end{bmatrix} = I_{2\times 2}$$<br>不存在逆矩阵的矩阵称作奇异矩阵  其值无限接近0<br>转置矩阵：<br>$$A=\begin{bmatrix} 1 &amp; 2 &amp; 0 \ 3 &amp; 5 &amp; 9\end{bmatrix}$$<br>$$A^T=\begin{bmatrix} 1 &amp; 3 \ 2 &amp; 5 \ 0 &amp; 9 \end{bmatrix}$$</p><h3 id="4-多变量线性回归"><a href="#4-多变量线性回归" class="headerlink" title="4 多变量线性回归"></a>4 多变量线性回归</h3><h4 id="4-1-多功能"><a href="#4-1-多功能" class="headerlink" title="4.1 多功能"></a>4.1 多功能</h4><p>n = number of features<br>$x^{(i)}$ = input(features) of i^{th} training example<br>$x^{(i)}_j$ =value of feature j in i^{th} training example  </p><p>假设函数：<br>$$h_\theta(x)=\theta_0+\theta_1x_1+\theta_2x_2+…+\theta_nx_n$$<br>为了方便，定义 $x_0=1$<br>$$h_\theta(x)=\theta_0x_0+\theta_1x_1+\theta_2x_2+…+\theta_nx_n$$</p><h4 id="4-2-多元梯度下降法"><a href="#4-2-多元梯度下降法" class="headerlink" title="4.2 多元梯度下降法"></a>4.2 多元梯度下降法</h4><p>假设函数：$h_\theta(x)=\theta^Tx\theta_0x_0+\theta_1x_1+\theta_2x_2+…+\theta_nx_n$<br>参数： $\theta_0,\theta_1,…,\theta_n$<br>代价函数：$J(\theta_0,\theta_1,…,\theta_n)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2$<br>梯度下降：<br>Repeat<br>$$\theta_j:=\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta_0,…,\theta_n)$$<br>simultaneously update for every j = 0,…,n<br>New algorithm(n&gt;=1);<br>Repeat<br>$$\theta_j:=\theta_j-\alpha\frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x^{(i)}$$<br>同时更新$\theta_j$, j=1,2,…,n<br>函数的特征需要保证相似的大小<br><strong>Mean normalizaton</strong><br>Replace $x_i$ with $x_i-\mu_i(平均值)$ to make features have approximately zero mean  (Do not apply to $x_0=1$)<br>例如$x_1$的范围是$0&lt;x_1\leq2000$, $x2$的范围是$0&lt;x_2\leq5$<br>特征缩放<br>$x_1=\frac{size-1000}{2000}$<br>$x_2=\frac{bedrooms-2}{5}$<br>$$-0.5\leq x_1\leq0.5, -0.5 \leq x_2\leq0.5$$</p><p>怎么样选择学习率$\alpha$</p><h4 id="4-3-特征和多项目式回归"><a href="#4-3-特征和多项目式回归" class="headerlink" title="4.3 特征和多项目式回归"></a>4.3 特征和多项目式回归</h4><p>趋势可能是曲线，所以需要多项式，例如：<br>$$\theta_0+\theta_1x+\theta_2x^2$$<br><img src="/img/machine-learning/07.png" srcset="/img/loading.gif" alt="图7"></p><h3 id="5-正规方程"><a href="#5-正规方程" class="headerlink" title="5 正规方程"></a>5 正规方程</h3><p>对于某些线性回归问题，正规方程会给我们更好的方法来求得$\theta$的最优值。<br>使用解析的方式，跟递归不同，正规方程只需要一次就可求解<br>$\theta\in R^{n+1} \quad J(\theta_0,\theta_1,…,\theta_m)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y{(i)})^2$<br>$$\frac{\partial}{\partial\theta_j}J(\theta)=…=0 \qquad (for\quad every\quad j)$$<br>solve for $\theta_0,\theta_1,..,\theta_n$<br><img src="/img/machine-learning/08.png" srcset="/img/loading.gif" alt="图8"><br>增加一列$x_0$，它的取值永远是1<br>$X=\begin{bmatrix}1 &amp; 2104 &amp; 5 &amp; 1 &amp; 45 \ 1 &amp; 1416 &amp; 3 &amp; 2 &amp; 40 \ 1 &amp; 1534 &amp; 3 &amp; 2 &amp; 30 \ 1 &amp; 852 &amp; 2 &amp; 1 &amp; 36\end{bmatrix}\qquad y=\begin{bmatrix}460 \232 \315 \178 \end{bmatrix}$<br>$$\theta=(X^TX)^{-1}X^Ty$$<br>使用正规方程不需要特征缩放，但递归下降算法适用于处理大量的数据，大于一万，小于一万用正规方程即可。<br>在矩阵方程不可逆的时候，使用程序可以正常计算出来（伪逆），这是技术性进阶的数学原因。而不可能逆有两种原因，数值的单位不一样，还有就是样本数太少，想求的参数太多，这样可以删除某些多余的特征。  </p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>machine-learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析工具（三）</title>
    <link href="/2020/03/20/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2020/03/20/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="Pandas-库的引用"><a href="#Pandas-库的引用" class="headerlink" title="Pandas 库的引用"></a>Pandas 库的引用</h3><p>Pandas是Python第三方库，提供高性能易用数据类型和分析工具。<br><code>import pandas as pd</code><br>Pandas 基于Numpy实现，常与Numpy和Matplotlib一同使用<br>两个数据类型：Series, DataFrame<br>基于上述数据类型的各类操作<br>基本操作、运算操作、特征类操作、关联类操作<br>NumPy               Pandas<br>基础数据类型          扩展数据类型<br>关注数据的结构表达     关注数据的应用表达<br>维度：数据间关系       数据与索引间关系   </p><p>Pandas库中的Series类型,由一组数据与之相关的数据索引组成<br>index_0 —&gt;data_a<br>index_1 —&gt;data_b<br>index_2 —&gt;data_c<br>index_3 —&gt;data_d  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">2</span>]: a = pd.Series([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>])In [<span class="hljs-number">3</span>]: aOut[<span class="hljs-number">3</span>]: <span class="hljs-number">0</span>    <span class="hljs-number">9</span><span class="hljs-number">1</span>    <span class="hljs-number">8</span><span class="hljs-number">2</span>    <span class="hljs-number">7</span><span class="hljs-number">3</span>    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">4</span>]: a = pd.Series([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>], index=[<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>]) In [<span class="hljs-number">5</span>]: aOut[<span class="hljs-number">5</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64</code></pre><p>从标量值创建  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">7</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">8</span>]: s = pd.Series(<span class="hljs-number">25</span>, index=[<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>])In [<span class="hljs-number">9</span>]: sOut[<span class="hljs-number">9</span>]: a    <span class="hljs-number">25</span>b    <span class="hljs-number">25</span>c    <span class="hljs-number">25</span>dtype: <span class="hljs-built_in">int</span>64</code></pre><p>从字典类型创建   </p><pre><code class="hljs angelscript">In [<span class="hljs-number">10</span>]: d = pd.Series(&#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">9</span>, <span class="hljs-string">'b'</span>:<span class="hljs-number">8</span>, <span class="hljs-string">'c'</span>:<span class="hljs-number">7</span>&#125;)In [<span class="hljs-number">11</span>]: dOut[<span class="hljs-number">11</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>c    <span class="hljs-number">7</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">12</span>]: e = pd.Series(&#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">9</span>, <span class="hljs-string">'b'</span>:<span class="hljs-number">8</span>, <span class="hljs-string">'c'</span>:<span class="hljs-number">7</span>&#125;, index=[<span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'d'</span>]) #index从字典中进行选择操作In [<span class="hljs-number">13</span>]: eOut[<span class="hljs-number">13</span>]: c    <span class="hljs-number">7.0</span>a    <span class="hljs-number">9.0</span>b    <span class="hljs-number">8.0</span>d    NaNdtype: <span class="hljs-built_in">float</span>64</code></pre><p>从ndarray类型创建  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">14</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">15</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">16</span>]: n = pd.Series(np.arange(<span class="hljs-number">5</span>))In [<span class="hljs-number">17</span>]: nOut[<span class="hljs-number">17</span>]: <span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">2</span><span class="hljs-number">3</span>    <span class="hljs-number">3</span><span class="hljs-number">4</span>    <span class="hljs-number">4</span>dtype: <span class="hljs-built_in">int</span>64</code></pre><p>Series类型的基本操作  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">19</span>]: aOut[<span class="hljs-number">19</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">20</span>]: b.indexIn [<span class="hljs-number">21</span>]: a.indexOut[<span class="hljs-number">21</span>]: Index([<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>], dtype=<span class="hljs-string">'object'</span>)            #.index 获得索引/.valus获得数据In [<span class="hljs-number">22</span>]: a.valuesOut[<span class="hljs-number">22</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>])</code></pre><pre><code class="hljs angelscript">In [<span class="hljs-number">27</span>]: b = pd.Series([<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>], index=[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>])In [<span class="hljs-number">28</span>]: bOut[<span class="hljs-number">28</span>]: a    <span class="hljs-number">8</span>b    <span class="hljs-number">9</span>c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">29</span>]: b[<span class="hljs-string">'b'</span>]         #自动索引和自定义索引并存Out[<span class="hljs-number">29</span>]: <span class="hljs-number">9</span>In [<span class="hljs-number">30</span>]: b[<span class="hljs-number">1</span>]Out[<span class="hljs-number">30</span>]: <span class="hljs-number">9</span>In [<span class="hljs-number">31</span>]: b[[<span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-number">0</span>]]        #两套索引并存，但不能混合使用Out[<span class="hljs-number">31</span>]: c    <span class="hljs-number">7.0</span>d    <span class="hljs-number">6.0</span><span class="hljs-number">0</span>    NaNdtype: <span class="hljs-built_in">float</span>64In [<span class="hljs-number">32</span>]: b[[<span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'a'</span>]]   Out[<span class="hljs-number">32</span>]: c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>a    <span class="hljs-number">8</span>dtype: <span class="hljs-built_in">int</span>64</code></pre><p>Series类型的操作类似于ndarray类型<br>索引方法相同，采用[]<br>NumPy中运算和操作可用于Series类型<br>可以通过自定义索引的列表进行切片<br>可以通过自动索引进行切片，如果含有自定义索引，它们也会被保留下来  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">34</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">35</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">36</span>]: b = pd.Series([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>], [<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>])In [<span class="hljs-number">37</span>]: bOut[<span class="hljs-number">37</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">38</span>]: b[<span class="hljs-number">3</span>]Out[<span class="hljs-number">38</span>]: <span class="hljs-number">6</span>In [<span class="hljs-number">39</span>]: b[:<span class="hljs-number">3</span>]Out[<span class="hljs-number">39</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>c    <span class="hljs-number">7</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">41</span>]: b[b &gt; b.median()]Out[<span class="hljs-number">41</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">42</span>]: np.exp(b)Out[<span class="hljs-number">42</span>]: a    <span class="hljs-number">8103.083928</span>b    <span class="hljs-number">2980.957987</span>c    <span class="hljs-number">1096.633158</span>d     <span class="hljs-number">403.428793</span>dtype: <span class="hljs-built_in">float</span>64In [<span class="hljs-number">43</span>]: <span class="hljs-string">'c'</span> <span class="hljs-keyword">in</span> bOut[<span class="hljs-number">43</span>]: TrueIn [<span class="hljs-number">44</span>]: <span class="hljs-number">0</span> <span class="hljs-keyword">in</span> b           #<span class="hljs-keyword">in</span>判断自定义索引在不在Out[<span class="hljs-number">44</span>]: FalseIn [<span class="hljs-number">45</span>]: b.<span class="hljs-keyword">get</span>(<span class="hljs-string">'f'</span>, <span class="hljs-number">100</span>)  #从b中提取f的值并返回，但f中为空，第二个参数<span class="hljs-number">100</span>,所以返回了<span class="hljs-number">100</span>Out[<span class="hljs-number">45</span>]: <span class="hljs-number">100</span>#Series + SeriesIn [<span class="hljs-number">47</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">48</span>]: a = pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>])In [<span class="hljs-number">49</span>]: b = pd.Series([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>],[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>])In [<span class="hljs-number">50</span>]: a + b Out[<span class="hljs-number">50</span>]: a    NaNb    NaNc    <span class="hljs-number">8.0</span>d    <span class="hljs-number">8.0</span>e    NaNdtype: <span class="hljs-built_in">float</span>64</code></pre><p>Series类型在运算中会自动对齐不同索引的数据<br>Series对象和索引都可以有一个名字，存储在属性.name中<br>Series对象可以随时修改并立刻生效  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">53</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">54</span>]: b = pd.Series([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>],[<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>])In [<span class="hljs-number">55</span>]: b[<span class="hljs-string">'a'</span>]Out[<span class="hljs-number">55</span>]: <span class="hljs-number">9</span>In [<span class="hljs-number">56</span>]: b[<span class="hljs-string">'a'</span>] = <span class="hljs-number">15</span>In [<span class="hljs-number">57</span>]: b.name = <span class="hljs-string">"Series"</span>In [<span class="hljs-number">58</span>]: bOut[<span class="hljs-number">58</span>]: a    <span class="hljs-number">15</span>b     <span class="hljs-number">8</span>c     <span class="hljs-number">7</span>d     <span class="hljs-number">6</span>Name: Series, dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">59</span>]: b[<span class="hljs-string">'a'</span>, <span class="hljs-string">'c'</span>] = <span class="hljs-number">20</span>In [<span class="hljs-number">60</span>]: bOut[<span class="hljs-number">60</span>]: a    <span class="hljs-number">20</span>b     <span class="hljs-number">8</span>c    <span class="hljs-number">20</span>d     <span class="hljs-number">6</span>Name: Series, dtype: <span class="hljs-built_in">int</span>64</code></pre><p>Pandas库的DataFrame类型<br>DataFrame类型由共同相同索引的一组列组成<br>index_0 —&gt;data_a     data_1            data_w<br>index_1 —&gt;data_b     data_2     ….   data_x<br>index_2 —&gt;data_c     data_3            data_y<br>index_3 —&gt;data_d     data_4            data_z<br>DataFrame是一个表格型的数据类型，每列值类型可以不同<br>DataFrame既有行索引、也有列索引<br>DataFrame常用于表达二维数据，但可以表达多维数据<br>可以由：  </p><ul><li>二维ndarray对象  </li><li>由一维ndarray、列表、字典、元组或者Series构成的字典  </li><li>Series类型  </li><li>其他的DaraFrame类型 </li></ul><h4 id="Pandas库的DataFrame类型"><a href="#Pandas库的DataFrame类型" class="headerlink" title="Pandas库的DataFrame类型"></a>Pandas库的DataFrame类型</h4><p>DataFrame类型由共同相同索引的一组列组成<br>index_0 —&gt;data_a     data_1            data_w<br>index_1 —&gt;data_b     data_2     ….   data_x<br>index_2 —&gt;data_c     data_3            data_y<br>index_3 —&gt;data_d     data_4            data_z<br>DataFrame是一个表格型的数据类型，每列值类型可以不同<br>DataFrame既有行索引、也有列索引<br>DataFrame常用于表达二维数据，但可以表达多维数据<br>可以由：<br>*二维ndarray对象<br>*由一维ndarray、列表、字典、元组或者Series构成的字典<br>*Series类型<br>*其他的DaraFrame类型</p><p>二维ndarray对象创建</p><pre><code class="hljs angelscript">In [<span class="hljs-number">62</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">63</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">64</span>]: d = pd.DataFrame(np.arange(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>))In [<span class="hljs-number">65</span>]: dOut[<span class="hljs-number">65</span>]:    <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><span class="hljs-number">1</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>In [<span class="hljs-number">66</span>]:</code></pre><p>从一维ndarray对象字典创建  </p><pre><code class="hljs prolog"><span class="hljs-symbol">In</span> [<span class="hljs-number">67</span>]: dt = &#123;<span class="hljs-string">'one'</span>: pd.<span class="hljs-symbol">Series</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span> ,<span class="hljs-number">3</span>], index=[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>]), <span class="hljs-string">'two'</span>:pd.<span class="hljs-symbol">Series</span>    ...: ([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>], index=[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>])&#125;<span class="hljs-symbol">In</span> [<span class="hljs-number">68</span>]: d = pd.<span class="hljs-symbol">DataFrame</span>(dt)<span class="hljs-symbol">In</span> [<span class="hljs-number">69</span>]: d<span class="hljs-symbol">Out</span>[<span class="hljs-number">69</span>]:    one  twoa  <span class="hljs-number">1.0</span>    <span class="hljs-number">9</span>b  <span class="hljs-number">2.0</span>    <span class="hljs-number">8</span>c  <span class="hljs-number">3.0</span>    <span class="hljs-number">7</span>d  <span class="hljs-symbol">NaN</span>    <span class="hljs-number">6</span><span class="hljs-symbol">In</span> [<span class="hljs-number">70</span>]: d = pd.<span class="hljs-symbol">DataFrame</span>(dt, index=[<span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>], columns=[<span class="hljs-string">'two'</span>, <span class="hljs-string">'three'</span>])<span class="hljs-symbol">In</span> [<span class="hljs-number">71</span>]: d<span class="hljs-symbol">Out</span>[<span class="hljs-number">71</span>]:    two threeb    <span class="hljs-number">8</span>   <span class="hljs-symbol">NaN</span>c    <span class="hljs-number">7</span>   <span class="hljs-symbol">NaN</span>d    <span class="hljs-number">6</span>   <span class="hljs-symbol">NaN</span></code></pre><p>从列表类型的字典创建  </p><pre><code class="hljs prolog"><span class="hljs-symbol">In</span> [<span class="hljs-number">73</span>]: dl = &#123;<span class="hljs-string">'one'</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>], <span class="hljs-string">'two'</span>:[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>]&#125;<span class="hljs-symbol">In</span> [<span class="hljs-number">75</span>]: d = pd.<span class="hljs-symbol">DataFrame</span>(dl, index = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>])<span class="hljs-symbol">In</span> [<span class="hljs-number">76</span>]: d<span class="hljs-symbol">Out</span>[<span class="hljs-number">76</span>]:    one twoa    <span class="hljs-number">1</span>   ab    <span class="hljs-number">2</span>   bc    <span class="hljs-number">3</span>   cd    <span class="hljs-number">4</span>   d<span class="hljs-symbol">In</span> [<span class="hljs-number">77</span>]:</code></pre><p><img src="/img/data/43.png" srcset="/img/loading.gif" alt="图43"><br>如何改变Series和DataFrame对象？<br>增加或重排：重新索引  .reindex()能够改变或重排Series和DataFrame索引<br><img src="/img/data/44.png" srcset="/img/loading.gif" alt="图44"><br><img src="/img/data/45.png" srcset="/img/loading.gif" alt="图45"><br><img src="/img/data/46.png" srcset="/img/loading.gif" alt="图46"><br>Series 和DataFrame的索引是Index类型<br>Index对象是不可修改类型<br><img src="/img/data/47.png" srcset="/img/loading.gif" alt="图47"><br><img src="/img/data/48.png" srcset="/img/loading.gif" alt="图48"><br>使用.drop()能够删除Series和DataFrame指定行或列索引<br><img src="/img/data/49.png" srcset="/img/loading.gif" alt="图49">   </p><h4 id="Pandas库的算术运算法则"><a href="#Pandas库的算术运算法则" class="headerlink" title="Pandas库的算术运算法则"></a>Pandas库的算术运算法则</h4><p>算术运算根据行列索引，补齐后运算，运算默认产生浮点数<br>补齐时缺项填充NaN（空值）<br>二维和一维、一维和零维间为广播运算<br>采用+-*/符号进行的二元运算产生新的对象  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">78</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">79</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">80</span>]: a = pd.DataFrame(np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">81</span>]: aOut[<span class="hljs-number">81</span>]:    <span class="hljs-number">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span><span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span><span class="hljs-number">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span><span class="hljs-number">2</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>In [<span class="hljs-number">82</span>]: b = pd.DataFrame(np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))In [<span class="hljs-number">83</span>]: bOut[<span class="hljs-number">83</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">1</span>   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span><span class="hljs-number">2</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span><span class="hljs-number">3</span>  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>In [<span class="hljs-number">84</span>]: a + b Out[<span class="hljs-number">84</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">2.0</span>   <span class="hljs-number">4.0</span>   <span class="hljs-number">6.0</span> NaN<span class="hljs-number">1</span>   <span class="hljs-number">9.0</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">13.0</span>  <span class="hljs-number">15.0</span> NaN<span class="hljs-number">2</span>  <span class="hljs-number">18.0</span>  <span class="hljs-number">20.0</span>  <span class="hljs-number">22.0</span>  <span class="hljs-number">24.0</span> NaN<span class="hljs-number">3</span>   NaN   NaN   NaN   NaN NaNIn [<span class="hljs-number">85</span>]: a * bOut[<span class="hljs-number">85</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>      <span class="hljs-number">2</span>      <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">1.0</span>    <span class="hljs-number">4.0</span>    <span class="hljs-number">9.0</span> NaN<span class="hljs-number">1</span>  <span class="hljs-number">20.0</span>  <span class="hljs-number">30.0</span>   <span class="hljs-number">42.0</span>   <span class="hljs-number">56.0</span> NaN<span class="hljs-number">2</span>  <span class="hljs-number">80.0</span>  <span class="hljs-number">99.0</span>  <span class="hljs-number">120.0</span>  <span class="hljs-number">143.0</span> NaN<span class="hljs-number">3</span>   NaN   NaN    NaN    NaN NaN</code></pre><p><img src="/img/data/50.png" srcset="/img/loading.gif" alt="图50">   </p><pre><code class="hljs angelscript">In [<span class="hljs-number">86</span>]: b.add(a, fill_value = <span class="hljs-number">100</span>)Out[<span class="hljs-number">86</span>]:        <span class="hljs-number">0</span>      <span class="hljs-number">1</span>      <span class="hljs-number">2</span>      <span class="hljs-number">3</span>      <span class="hljs-number">4</span><span class="hljs-number">0</span>    <span class="hljs-number">0.0</span>    <span class="hljs-number">2.0</span>    <span class="hljs-number">4.0</span>    <span class="hljs-number">6.0</span>  <span class="hljs-number">104.0</span><span class="hljs-number">1</span>    <span class="hljs-number">9.0</span>   <span class="hljs-number">11.0</span>   <span class="hljs-number">13.0</span>   <span class="hljs-number">15.0</span>  <span class="hljs-number">109.0</span><span class="hljs-number">2</span>   <span class="hljs-number">18.0</span>   <span class="hljs-number">20.0</span>   <span class="hljs-number">22.0</span>   <span class="hljs-number">24.0</span>  <span class="hljs-number">114.0</span><span class="hljs-number">3</span>  <span class="hljs-number">115.0</span>  <span class="hljs-number">116.0</span>  <span class="hljs-number">117.0</span>  <span class="hljs-number">118.0</span>  <span class="hljs-number">119.0</span>In [<span class="hljs-number">87</span>]: b.mul(a, fill_value = <span class="hljs-number">0</span>)Out[<span class="hljs-number">87</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>      <span class="hljs-number">2</span>      <span class="hljs-number">3</span>    <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">1.0</span>    <span class="hljs-number">4.0</span>    <span class="hljs-number">9.0</span>  <span class="hljs-number">0.0</span><span class="hljs-number">1</span>  <span class="hljs-number">20.0</span>  <span class="hljs-number">30.0</span>   <span class="hljs-number">42.0</span>   <span class="hljs-number">56.0</span>  <span class="hljs-number">0.0</span><span class="hljs-number">2</span>  <span class="hljs-number">80.0</span>  <span class="hljs-number">99.0</span>  <span class="hljs-number">120.0</span>  <span class="hljs-number">143.0</span>  <span class="hljs-number">0.0</span><span class="hljs-number">3</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">0.0</span>    <span class="hljs-number">0.0</span>    <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span></code></pre><p>fill_value 参数代替NaN，代替后参与运算  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">88</span>]: bOut[<span class="hljs-number">88</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">1</span>   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span><span class="hljs-number">2</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span><span class="hljs-number">3</span>  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>In [<span class="hljs-number">89</span>]: c = pd.Series(np.arange(<span class="hljs-number">4</span>))In [<span class="hljs-number">90</span>]: cOut[<span class="hljs-number">90</span>]: <span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">2</span><span class="hljs-number">3</span>    <span class="hljs-number">3</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">91</span>]: c <span class="hljs-number">-10</span>Out[<span class="hljs-number">91</span>]: <span class="hljs-number">0</span>   <span class="hljs-number">-10</span><span class="hljs-number">1</span>    <span class="hljs-number">-9</span><span class="hljs-number">2</span>    <span class="hljs-number">-8</span><span class="hljs-number">3</span>    <span class="hljs-number">-7</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">92</span>]: b - cOut[<span class="hljs-number">92</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">0.0</span> NaN<span class="hljs-number">1</span>   <span class="hljs-number">5.0</span>   <span class="hljs-number">5.0</span>   <span class="hljs-number">5.0</span>   <span class="hljs-number">5.0</span> NaN<span class="hljs-number">2</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">10.0</span> NaN<span class="hljs-number">3</span>  <span class="hljs-number">15.0</span>  <span class="hljs-number">15.0</span>  <span class="hljs-number">15.0</span>  <span class="hljs-number">15.0</span> NaN</code></pre><p>不同维度间为广播运算，一维Series默认在轴1参与运算<br>比较运算<br>同维度运算，尺寸一致<br>不同维度运算为广播运算，运算在轴1<br>Python 数据特征的提取<br> Pandas库的数据排序<br><code>.sort_index()方法在指定轴上根据索引进行排序，默认升序</code><br><code>.sort_index(axis=,ascending=True)</code>  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">94</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">95</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">96</span>]: b = pd.DataFrame(np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>),index=[<span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'b'</span>])In [<span class="hljs-number">97</span>]: bOut[<span class="hljs-number">97</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>In [<span class="hljs-number">99</span>]: b.sort_index()Out[<span class="hljs-number">99</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>In [<span class="hljs-number">100</span>]: b.sort_index(ascending=True)Out[<span class="hljs-number">100</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>In [<span class="hljs-number">101</span>]: b.sort_index(ascending=False)Out[<span class="hljs-number">101</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>In [<span class="hljs-number">102</span>]: b.sort_index(axis=<span class="hljs-number">1</span>, ascending=False)Out[<span class="hljs-number">102</span>]:     <span class="hljs-number">4</span>   <span class="hljs-number">3</span>   <span class="hljs-number">2</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>c   <span class="hljs-number">4</span>   <span class="hljs-number">3</span>   <span class="hljs-number">2</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>a   <span class="hljs-number">9</span>   <span class="hljs-number">8</span>   <span class="hljs-number">7</span>   <span class="hljs-number">6</span>   <span class="hljs-number">5</span>d  <span class="hljs-number">14</span>  <span class="hljs-number">13</span>  <span class="hljs-number">12</span>  <span class="hljs-number">11</span>  <span class="hljs-number">10</span>b  <span class="hljs-number">19</span>  <span class="hljs-number">18</span>  <span class="hljs-number">17</span>  <span class="hljs-number">16</span>  <span class="hljs-number">15</span></code></pre><p><code> .sort_value()</code>方法在指定轴上根据数值进行排序，默认升序<br><code>Series.sort_values(axis=0, ascending=True) </code><br><code>DataFrame.sort_values(by, axis = 0, ascending=True) </code><br>by : axis轴上某个索引或者索引列表  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">105</span>]: c = b.sort_values(<span class="hljs-number">2</span>, ascending=False)In [<span class="hljs-number">106</span>]: cOut[<span class="hljs-number">106</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>In [<span class="hljs-number">107</span>]: c = b.sort_values(<span class="hljs-string">'a'</span>, axis=<span class="hljs-number">1</span>, ascending=False)In [<span class="hljs-number">108</span>]: cOut[<span class="hljs-number">108</span>]:     <span class="hljs-number">4</span>   <span class="hljs-number">3</span>   <span class="hljs-number">2</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>c   <span class="hljs-number">4</span>   <span class="hljs-number">3</span>   <span class="hljs-number">2</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>a   <span class="hljs-number">9</span>   <span class="hljs-number">8</span>   <span class="hljs-number">7</span>   <span class="hljs-number">6</span>   <span class="hljs-number">5</span>d  <span class="hljs-number">14</span>  <span class="hljs-number">13</span>  <span class="hljs-number">12</span>  <span class="hljs-number">11</span>  <span class="hljs-number">10</span>b  <span class="hljs-number">19</span>  <span class="hljs-number">18</span>  <span class="hljs-number">17</span>  <span class="hljs-number">16</span>  <span class="hljs-number">15</span></code></pre><p>NaN统一放到末尾  </p><h4 id="Pandas基本分析函数"><a href="#Pandas基本分析函数" class="headerlink" title="Pandas基本分析函数"></a>Pandas基本分析函数</h4><p>适用于Series和DataFrame类型<br><img src="/img/data/51.png" srcset="/img/loading.gif" alt="图51"><br><img src="/img/data/52.png" srcset="/img/loading.gif" alt="图52">  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">109</span>]: c =pd.Series([<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>], index=[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>])In [<span class="hljs-number">110</span>]: cOut[<span class="hljs-number">110</span>]: a    <span class="hljs-number">8</span>b    <span class="hljs-number">9</span>c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">111</span>]: c.describe()Out[<span class="hljs-number">111</span>]: count    <span class="hljs-number">4.000000</span>mean     <span class="hljs-number">7.500000</span>std      <span class="hljs-number">1.290994</span>min      <span class="hljs-number">6.000000</span><span class="hljs-number">25</span>%      <span class="hljs-number">6.750000</span><span class="hljs-number">50</span>%      <span class="hljs-number">7.500000</span><span class="hljs-number">75</span>%      <span class="hljs-number">8.250000</span>max      <span class="hljs-number">9.000000</span>dtype: <span class="hljs-built_in">float</span>64</code></pre><p>只适用于Series类型</p><p><img src="/img/data/53.png" srcset="/img/loading.gif" alt="图53">   </p><p>数据的累计统计分析<br>适用于Series和DataFrame类型<br><img src="/img/data/54.png" srcset="/img/loading.gif" alt="图54">   </p><pre><code class="hljs angelscript"> In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">2</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">3</span>]: b = pd.DataFrame(np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>),index=[<span class="hljs-string">'c'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'d'</span>,<span class="hljs-string">'b'</span>])In [<span class="hljs-number">4</span>]: bOut[<span class="hljs-number">4</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>In [<span class="hljs-number">5</span>]: b.cumsum()Out[<span class="hljs-number">5</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">7</span>   <span class="hljs-number">9</span>  <span class="hljs-number">11</span>  <span class="hljs-number">13</span>d  <span class="hljs-number">15</span>  <span class="hljs-number">18</span>  <span class="hljs-number">21</span>  <span class="hljs-number">24</span>  <span class="hljs-number">27</span>b  <span class="hljs-number">30</span>  <span class="hljs-number">34</span>  <span class="hljs-number">38</span>  <span class="hljs-number">42</span>  <span class="hljs-number">46</span>In [<span class="hljs-number">6</span>]: b.cumprod()Out[<span class="hljs-number">6</span>]:    <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>c  <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>a  <span class="hljs-number">0</span>     <span class="hljs-number">6</span>    <span class="hljs-number">14</span>    <span class="hljs-number">24</span>    <span class="hljs-number">36</span>d  <span class="hljs-number">0</span>    <span class="hljs-number">66</span>   <span class="hljs-number">168</span>   <span class="hljs-number">312</span>   <span class="hljs-number">504</span>b  <span class="hljs-number">0</span>  <span class="hljs-number">1056</span>  <span class="hljs-number">2856</span>  <span class="hljs-number">5616</span>  <span class="hljs-number">9576</span>In [<span class="hljs-number">7</span>]: b.cummin()Out[<span class="hljs-number">7</span>]:    <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>c  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>a  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>d  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>b  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>In [<span class="hljs-number">8</span>]: b.cummax()Out[<span class="hljs-number">8</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span></code></pre><p>适用于Series和DataFrame类型，滚动计算（窗口计算）<br><img src="/img/data/55.png" srcset="/img/loading.gif" alt="图55">  </p><pre><code class="hljs angelscript"> In [<span class="hljs-number">10</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">11</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">12</span>]: b = pd.DataFrame(np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>),index=[<span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'b'</span>])In [<span class="hljs-number">13</span>]: bOut[<span class="hljs-number">13</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>In [<span class="hljs-number">14</span>]: b.rolling(<span class="hljs-number">2</span>).sum()Out[<span class="hljs-number">14</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>c   NaN   NaN   NaN   NaN   NaNa   <span class="hljs-number">5.0</span>   <span class="hljs-number">7.0</span>   <span class="hljs-number">9.0</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">13.0</span>d  <span class="hljs-number">15.0</span>  <span class="hljs-number">17.0</span>  <span class="hljs-number">19.0</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">23.0</span>b  <span class="hljs-number">25.0</span>  <span class="hljs-number">27.0</span>  <span class="hljs-number">29.0</span>  <span class="hljs-number">31.0</span>  <span class="hljs-number">33.0</span>In [<span class="hljs-number">15</span>]: b.rolling(<span class="hljs-number">3</span>).sum()Out[<span class="hljs-number">15</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>c   NaN   NaN   NaN   NaN   NaNa   NaN   NaN   NaN   NaN   NaNd  <span class="hljs-number">15.0</span>  <span class="hljs-number">18.0</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">24.0</span>  <span class="hljs-number">27.0</span>b  <span class="hljs-number">30.0</span>  <span class="hljs-number">33.0</span>  <span class="hljs-number">36.0</span>  <span class="hljs-number">39.0</span>  <span class="hljs-number">42.0</span></code></pre><h4 id="数据的相关分析"><a href="#数据的相关分析" class="headerlink" title="数据的相关分析"></a>数据的相关分析</h4><p>两个事物，表示为X和Y，如何判断它们之间的相关性？  </p><ul><li>X增大，Y增大，两个变量正相关  </li><li>X增大，Y减小，两个变量负相关  </li><li>X增大，Y无视，两个变量不相关<br>斜方差<br>两个事物，表示为X和Y<br><img src="/img/data/56.png" srcset="/img/loading.gif" alt="图56"><br>Pearson相关系数<br><img src="/img/data/57.png" srcset="/img/loading.gif" alt="图57"><br><img src="/img/data/58.png" srcset="/img/loading.gif" alt="图58"> <pre><code class="hljs 1c">In [<span class="hljs-number">17</span>]: hprice = pd.Series([<span class="hljs-number">3.04</span>,<span class="hljs-number">22.93</span>,<span class="hljs-number">12.75</span>,<span class="hljs-number">22.6</span>,<span class="hljs-number">12.33</span>], index = ['<span class="hljs-number">2008</span>','<span class="hljs-number">2009</span>',    ...: '<span class="hljs-number">2010</span>', '<span class="hljs-number">2011</span>', '<span class="hljs-number">2012</span>'])In [<span class="hljs-number">18</span>]: m2 = pd.Series([<span class="hljs-number">8.18</span>,<span class="hljs-number">18.38</span>,<span class="hljs-number">9.13</span>,<span class="hljs-number">7.82</span>,<span class="hljs-number">6.69</span>], index=['<span class="hljs-number">2008</span>','<span class="hljs-number">2009</span>', '<span class="hljs-number">2010</span>',    ...: '<span class="hljs-number">2011</span>', '<span class="hljs-number">2012</span>'])In [<span class="hljs-number">20</span>]: hprice.corr(m2)Out[<span class="hljs-number">20</span>]: <span class="hljs-number">0.5239439145220387</span></code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>numpy</tag>
      
      <tag>matplotlib</tag>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析工具（二）</title>
    <link href="/2020/03/13/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/03/13/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="图像的数组表示"><a href="#图像的数组表示" class="headerlink" title="图像的数组表示"></a>图像的数组表示</h3><p>图像的RGB色彩模式<br>RGB三个颜色通道的变化和叠加得到各种颜色，其中<br>*R红色，取值范围，0-255<br>*G绿色，取值范围，0-255<br>*B蓝色，取值范围，0-255<br>RGB形成的颜色包括了人类视力感知的所有颜色<br>PIL库，Python Image Library<br>PIL库是一个具有强大图像处理能力的第三方库<br><code>from PIL import Image </code><br>Image 是PIL库中代表一个图像的类（对象）<br>图像是一个由像素组成的二维矩阵，每个元素是一个RGB值  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">61</span>]: <span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageIn [<span class="hljs-number">62</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">63</span>]: im = np.<span class="hljs-built_in">array</span>(Image.open(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/1.jpg"</span>))In [<span class="hljs-number">64</span>]: print(im.shape,im.dtype)(<span class="hljs-number">853</span>, <span class="hljs-number">1280</span>, <span class="hljs-number">3</span>) <span class="hljs-built_in">uint</span>8</code></pre><p>图像是一个三维数组  </p><p>图像变换<br>读入图像后，获得像素RGB值，修改后保存为新的文件  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">66</span>]: <span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageIn [<span class="hljs-number">67</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">68</span>]: a = np.<span class="hljs-built_in">array</span>(Image.open(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/1.jpg"</span>))In [<span class="hljs-number">69</span>]: print(a.shape,a.dtype)(<span class="hljs-number">853</span>, <span class="hljs-number">1280</span>, <span class="hljs-number">3</span>) <span class="hljs-built_in">uint</span>8In [<span class="hljs-number">70</span>]: b = [<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>] -aIn [<span class="hljs-number">71</span>]: im = Image.fromarray(b.astype(<span class="hljs-string">'uint8'</span>))In [<span class="hljs-number">72</span>]: im.save(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/2.jpg"</span>)In [<span class="hljs-number">73</span>]: c = np.<span class="hljs-built_in">array</span>(Image.open(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/1.jpg"</span>).convert(<span class="hljs-string">'L'</span>))In [<span class="hljs-number">74</span>]: d = <span class="hljs-number">255</span> - cIn [<span class="hljs-number">75</span>]: ip = Image.fromarray(d.astype(<span class="hljs-string">'uint8'</span>))In [<span class="hljs-number">76</span>]: ip.save(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/3.jpg"</span>)In [<span class="hljs-number">77</span>]: e = (<span class="hljs-number">100</span>/<span class="hljs-number">255</span>)*c + <span class="hljs-number">150</span> #区间变换In [<span class="hljs-number">80</span>]: it = Image.fromarray(e.astype(<span class="hljs-string">'uint8'</span>))In [<span class="hljs-number">81</span>]: it.save(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/4.jpg"</span>)In [<span class="hljs-number">82</span>]: f = <span class="hljs-number">255</span>*(a/<span class="hljs-number">255</span>)**<span class="hljs-number">2</span>In [<span class="hljs-number">83</span>]: im = Image.fromarray(f.astype(<span class="hljs-string">'uint8'</span>))In [<span class="hljs-number">84</span>]: im.save(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/5.jpg"</span>)</code></pre><p>“图像的手绘效果”实例分析<br>手绘效果的几个特征：<br>*黑白灰色<br>*边界线条较重<br>*相同或相近色彩趋于白色<br>*略有光源效果  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageIn [<span class="hljs-number">2</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">3</span>]: a = np.<span class="hljs-built_in">array</span>(Image.open(<span class="hljs-string">'/home/liu/Pictures/Wallpapers/1.jpg'</span>).convert(<span class="hljs-string">'L'</span>)).astype(<span class="hljs-string">'float'</span>)In [<span class="hljs-number">4</span>]: depth = <span class="hljs-number">10.</span>              #(<span class="hljs-number">0</span><span class="hljs-number">-100</span>)In [<span class="hljs-number">5</span>]: grad = np.gradient(a)    #取图像灰度的梯度值                                 In [<span class="hljs-number">6</span>]: grad_x, grad_y = grad    #分别取横纵图像梯度值In [<span class="hljs-number">7</span>]: grad_x = grad_x*depth/<span class="hljs-number">100.</span>  #利用深度值*梯度值来添加深度值对梯度值的影响因素，然后/<span class="hljs-number">100</span>进行归一化处理In [<span class="hljs-number">8</span>]: grad_y = grad_y*depth/<span class="hljs-number">100.</span>In [<span class="hljs-number">9</span>]: A = np.sqrt(grad_x**<span class="hljs-number">2</span> + grad_y**<span class="hljs-number">2</span> + <span class="hljs-number">1.</span>) #构造x和y轴梯度的三维归一化单位坐标系In [<span class="hljs-number">10</span>]: uni_x = grad_x/A                       In [<span class="hljs-number">11</span>]: uni_y = grad_y/AIn [<span class="hljs-number">12</span>]: uni_z = <span class="hljs-number">1.</span>/AIn [<span class="hljs-number">13</span>]: vec_e1 = np.pi/<span class="hljs-number">2.2</span>                  #光源的俯视角度，弧度值                     In [<span class="hljs-number">14</span>]: vec_az = np.pi/<span class="hljs-number">4</span>                    #光源的方位角度，弧度值In [<span class="hljs-number">15</span>]: dx = np.cos(vec_e1)*np.cos(vec_az)  #光源对x轴的影响In [<span class="hljs-number">16</span>]: dy = np.cos(vec_e1)*np.sin(vec_az)  #光源对y轴的影响In [<span class="hljs-number">17</span>]: dz = np.sin(vec_e1)                 #光源对z轴的影响In [<span class="hljs-number">19</span>]: b = <span class="hljs-number">255</span>*(dx*uni_x + dy*uni_y + dz*uni_z)   #梯度和光源相互作用，将梯度转化为灰度，光源归一化In [<span class="hljs-number">20</span>]: b.clip(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)  #为避免数据越界，将生成的灰度值裁剪至<span class="hljs-number">0</span><span class="hljs-number">-255</span>区间Out[<span class="hljs-number">20</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">253.70520777</span>, <span class="hljs-number">252.40446768</span>, <span class="hljs-number">250.80809797</span>, ..., <span class="hljs-number">252.40446768</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>],       [<span class="hljs-number">253.70520777</span>, <span class="hljs-number">252.40446768</span>, <span class="hljs-number">250.80809797</span>, ..., <span class="hljs-number">252.40446768</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>],       [<span class="hljs-number">253.70520777</span>, <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>, ..., <span class="hljs-number">251.77581299</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>],       ...,       [<span class="hljs-number">250.97588848</span>, <span class="hljs-number">249.66293851</span>, <span class="hljs-number">250.80809797</span>, ..., <span class="hljs-number">252.40446768</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>],       [<span class="hljs-number">252.11668729</span>, <span class="hljs-number">251.84198642</span>, <span class="hljs-number">251.77581299</span>, ..., <span class="hljs-number">252.40446768</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>],       [<span class="hljs-number">248.82580592</span>, <span class="hljs-number">253.41853376</span>, <span class="hljs-number">249.5664661</span> , ..., <span class="hljs-number">252.40446768</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>]])In [<span class="hljs-number">21</span>]: im = Image.fromarray(b.astype(<span class="hljs-string">'uint8'</span>))       #重构图像In [<span class="hljs-number">22</span>]: im.save(<span class="hljs-string">'/home/liu/Pictures/Wallpapers/hand.jpg'</span>)</code></pre><p><img src="/img/data/21.png" srcset="/img/loading.gif" alt="图21"><br><img src="/img/data/22.png" srcset="/img/loading.gif" alt="图22"><br><img src="/img/data/23.png" srcset="/img/loading.gif" alt="图23"><br><img src="/img/data/24.png" srcset="/img/loading.gif" alt="图24">   </p><h3 id="Matplotlib库的介绍"><a href="#Matplotlib库的介绍" class="headerlink" title="Matplotlib库的介绍"></a>Matplotlib库的介绍</h3><p>python是优秀的数据可视化第三方库<br>Matolotlib库由各种可视化类构成，内部结构复杂，受Matlab的启发<br>matplotlib.pyplot是绘制各类可视化图形的命令子库，相当于快捷方式。<br>import matplotlib.pyplot as plt(引入模块的别名)  </p><pre><code class="hljs angelscript"><span class="hljs-keyword">import</span>  matplotlib.pyplot  as pltplt.plot([<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>])plt.ylabel(<span class="hljs-string">"Grade"</span>)plt.savefig(<span class="hljs-string">'test'</span>, dpi=<span class="hljs-number">600</span>)  #pngplt.show()</code></pre><p><code>plt.savefig()</code>将输出图形存储为文件，默认为PNG格式，可以通过dpi修改输出质量  </p><pre><code class="hljs angelscript"><span class="hljs-keyword">import</span>  matplotlib.pyplot  as pltplt.plot([<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>], [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>])plt.ylabel(<span class="hljs-string">"Grade"</span>)plt.axis([<span class="hljs-number">-1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>])plt.show()</code></pre><p><img src="/img/data/25.png" srcset="/img/loading.gif" alt="图25"><br>plt.plot(x,y)当有两个以上的参数时，按照x轴和y轴的顺序绘制数据点<br>pyplot的绘图区域<br><code>plt.subplot(nrows,ncols,plot_number)  </code><br><code>plt.subplot(3,2,4)  </code><br><img src="/img/data/26.png" srcset="/img/loading.gif" alt="图26"><br>在全局绘图区域中创立一个分区体系，并定位到一个子绘图区域  </p><pre><code class="hljs livecodeserver">import numpy <span class="hljs-keyword">as</span> np import matplotlib.pyplot <span class="hljs-keyword">as</span> plt def f(t):    <span class="hljs-literal">return</span> np.<span class="hljs-built_in">exp</span>(-t) * np.<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*np.<span class="hljs-literal">pi</span>*t)<span class="hljs-keyword">a</span> = np.arange(<span class="hljs-number">0.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">0.02</span>)plt.subplot(<span class="hljs-number">211</span>)plt.plot(<span class="hljs-keyword">a</span>, f(<span class="hljs-keyword">a</span>))plt.subplot(<span class="hljs-number">212</span>)plt.plot(<span class="hljs-keyword">a</span>, np.<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*np.<span class="hljs-literal">pi</span>*<span class="hljs-number">2</span>),  <span class="hljs-string">'r--'</span>)plt.show()</code></pre><p>plt.plot(x, y, format_string, **kwargs)<br>x:  X轴数据， 列表或数组，可选<br>y:  Y轴数据， 列表或数组。<br>format_string:  控制曲线的格式字符串，可选<br>**kwargs:  第二组或更多（x, y, format_string）<br>当绘制多条曲线时，各条曲线的x不能省略  </p><pre><code class="hljs livecodeserver">import numpy <span class="hljs-keyword">as</span> np import matplotlib.pyplot <span class="hljs-keyword">as</span> plt <span class="hljs-keyword">a</span> = np.arange(<span class="hljs-number">10</span>)plt.plot(<span class="hljs-keyword">a</span>,   <span class="hljs-keyword">a</span>*<span class="hljs-number">1.5</span>,    <span class="hljs-keyword">a</span>,    <span class="hljs-keyword">a</span>*<span class="hljs-number">2.5</span>,   <span class="hljs-keyword">a</span>,   <span class="hljs-keyword">a</span>*<span class="hljs-number">3.5</span> ,   <span class="hljs-keyword">a</span>,     <span class="hljs-keyword">a</span>*<span class="hljs-number">4.5</span> )plt.show()</code></pre><p><img src="/img/data/27.png" srcset="/img/loading.gif" alt="图27"><br>format_string:  控制曲线的格式字符串，可选由颜色字符、风格字符和标记字符组成<br><img src="/img/data/28.png" srcset="/img/loading.gif" alt="图28"><br><img src="/img/data/29.png" srcset="/img/loading.gif" alt="图29"><br><img src="/img/data/30.png" srcset="/img/loading.gif" alt="图30">   </p><pre><code class="hljs livecodeserver">import numpy <span class="hljs-keyword">as</span> np import matplotlib.pyplot <span class="hljs-keyword">as</span> plt <span class="hljs-keyword">a</span> = np.arange(<span class="hljs-number">10</span>)plt.plot(<span class="hljs-keyword">a</span>,   <span class="hljs-keyword">a</span>*<span class="hljs-number">1.5</span>,    <span class="hljs-string">'go-'</span> ,   <span class="hljs-keyword">a</span>,    <span class="hljs-keyword">a</span>*<span class="hljs-number">2.5</span>,   <span class="hljs-string">'rx'</span>,   <span class="hljs-keyword">a</span>,   <span class="hljs-keyword">a</span>*<span class="hljs-number">3.5</span> ,  <span class="hljs-string">' * '</span>,    <span class="hljs-keyword">a</span>,     <span class="hljs-keyword">a</span>*<span class="hljs-number">4.5</span> ,  <span class="hljs-string">'b-.'</span> )plt.show()</code></pre><p><img src="/img/data/31.png" srcset="/img/loading.gif" alt="图31"><br><img src="/img/data/32.png" srcset="/img/loading.gif" alt="图32"><br>pyplot的中文显示方法<br>pyplot并不支持中文显示，需要rcParams修改字体实现  </p><pre><code class="hljs xl"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> matplotlibmatplotlib.rcParams[<span class="hljs-string">'font.family'</span>]=<span class="hljs-string">'SimHei'</span> #SinHei是黑体plt.plot([<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>])plt.ylabel(<span class="hljs-string">"纵轴（值）"</span>)plt.savefig(<span class="hljs-string">'test'</span>,dpi=<span class="hljs-number">600</span>)plt.show()</code></pre><p><img src="/img/data/33.png" srcset="/img/loading.gif" alt="图33"><br><img src="/img/data/34.png" srcset="/img/loading.gif" alt="图34">   </p><pre><code class="hljs xl"><span class="hljs-keyword">import</span>  numpy <span class="hljs-keyword">as</span> np <span class="hljs-keyword">import</span>  matplotlib.pyplot <span class="hljs-keyword">as</span> plt <span class="hljs-keyword">import</span>  matplotlibmatplotlib.rcParams[<span class="hljs-string">'font.family'</span>]=<span class="hljs-string">'STSong'</span>matplotlib.rcParams[<span class="hljs-string">'font.size'</span>] = <span class="hljs-number">20</span>a = np.arange(<span class="hljs-number">0.0</span>,  <span class="hljs-number">5.0</span>,  <span class="hljs-number">0.02</span>)plt.xlabel(<span class="hljs-string">'横轴：时间'</span>)plt.ylabel(<span class="hljs-string">'纵轴：振幅'</span>)plt.plot(a, np.<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*np.<span class="hljs-built_in">pi</span>*a),   <span class="hljs-string">'r--'</span>)plt.show()</code></pre><p>第二种方法，在有中文输出的地方，增加一个属性：fontproperties(建议使用)  </p><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span>  numpy <span class="hljs-keyword">as</span> np <span class="hljs-keyword">import</span>  matplotlib.pyplot <span class="hljs-keyword">as</span> plt a = np.arange(<span class="hljs-number">0.0</span>,  <span class="hljs-number">5.0</span>,  <span class="hljs-number">0.02</span>)plt.xlabel(<span class="hljs-string">'横轴：时间'</span>,  fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">20</span>)plt.ylabel(<span class="hljs-string">'纵轴：振幅'</span> , fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">20</span>)plt.plot(a, np.cos(<span class="hljs-number">2</span>*np.pi*a),   <span class="hljs-string">'r--)</span><span class="hljs-string">plt.show()</span></code></pre><p>pyplot的文本显示函数<br><img src="/img/data/35.png" srcset="/img/loading.gif" alt="图35">   </p><pre><code class="hljs python"><span class="hljs-keyword">import</span>  numpy <span class="hljs-keyword">as</span> np <span class="hljs-keyword">import</span>  matplotlib.pyplot <span class="hljs-keyword">as</span> plt a = np.arange(<span class="hljs-number">0.0</span>,  <span class="hljs-number">5.0</span>,  <span class="hljs-number">0.02</span>)plt.plot(a, np.cos(<span class="hljs-number">2</span>*np.pi*a),   <span class="hljs-string">'r--'</span>)plt.xlabel(<span class="hljs-string">'1'</span>,  fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">15</span>, color=<span class="hljs-string">'green'</span>)plt.ylabel(<span class="hljs-string">'2'</span> , fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">20</span>)plt.title(<span class="hljs-string">'shili  $y=cos(2\pi  x)$'</span>, fontproperties= <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">25</span>)plt.text(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-string">r'$\mu=100$'</span>, fontsize=<span class="hljs-number">15</span>)plt.axis([<span class="hljs-number">-1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">2</span>])plt.grid(<span class="hljs-literal">True</span>)plt.show()</code></pre><p><img src="/img/data/36.png" srcset="/img/loading.gif" alt="图36"><br> <pre><code class="hljs python"><span class="hljs-keyword">import</span>  numpy <span class="hljs-keyword">as</span> np <span class="hljs-keyword">import</span>  matplotlib.pyplot <span class="hljs-keyword">as</span> plt a = np.arange(<span class="hljs-number">0.0</span>,  <span class="hljs-number">5.0</span>,  <span class="hljs-number">0.02</span>)plt.plot(a, np.cos(<span class="hljs-number">2</span>*np.pi*a),   <span class="hljs-string">'r--'</span>)plt.xlabel(<span class="hljs-string">'1'</span>,  fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">15</span>, color=<span class="hljs-string">'green'</span>)plt.ylabel(<span class="hljs-string">'2'</span> , fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">20</span>)plt.title(<span class="hljs-string">'shili  $y=cos(2\pi  x)$'</span>, fontproperties= <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">25</span>)plt.annotate( <span class="hljs-string">r'$\mu=100$'</span>, xy=(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),  xytext=(<span class="hljs-number">3</span>,<span class="hljs-number">1.5</span>), arrowprops= dict(facecolor = <span class="hljs-string">'black'</span>, shrink = <span class="hljs-number">0.1</span>, width = <span class="hljs-number">2</span>)) <span class="hljs-comment">#shrink 使箭头在两端留出空白</span>plt.axis([<span class="hljs-number">-1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">2</span>])plt.grid(<span class="hljs-literal">True</span>)plt.show()</code></pre><br><img src="/img/data/37.png" srcset="/img/loading.gif" alt="图37"><br>绘图子区域分割<br><code>plt.subplot2grid()</code><br><code>plt.subplot2grid(GridSpec, CurSpec, colspan=1, rowspan=1)</code><br>理念，设定网格，选中网格，确定选中行列区域数量<br><img src="/img/data/38.png" srcset="/img/loading.gif" alt="图38"><br>GridSpec</p><pre><code class="hljs angelscript"><span class="hljs-keyword">import</span> matplotlib.gridspec as gridspecgs = gridspec.GeidSpec(<span class="hljs-number">3.3</span>)ax1 = plt.subplot(gs[<span class="hljs-number">0</span>, :])ax2 = plt.subplot(gs[<span class="hljs-number">1</span>, : <span class="hljs-number">-1</span>])ax3 = plt.dubplot(gs[<span class="hljs-number">1</span>:, <span class="hljs-number">-1</span>])ax4 = plt.subplot(gs[<span class="hljs-number">2</span>, <span class="hljs-number">0</span>])ax5 = plt.subplot(gs[<span class="hljs-number">2</span>, <span class="hljs-number">1</span>])</code></pre><p>Matplotlib基础绘图函数实例<br><img src="/img/data/39.png" srcset="/img/loading.gif" alt="图39"><br><img src="/img/data/40.png" srcset="/img/loading.gif" alt="图40"><br><img src="/img/data/41.png" srcset="/img/loading.gif" alt="图41"><br>饼图的函数  </p><pre><code class="hljs routeros">import matplotlib.pyplot as pltlabels = <span class="hljs-string">'Frogs'</span>, <span class="hljs-string">'Hogs'</span>, <span class="hljs-string">'Dogs'</span>, <span class="hljs-string">'Logs'</span>sizes = [15, 30, 45, 10]explode = (0, 0.1, 0, 0)plt.pie(sizes,<span class="hljs-attribute">explode</span>=explode, <span class="hljs-attribute">labels</span>=labels, autopct  = <span class="hljs-string">'%1.1f%%'</span>, <span class="hljs-attribute">shadow</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">startangle</span>=90)plt.axis(<span class="hljs-string">'equal'</span>) #显示为正方plt.show()</code></pre><p><img src="/img/data/42.png" srcset="/img/loading.gif" alt="图42"><br>pyplot的直方图绘制<br><code>......</code></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>numpy</tag>
      
      <tag>matplotlib</tag>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析工具（一）</title>
    <link href="/2020/03/03/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/03/03/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="主题思想"><a href="#主题思想" class="headerlink" title="主题思想"></a>主题思想</h3><p><img src="/img/data/01.png" srcset="/img/loading.gif" alt="图1"><br>一个数据表达一个含义———&gt;一组数据表达一个或多个含义：与一组数据相关的那些事儿，即如何理解数据表达的含义</p><p>编程工具<br>使用Anaconda IDE集成开发工具<br>需要理解和掌握如下工具的使用：conda、Spyder、IPython<br>常用的python IDE工具<br>IDLE 自带的、默认的、常用的，入门级编写工具，适合入门，300行以内<br>Sublime Text 专为程序员设计，有多种功能和风格<br>Wine 公司维护，收费，适合多人共同开发<br>VS &amp; PTVS<br>Eclipse PyDev 需要一定的能力配置<br>PyCharm 社区版免费<br>Canopy 公司维护，工具收费<br>Anaconda 免费开源  </p><h3 id="Anaconda的基本使用"><a href="#Anaconda的基本使用" class="headerlink" title="Anaconda的基本使用"></a>Anaconda的基本使用</h3><p>conda 是一个工具，用于包管理和环境<br>包管理和pip类似，管理Python的第三方库<br>环境管理包括能够允许用户使用不同版本的python，并能够灵活切换<br>anaconda: 一个集合，包括conda、某版本的python、一批第三方库等<br>IPython 的？命令，可以查看参数<br>IPython <code>%run </code> 用于运行.py程序 （%run在一个空的命名空间执行%）<br><img src="/img/data/02.png" srcset="/img/loading.gif" alt="图2"> </p><h3 id="数据的维度"><a href="#数据的维度" class="headerlink" title="数据的维度"></a>数据的维度</h3><p>维度：是一组数据的组织形式<br>一维数据<br>由对等关系的有序和无序数据构成，采用线性方式组织，对应列表、数组和集合等概念。<br>列表和数组<br>都是一组数据的有序结构<br>区别：列表数据类型可以不同 数组数据类型相同<br>二维数据<br>由多个一维数据构成，是一维数据的组合形式，表格是典型的二维数据，其中，表头是二维数据的一部分<br>多维数据<br>由一维或二维数据在新维度上扩展而成<br>高维数据<br>仅利用最基本的二元关系展示数据间的复杂结构（键值对）<br>一维数据：列表和集合类型<br>二维数据：列表类型<br>多维类型：列表类型<br>高维类型：字典类型或者数据表示格式   </p><h3 id="Numpy库"><a href="#Numpy库" class="headerlink" title="Numpy库"></a>Numpy库</h3><p>是一个开源的python科学计算基础库<br>一个强大的N维数组对象 ndarray<br>广播功能函数<br>整合C/C++/Fortran代码的工具<br>线性代数、傅立叶变换、随机数生成等功能<br>Numpy是SciPy、Pandas等数据处理或科学计算库的基础<br><code>import numpy as np</code><br>尽管别名可以省略或者更改，建议使用上述约定的别名<br>N维数组对象：ndarray<br>例子：计算A2+B3，其中，A、B是一维数组  </p><pre><code class="hljs angelscript">def pySum():    a = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3.4</span>]    b = [<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>]    c = []        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(a)):        c.append(a[i]**<span class="hljs-number">2</span>+b[i]**<span class="hljs-number">3</span>)    <span class="hljs-keyword">return</span> cprint(pySum)</code></pre><p>numpy的方法：</p><pre><code class="hljs angelscript"><span class="hljs-keyword">import</span> numpy as npdef npSum():    a = np.<span class="hljs-built_in">array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])    b = np.<span class="hljs-built_in">array</span>([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>])    c = a**<span class="hljs-number">2</span> + b**<span class="hljs-number">3</span>        <span class="hljs-keyword">return</span> cprint(npSum())</code></pre><p>数组对象可以去掉元素间运算所需的循环，使一维向量更像单个数据<br>设置专门的数组对象，经过优化，可以提升这类应用的运算速度<br>观察：科学计算时，一个维度所有数据的类型往往是相同的<br>数组对象采用相同的数据类型，有助于节省运算和存储空间<br>ndarray是一个多维数组对象，由两部分构成：<br>实际的数据<br>描述这些数据的元数据（数据维度、数据类型等等）<br>ndarray数组一般要求所有元素类型相同（同质），数组下标从0开始<br><code>np.array()</code>生成一个ndarray数组，ndarray在程序中的别名是array<br><code>np.array()</code>输出成[]形式，元素用空格分割。<br>轴（axis）：保存数据的维度    秩（rank）：轴的数量（几个维度）<br><img src="/img/data/03.png" srcset="/img/loading.gif" alt="图3">   </p><pre><code class="hljs angelscript">In [<span class="hljs-number">6</span>]: a = np.<span class="hljs-built_in">array</span>([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>]])In [<span class="hljs-number">7</span>]: a.ndimOut[<span class="hljs-number">7</span>]: <span class="hljs-number">2</span>In [<span class="hljs-number">8</span>]: a.shapeOut[<span class="hljs-number">8</span>]: (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>)In [<span class="hljs-number">9</span>]: a.sizeOut[<span class="hljs-number">9</span>]: <span class="hljs-number">10</span>In [<span class="hljs-number">10</span>]: a.dtypeOut[<span class="hljs-number">10</span>]: dtype(<span class="hljs-string">'int64'</span>)In [<span class="hljs-number">11</span>]: a.itemsizeOut[<span class="hljs-number">11</span>]: <span class="hljs-number">8</span></code></pre><p>ndarray的元素类型<br><img src="/img/data/04.png" srcset="/img/loading.gif" alt="图4"><br><img src="/img/data/05.png" srcset="/img/loading.gif" alt="图5"><br><img src="/img/data/06.png" srcset="/img/loading.gif" alt="图6">   </p><h4 id="ndarray数组的创建方法"><a href="#ndarray数组的创建方法" class="headerlink" title="ndarray数组的创建方法"></a>ndarray数组的创建方法</h4><ol><li>从python中的列表、元组等类型创建ndarray数组<br><code>x = np,array(list/tuple)</code><br><code>x = np.array(list/tuple, dtype= np.float32)</code><br>当np.array()不指定dtype时，NumPy将根据数据情况关联一个dtype类型。<br><img src="/img/data/07.png" srcset="/img/loading.gif" alt="图7"><br>2）使用numpy中函数创建ndarray数组，如arange, ones,zeros等<br><img src="/img/data/08.png" srcset="/img/loading.gif" alt="图8">   <pre><code class="hljs angelscript">n [<span class="hljs-number">12</span>]: np.arange(<span class="hljs-number">15</span>)Out[<span class="hljs-number">12</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>])In [<span class="hljs-number">13</span>]: np.ones((<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))Out[<span class="hljs-number">13</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]])In [<span class="hljs-number">14</span>]: np.zeros((<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))Out[<span class="hljs-number">14</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])In [<span class="hljs-number">15</span>]: np.eye(<span class="hljs-number">5</span>)Out[<span class="hljs-number">15</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>]])In [<span class="hljs-number">17</span>]: np.ones((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>))Out[<span class="hljs-number">17</span>]: <span class="hljs-built_in">array</span>([[[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]],       [[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]]])</code></pre><img src="/img/data/09.png" srcset="/img/loading.gif" alt="图9"><br><img src="/img/data/10.png" srcset="/img/loading.gif" alt="图10">  <pre><code class="hljs angelscript">In [<span class="hljs-number">18</span>]: a = np.linspace(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>)In [<span class="hljs-number">19</span>]: aOut[<span class="hljs-number">19</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">1.</span>,  <span class="hljs-number">4.</span>,  <span class="hljs-number">7.</span>, <span class="hljs-number">10.</span>])In [<span class="hljs-number">20</span>]: a = np.linspace(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>, endpoint=False)In [<span class="hljs-number">21</span>]: aOut[<span class="hljs-number">21</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">1.</span>  , <span class="hljs-number">3.25</span>, <span class="hljs-number">5.5</span> , <span class="hljs-number">7.75</span>])In [<span class="hljs-number">22</span>]: b  = np.linspace(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>)In [<span class="hljs-number">23</span>]: c = np.concatenate((a,b))In [<span class="hljs-number">24</span>]: cOut[<span class="hljs-number">24</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">1.</span>  ,  <span class="hljs-number">3.25</span>,  <span class="hljs-number">5.5</span> ,  <span class="hljs-number">7.75</span>,  <span class="hljs-number">1.</span>  ,  <span class="hljs-number">4.</span>  ,  <span class="hljs-number">7.</span>  , <span class="hljs-number">10.</span>  ])</code></pre>ndarray数组的维度变换<br><img src="/img/data/11.png" srcset="/img/loading.gif" alt="图11"><br><code>new_a = a.astype(new_type)</code><br>astype()方法一定会创建新的数组（原始数据的一个拷贝），即两个类型一致。<br>ndarray数组向列表的转换<br><code>ls = a.tolist</code><br>从字节流（raw bytes）中创建ndarray数组<br>从文件中读取特定格式，创建ndarray数组  </li></ol><p>数组的索引和切片<br>一维数组的索引和切片，与python的列表类似  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">25</span>]: a = np.<span class="hljs-built_in">array</span>([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>])In [<span class="hljs-number">26</span>]: a[<span class="hljs-number">2</span>]Out[<span class="hljs-number">26</span>]: <span class="hljs-number">7</span>In [<span class="hljs-number">27</span>]: a[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>]   #起始编号：终止编号（不含）：步长<span class="hljs-number">3</span>元素冒号分割Out[<span class="hljs-number">27</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">8</span>, <span class="hljs-number">6</span>])</code></pre><p>多维数组的索引：  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">28</span>]: a = np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">29</span>]: aOut[<span class="hljs-number">29</span>]: <span class="hljs-built_in">array</span>([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],        [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],        [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]],       [[<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>],        [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],        [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]])In [<span class="hljs-number">30</span>]: a[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]Out[<span class="hljs-number">30</span>]: <span class="hljs-number">23</span>In [<span class="hljs-number">31</span>]: a[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]Out[<span class="hljs-number">31</span>]: <span class="hljs-number">6</span>In [<span class="hljs-number">32</span>]: a[<span class="hljs-number">-1</span>, <span class="hljs-number">-2</span> , <span class="hljs-number">-3</span>]Out[<span class="hljs-number">32</span>]: <span class="hljs-number">17</span></code></pre><p>多维数组的切片：  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">33</span>]: a[:, <span class="hljs-number">1</span>, <span class="hljs-number">-3</span>]      #选取一个维度用：Out[<span class="hljs-number">33</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">5</span>, <span class="hljs-number">17</span>])In [<span class="hljs-number">34</span>]: a[:, <span class="hljs-number">1</span>:<span class="hljs-number">3</span>, :]             #每个维度切片与一维数组相同Out[<span class="hljs-number">34</span>]: <span class="hljs-built_in">array</span>([[[ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],        [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]],       [[<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],        [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]])In [<span class="hljs-number">35</span>]: a[:,:,::<span class="hljs-number">2</span>]    #每个维度可以使用步长跳跃切片Out[<span class="hljs-number">35</span>]: <span class="hljs-built_in">array</span>([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">2</span>],        [ <span class="hljs-number">4</span>,  <span class="hljs-number">6</span>],        [ <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]],       [[<span class="hljs-number">12</span>, <span class="hljs-number">14</span>],        [<span class="hljs-number">16</span>, <span class="hljs-number">18</span>],</code></pre><h4 id="narrray数组的运算"><a href="#narrray数组的运算" class="headerlink" title="narrray数组的运算"></a>narrray数组的运算</h4><p>数组与标量之间的运算<br>数组与标量之间的运算作用于数组的每一个元素  </p><pre><code class="hljs angelscript"> a.mean()Out[<span class="hljs-number">36</span>]: <span class="hljs-number">11.5</span>In [<span class="hljs-number">37</span>]: a = a/a.mean()In [<span class="hljs-number">38</span>]: aOut[<span class="hljs-number">38</span>]: <span class="hljs-built_in">array</span>([[[<span class="hljs-number">0.</span>        , <span class="hljs-number">0.08695652</span>, <span class="hljs-number">0.17391304</span>, <span class="hljs-number">0.26086957</span>],        [<span class="hljs-number">0.34782609</span>, <span class="hljs-number">0.43478261</span>, <span class="hljs-number">0.52173913</span>, <span class="hljs-number">0.60869565</span>],        [<span class="hljs-number">0.69565217</span>, <span class="hljs-number">0.7826087</span> , <span class="hljs-number">0.86956522</span>, <span class="hljs-number">0.95652174</span>]],       [[<span class="hljs-number">1.04347826</span>, <span class="hljs-number">1.13043478</span>, <span class="hljs-number">1.2173913</span> , <span class="hljs-number">1.30434783</span>],        [<span class="hljs-number">1.39130435</span>, <span class="hljs-number">1.47826087</span>, <span class="hljs-number">1.56521739</span>, <span class="hljs-number">1.65217391</span>],        [<span class="hljs-number">1.73913043</span>, <span class="hljs-number">1.82608696</span>, <span class="hljs-number">1.91304348</span>, <span class="hljs-number">2.</span>        ]]])</code></pre><p>对ndarray中的数据执行元素极运算的函数<br><img src="/img/data/12.png" srcset="/img/loading.gif" alt="图12"><br><img src="/img/data/13.png" srcset="/img/loading.gif" alt="图13">   </p><pre><code class="hljs angelscript">In [<span class="hljs-number">41</span>]: a = np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">42</span>]: aOut[<span class="hljs-number">42</span>]: <span class="hljs-built_in">array</span>([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],        [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],        [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]],       [[<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>],        [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],        [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]])In [<span class="hljs-number">43</span>]: np.square(a)Out[<span class="hljs-number">43</span>]: <span class="hljs-built_in">array</span>([[[  <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">4</span>,   <span class="hljs-number">9</span>],        [ <span class="hljs-number">16</span>,  <span class="hljs-number">25</span>,  <span class="hljs-number">36</span>,  <span class="hljs-number">49</span>],        [ <span class="hljs-number">64</span>,  <span class="hljs-number">81</span>, <span class="hljs-number">100</span>, <span class="hljs-number">121</span>]],       [[<span class="hljs-number">144</span>, <span class="hljs-number">169</span>, <span class="hljs-number">196</span>, <span class="hljs-number">225</span>],        [<span class="hljs-number">256</span>, <span class="hljs-number">289</span>, <span class="hljs-number">324</span>, <span class="hljs-number">361</span>],        [<span class="hljs-number">400</span>, <span class="hljs-number">441</span>, <span class="hljs-number">484</span>, <span class="hljs-number">529</span>]]])In [<span class="hljs-number">44</span>]: a = sqrt(a)---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)&lt;ipython-input<span class="hljs-number">-44</span><span class="hljs-number">-7803</span>baeb8559&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()----&gt; <span class="hljs-number">1</span> a = sqrt(a)NameError: name <span class="hljs-string">'sqrt'</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> definedIn [<span class="hljs-number">45</span>]: a = np.sqrt(a)In [<span class="hljs-number">46</span>]: aOut[<span class="hljs-number">46</span>]: <span class="hljs-built_in">array</span>([[[<span class="hljs-number">0.</span>        , <span class="hljs-number">1.</span>        , <span class="hljs-number">1.41421356</span>, <span class="hljs-number">1.73205081</span>],        [<span class="hljs-number">2.</span>        , <span class="hljs-number">2.23606798</span>, <span class="hljs-number">2.44948974</span>, <span class="hljs-number">2.64575131</span>],        [<span class="hljs-number">2.82842712</span>, <span class="hljs-number">3.</span>        , <span class="hljs-number">3.16227766</span>, <span class="hljs-number">3.31662479</span>]],       [[<span class="hljs-number">3.46410162</span>, <span class="hljs-number">3.60555128</span>, <span class="hljs-number">3.74165739</span>, <span class="hljs-number">3.87298335</span>],        [<span class="hljs-number">4.</span>        , <span class="hljs-number">4.12310563</span>, <span class="hljs-number">4.24264069</span>, <span class="hljs-number">4.35889894</span>],        [<span class="hljs-number">4.47213595</span>, <span class="hljs-number">4.58257569</span>, <span class="hljs-number">4.69041576</span>, <span class="hljs-number">4.79583152</span>]]])In [<span class="hljs-number">47</span>]: np.modf(a)Out[<span class="hljs-number">47</span>]: (<span class="hljs-built_in">array</span>([[[<span class="hljs-number">0.</span>        , <span class="hljs-number">0.</span>        , <span class="hljs-number">0.41421356</span>, <span class="hljs-number">0.73205081</span>],         [<span class="hljs-number">0.</span>        , <span class="hljs-number">0.23606798</span>, <span class="hljs-number">0.44948974</span>, <span class="hljs-number">0.64575131</span>],         [<span class="hljs-number">0.82842712</span>, <span class="hljs-number">0.</span>        , <span class="hljs-number">0.16227766</span>, <span class="hljs-number">0.31662479</span>]],         [[<span class="hljs-number">0.46410162</span>, <span class="hljs-number">0.60555128</span>, <span class="hljs-number">0.74165739</span>, <span class="hljs-number">0.87298335</span>],         [<span class="hljs-number">0.</span>        , <span class="hljs-number">0.12310563</span>, <span class="hljs-number">0.24264069</span>, <span class="hljs-number">0.35889894</span>],         [<span class="hljs-number">0.47213595</span>, <span class="hljs-number">0.58257569</span>, <span class="hljs-number">0.69041576</span>, <span class="hljs-number">0.79583152</span>]]]), <span class="hljs-built_in">array</span>([[[<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],         [<span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>],         [<span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>]],         [[<span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>],         [<span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>],         [<span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>]]]))In [<span class="hljs-number">48</span>]: b = a[<span class="hljs-number">1</span>, :, :]In [<span class="hljs-number">49</span>]: bOut[<span class="hljs-number">49</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">3.46410162</span>, <span class="hljs-number">3.60555128</span>, <span class="hljs-number">3.74165739</span>, <span class="hljs-number">3.87298335</span>],       [<span class="hljs-number">4.</span>        , <span class="hljs-number">4.12310563</span>, <span class="hljs-number">4.24264069</span>, <span class="hljs-number">4.35889894</span>],       [<span class="hljs-number">4.47213595</span>, <span class="hljs-number">4.58257569</span>, <span class="hljs-number">4.69041576</span>, <span class="hljs-number">4.79583152</span>]])</code></pre><p>NumPy二元函数<br><img src="/img/data/14.png" srcset="/img/loading.gif" alt="图14">   </p><pre><code class="hljs yaml"> <span class="hljs-string">In</span> <span class="hljs-string">[53]:</span> <span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-string">np.arange(24).reshape((2,3,4))</span><span class="hljs-string">In</span> <span class="hljs-string">[54]:</span> <span class="hljs-string">a</span><span class="hljs-string">Out[54]:</span> <span class="hljs-string">array([[[</span> <span class="hljs-number">0</span><span class="hljs-string">,</span>  <span class="hljs-number">1</span><span class="hljs-string">,</span>  <span class="hljs-number">2</span><span class="hljs-string">,</span>  <span class="hljs-number">3</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-number">4</span><span class="hljs-string">,</span>  <span class="hljs-number">5</span><span class="hljs-string">,</span>  <span class="hljs-number">6</span><span class="hljs-string">,</span>  <span class="hljs-number">7</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-number">8</span><span class="hljs-string">,</span>  <span class="hljs-number">9</span><span class="hljs-string">,</span> <span class="hljs-number">10</span><span class="hljs-string">,</span> <span class="hljs-number">11</span><span class="hljs-string">]],</span>       <span class="hljs-string">[[12,</span> <span class="hljs-number">13</span><span class="hljs-string">,</span> <span class="hljs-number">14</span><span class="hljs-string">,</span> <span class="hljs-number">15</span><span class="hljs-string">],</span>        <span class="hljs-string">[16,</span> <span class="hljs-number">17</span><span class="hljs-string">,</span> <span class="hljs-number">18</span><span class="hljs-string">,</span> <span class="hljs-number">19</span><span class="hljs-string">],</span>        <span class="hljs-string">[20,</span> <span class="hljs-number">21</span><span class="hljs-string">,</span> <span class="hljs-number">22</span><span class="hljs-string">,</span> <span class="hljs-number">23</span><span class="hljs-string">]]])</span><span class="hljs-string">In</span> <span class="hljs-string">[55]:</span> <span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-string">np.sqrt(a)</span><span class="hljs-string">In</span> <span class="hljs-string">[56]:</span> <span class="hljs-string">b</span><span class="hljs-string">Out[56]:</span> <span class="hljs-string">array([[[0.</span>        <span class="hljs-string">,</span> <span class="hljs-number">1</span><span class="hljs-string">.</span>        <span class="hljs-string">,</span> <span class="hljs-number">1.41421356</span><span class="hljs-string">,</span> <span class="hljs-number">1.73205081</span><span class="hljs-string">],</span>        <span class="hljs-string">[2.</span>        <span class="hljs-string">,</span> <span class="hljs-number">2.23606798</span><span class="hljs-string">,</span> <span class="hljs-number">2.44948974</span><span class="hljs-string">,</span> <span class="hljs-number">2.64575131</span><span class="hljs-string">],</span>        <span class="hljs-string">[2.82842712,</span> <span class="hljs-number">3</span><span class="hljs-string">.</span>        <span class="hljs-string">,</span> <span class="hljs-number">3.16227766</span><span class="hljs-string">,</span> <span class="hljs-number">3.31662479</span><span class="hljs-string">]],</span>       <span class="hljs-string">[[3.46410162,</span> <span class="hljs-number">3.60555128</span><span class="hljs-string">,</span> <span class="hljs-number">3.74165739</span><span class="hljs-string">,</span> <span class="hljs-number">3.87298335</span><span class="hljs-string">],</span>        <span class="hljs-string">[4.</span>        <span class="hljs-string">,</span> <span class="hljs-number">4.12310563</span><span class="hljs-string">,</span> <span class="hljs-number">4.24264069</span><span class="hljs-string">,</span> <span class="hljs-number">4.35889894</span><span class="hljs-string">],</span>        <span class="hljs-string">[4.47213595,</span> <span class="hljs-number">4.58257569</span><span class="hljs-string">,</span> <span class="hljs-number">4.69041576</span><span class="hljs-string">,</span> <span class="hljs-number">4.79583152</span><span class="hljs-string">]]])</span><span class="hljs-string">In</span> <span class="hljs-string">[57]:</span> <span class="hljs-string">np.maximum(a,b)</span><span class="hljs-string">Out[57]:</span> <span class="hljs-string">array([[[</span> <span class="hljs-number">0</span><span class="hljs-string">.,</span>  <span class="hljs-number">1</span><span class="hljs-string">.,</span>  <span class="hljs-number">2</span><span class="hljs-string">.,</span>  <span class="hljs-number">3</span><span class="hljs-string">.],</span>        <span class="hljs-string">[</span> <span class="hljs-number">4</span><span class="hljs-string">.,</span>  <span class="hljs-number">5</span><span class="hljs-string">.,</span>  <span class="hljs-number">6</span><span class="hljs-string">.,</span>  <span class="hljs-number">7</span><span class="hljs-string">.],</span>        <span class="hljs-string">[</span> <span class="hljs-number">8</span><span class="hljs-string">.,</span>  <span class="hljs-number">9</span><span class="hljs-string">.,</span> <span class="hljs-number">10</span><span class="hljs-string">.,</span> <span class="hljs-number">11</span><span class="hljs-string">.]],</span>       <span class="hljs-string">[[12.,</span> <span class="hljs-number">13</span><span class="hljs-string">.,</span> <span class="hljs-number">14</span><span class="hljs-string">.,</span> <span class="hljs-number">15</span><span class="hljs-string">.],</span>        <span class="hljs-string">[16.,</span> <span class="hljs-number">17</span><span class="hljs-string">.,</span> <span class="hljs-number">18</span><span class="hljs-string">.,</span> <span class="hljs-number">19</span><span class="hljs-string">.],</span>        <span class="hljs-string">[20.,</span> <span class="hljs-number">21</span><span class="hljs-string">.,</span> <span class="hljs-number">22</span><span class="hljs-string">.,</span> <span class="hljs-number">23</span><span class="hljs-string">.]]])</span><span class="hljs-string">In</span> <span class="hljs-string">[58]:</span> <span class="hljs-string">a&gt;b</span><span class="hljs-string">Out[58]:</span> <span class="hljs-string">array([[[False,</span> <span class="hljs-literal">False</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">]],</span>       <span class="hljs-string">[[</span> <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">]]])</span></code></pre><h4 id="NumPy文件存放与读取"><a href="#NumPy文件存放与读取" class="headerlink" title="NumPy文件存放与读取"></a>NumPy文件存放与读取</h4><p>CSV（Comma-Separated Value, 逗号分割值）<br>CSV是一种常见的文件格式，用来存储批量数据<br>CSV文件<br><code>np.savetxt(frame,array,fmt=&#39;%.18e&#39;, delimiter=None)</code><br>frame: 文件、字符串或者产生器，可以是.gz或.bz2的压缩文件<br>array: 存入文件的数组<br>fmt: 写入文件的格式,例如：%d %.2f %.18e<br>delimiter: 分割字符串，默认是空格<br><code>np.loadtxt(frame, dtype=np.float, delimiter=None, unpack=False)</code><br>unpack:如果True，读入属性将分别写入不同的变量   </p><pre><code class="hljs angelscript">a = np.arange(<span class="hljs-number">100</span>).reshape(<span class="hljs-number">5</span>,<span class="hljs-number">20</span>)&gt;&gt;&gt; np.savetxt(<span class="hljs-string">'a.csv'</span>, a, fmt=<span class="hljs-string">'%d'</span>, delimiter=<span class="hljs-string">','</span>)&gt;&gt;&gt; b = np.loadtxt(<span class="hljs-string">'a.csv'</span>,delimiter=<span class="hljs-string">','</span>)&gt;&gt;&gt; b<span class="hljs-built_in">array</span>([[ <span class="hljs-number">0.</span>,  <span class="hljs-number">1.</span>,  <span class="hljs-number">2.</span>,  <span class="hljs-number">3.</span>,  <span class="hljs-number">4.</span>,  <span class="hljs-number">5.</span>,  <span class="hljs-number">6.</span>,  <span class="hljs-number">7.</span>,  <span class="hljs-number">8.</span>,  <span class="hljs-number">9.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">11.</span>, <span class="hljs-number">12.</span>,        <span class="hljs-number">13.</span>, <span class="hljs-number">14.</span>, <span class="hljs-number">15.</span>, <span class="hljs-number">16.</span>, <span class="hljs-number">17.</span>, <span class="hljs-number">18.</span>, <span class="hljs-number">19.</span>],       [<span class="hljs-number">20.</span>, <span class="hljs-number">21.</span>, <span class="hljs-number">22.</span>, <span class="hljs-number">23.</span>, <span class="hljs-number">24.</span>, <span class="hljs-number">25.</span>, <span class="hljs-number">26.</span>, <span class="hljs-number">27.</span>, <span class="hljs-number">28.</span>, <span class="hljs-number">29.</span>, <span class="hljs-number">30.</span>, <span class="hljs-number">31.</span>, <span class="hljs-number">32.</span>,        <span class="hljs-number">33.</span>, <span class="hljs-number">34.</span>, <span class="hljs-number">35.</span>, <span class="hljs-number">36.</span>, <span class="hljs-number">37.</span>, <span class="hljs-number">38.</span>, <span class="hljs-number">39.</span>],       [<span class="hljs-number">40.</span>, <span class="hljs-number">41.</span>, <span class="hljs-number">42.</span>, <span class="hljs-number">43.</span>, <span class="hljs-number">44.</span>, <span class="hljs-number">45.</span>, <span class="hljs-number">46.</span>, <span class="hljs-number">47.</span>, <span class="hljs-number">48.</span>, <span class="hljs-number">49.</span>, <span class="hljs-number">50.</span>, <span class="hljs-number">51.</span>, <span class="hljs-number">52.</span>,        <span class="hljs-number">53.</span>, <span class="hljs-number">54.</span>, <span class="hljs-number">55.</span>, <span class="hljs-number">56.</span>, <span class="hljs-number">57.</span>, <span class="hljs-number">58.</span>, <span class="hljs-number">59.</span>],       [<span class="hljs-number">60.</span>, <span class="hljs-number">61.</span>, <span class="hljs-number">62.</span>, <span class="hljs-number">63.</span>, <span class="hljs-number">64.</span>, <span class="hljs-number">65.</span>, <span class="hljs-number">66.</span>, <span class="hljs-number">67.</span>, <span class="hljs-number">68.</span>, <span class="hljs-number">69.</span>, <span class="hljs-number">70.</span>, <span class="hljs-number">71.</span>, <span class="hljs-number">72.</span>,        <span class="hljs-number">73.</span>, <span class="hljs-number">74.</span>, <span class="hljs-number">75.</span>, <span class="hljs-number">76.</span>, <span class="hljs-number">77.</span>, <span class="hljs-number">78.</span>, <span class="hljs-number">79.</span>],       [<span class="hljs-number">80.</span>, <span class="hljs-number">81.</span>, <span class="hljs-number">82.</span>, <span class="hljs-number">83.</span>, <span class="hljs-number">84.</span>, <span class="hljs-number">85.</span>, <span class="hljs-number">86.</span>, <span class="hljs-number">87.</span>, <span class="hljs-number">88.</span>, <span class="hljs-number">89.</span>, <span class="hljs-number">90.</span>, <span class="hljs-number">91.</span>, <span class="hljs-number">92.</span>,        <span class="hljs-number">93.</span>, <span class="hljs-number">94.</span>, <span class="hljs-number">95.</span>, <span class="hljs-number">96.</span>, <span class="hljs-number">97.</span>, <span class="hljs-number">98.</span>, <span class="hljs-number">99.</span>]])&gt;&gt;&gt; b = np.loadtxt(<span class="hljs-string">'a.csv'</span>,dtype=np.<span class="hljs-built_in">int</span>, delimiter=<span class="hljs-string">','</span>)&gt;&gt;&gt; b<span class="hljs-built_in">array</span>([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>,        <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],       [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>,        <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>],       [<span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">42</span>, <span class="hljs-number">43</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">50</span>, <span class="hljs-number">51</span>, <span class="hljs-number">52</span>, <span class="hljs-number">53</span>, <span class="hljs-number">54</span>, <span class="hljs-number">55</span>,        <span class="hljs-number">56</span>, <span class="hljs-number">57</span>, <span class="hljs-number">58</span>, <span class="hljs-number">59</span>],       [<span class="hljs-number">60</span>, <span class="hljs-number">61</span>, <span class="hljs-number">62</span>, <span class="hljs-number">63</span>, <span class="hljs-number">64</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>, <span class="hljs-number">68</span>, <span class="hljs-number">69</span>, <span class="hljs-number">70</span>, <span class="hljs-number">71</span>, <span class="hljs-number">72</span>, <span class="hljs-number">73</span>, <span class="hljs-number">74</span>, <span class="hljs-number">75</span>,        <span class="hljs-number">76</span>, <span class="hljs-number">77</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>],       [<span class="hljs-number">80</span>, <span class="hljs-number">81</span>, <span class="hljs-number">82</span>, <span class="hljs-number">83</span>, <span class="hljs-number">84</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">89</span>, <span class="hljs-number">90</span>, <span class="hljs-number">91</span>, <span class="hljs-number">92</span>, <span class="hljs-number">93</span>, <span class="hljs-number">94</span>, <span class="hljs-number">95</span>,        <span class="hljs-number">96</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>]])</code></pre><p>CSV只能有效的存储一维和二维数组  </p><p>多维数组的存取<br>a.tofile(frame, sep=’’, format=’%s’)<br>frame:文件、字符串<br>sep: 数据分割字符串，如果是空串，写入文件为二进制<br>format：写入数据的格式  </p><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span>&gt; c = np.arange(<span class="hljs-number">100</span>).reshape(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;</span>&gt; c.tofile(<span class="hljs-string">"c.dat"</span>, format=<span class="hljs-string">'%d'</span>)</code></pre><p><code>np.fromfile(frame, dtype= float, count=-1, sep=&#39;&#39;) </code><br>count: 读入元素的个数，-1表示读入整个文件  </p><pre><code class="hljs lsl">&gt;&gt;&gt; c.tofile(<span class="hljs-string">"c.dat"</span>, sep=<span class="hljs-string">","</span>, format='%d')&gt;&gt;&gt; d = np.fromfile(<span class="hljs-string">"c.dat"</span>, dtype=np.int, sep=<span class="hljs-string">","</span>)&gt;&gt;&gt; darray([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>,       <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>,       <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">42</span>, <span class="hljs-number">43</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">50</span>,       <span class="hljs-number">51</span>, <span class="hljs-number">52</span>, <span class="hljs-number">53</span>, <span class="hljs-number">54</span>, <span class="hljs-number">55</span>, <span class="hljs-number">56</span>, <span class="hljs-number">57</span>, <span class="hljs-number">58</span>, <span class="hljs-number">59</span>, <span class="hljs-number">60</span>, <span class="hljs-number">61</span>, <span class="hljs-number">62</span>, <span class="hljs-number">63</span>, <span class="hljs-number">64</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>,       <span class="hljs-number">68</span>, <span class="hljs-number">69</span>, <span class="hljs-number">70</span>, <span class="hljs-number">71</span>, <span class="hljs-number">72</span>, <span class="hljs-number">73</span>, <span class="hljs-number">74</span>, <span class="hljs-number">75</span>, <span class="hljs-number">76</span>, <span class="hljs-number">77</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>, <span class="hljs-number">80</span>, <span class="hljs-number">81</span>, <span class="hljs-number">82</span>, <span class="hljs-number">83</span>, <span class="hljs-number">84</span>,       <span class="hljs-number">85</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">89</span>, <span class="hljs-number">90</span>, <span class="hljs-number">91</span>, <span class="hljs-number">92</span>, <span class="hljs-number">93</span>, <span class="hljs-number">94</span>, <span class="hljs-number">95</span>, <span class="hljs-number">96</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>])&gt;&gt;&gt; d = np.fromfile(<span class="hljs-string">"c.dat"</span>, dtype=np.int, sep=<span class="hljs-string">","</span>).reshape(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)&gt;&gt;&gt; darray([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>],        [ <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],        [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>],        [ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],        [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],        [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>],        [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>],        [<span class="hljs-number">14</span>, <span class="hljs-number">15</span>],        [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>],        [<span class="hljs-number">18</span>, <span class="hljs-number">19</span>]],       [[<span class="hljs-number">20</span>, <span class="hljs-number">21</span>],        [<span class="hljs-number">22</span>, <span class="hljs-number">23</span>],        [<span class="hljs-number">24</span>, <span class="hljs-number">25</span>],        [<span class="hljs-number">26</span>, <span class="hljs-number">27</span>],        [<span class="hljs-number">28</span>, <span class="hljs-number">29</span>],        [<span class="hljs-number">30</span>, <span class="hljs-number">31</span>],        [<span class="hljs-number">32</span>, <span class="hljs-number">33</span>],        [<span class="hljs-number">34</span>, <span class="hljs-number">35</span>],        [<span class="hljs-number">36</span>, <span class="hljs-number">37</span>],        [<span class="hljs-number">38</span>, <span class="hljs-number">39</span>]],       [[<span class="hljs-number">40</span>, <span class="hljs-number">41</span>],        [<span class="hljs-number">42</span>, <span class="hljs-number">43</span>],        [<span class="hljs-number">44</span>, <span class="hljs-number">45</span>],        [<span class="hljs-number">46</span>, <span class="hljs-number">47</span>],        [<span class="hljs-number">48</span>, <span class="hljs-number">49</span>],        [<span class="hljs-number">50</span>, <span class="hljs-number">51</span>],        [<span class="hljs-number">52</span>, <span class="hljs-number">53</span>],        [<span class="hljs-number">54</span>, <span class="hljs-number">55</span>],        [<span class="hljs-number">56</span>, <span class="hljs-number">57</span>],        [<span class="hljs-number">58</span>, <span class="hljs-number">59</span>]],       [[<span class="hljs-number">60</span>, <span class="hljs-number">61</span>],        [<span class="hljs-number">62</span>, <span class="hljs-number">63</span>],        [<span class="hljs-number">64</span>, <span class="hljs-number">65</span>],        [<span class="hljs-number">66</span>, <span class="hljs-number">67</span>],        [<span class="hljs-number">68</span>, <span class="hljs-number">69</span>],        [<span class="hljs-number">70</span>, <span class="hljs-number">71</span>],        [<span class="hljs-number">72</span>, <span class="hljs-number">73</span>],        [<span class="hljs-number">74</span>, <span class="hljs-number">75</span>],        [<span class="hljs-number">76</span>, <span class="hljs-number">77</span>],        [<span class="hljs-number">78</span>, <span class="hljs-number">79</span>]],       [[<span class="hljs-number">80</span>, <span class="hljs-number">81</span>],        [<span class="hljs-number">82</span>, <span class="hljs-number">83</span>],        [<span class="hljs-number">84</span>, <span class="hljs-number">85</span>],        [<span class="hljs-number">86</span>, <span class="hljs-number">87</span>],        [<span class="hljs-number">88</span>, <span class="hljs-number">89</span>],        [<span class="hljs-number">90</span>, <span class="hljs-number">91</span>],        [<span class="hljs-number">92</span>, <span class="hljs-number">93</span>],        [<span class="hljs-number">94</span>, <span class="hljs-number">95</span>],        [<span class="hljs-number">96</span>, <span class="hljs-number">97</span>],        [<span class="hljs-number">98</span>, <span class="hljs-number">99</span>]]])</code></pre><p>该方法需要读取时知道存入文件时数组的维度和元素类型<br> <code>a.tofile()</code>和<code>np.fromefile()</code>需要配合使用<br>可以通过元数据文件来存储额外信息  </p><p>Numpy的便捷文件存取<br><code>np.save(frame,array)</code>或者<code>np.savez(fname,array) </code><br>frame:文件名，以.npy为扩展名，压缩扩展名为.npz<br>array:数组变量<br>np.load（frame）<br>frame：文件名，以.npy为扩展名，压缩扩展名为.npz  </p><pre><code class="hljs lsl">&gt;&gt;&gt; a = np.arange(<span class="hljs-number">100</span>).reshape(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)&gt;&gt;&gt; np.save(<span class="hljs-string">"a.npy"</span>, a)&gt;&gt;&gt; b =np.load(<span class="hljs-string">"a.npy"</span>)&gt;&gt;&gt; barray([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>],        [ <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],        [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>],        [ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],        [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],        [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>],        [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>],        [<span class="hljs-number">14</span>, <span class="hljs-number">15</span>],        [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>],        [<span class="hljs-number">18</span>, <span class="hljs-number">19</span>]],       [[<span class="hljs-number">20</span>, <span class="hljs-number">21</span>],        [<span class="hljs-number">22</span>, <span class="hljs-number">23</span>],        [<span class="hljs-number">24</span>, <span class="hljs-number">25</span>],        [<span class="hljs-number">26</span>, <span class="hljs-number">27</span>],        [<span class="hljs-number">28</span>, <span class="hljs-number">29</span>],        [<span class="hljs-number">30</span>, <span class="hljs-number">31</span>],        [<span class="hljs-number">32</span>, <span class="hljs-number">33</span>],        [<span class="hljs-number">34</span>, <span class="hljs-number">35</span>],        [<span class="hljs-number">36</span>, <span class="hljs-number">37</span>],        [<span class="hljs-number">38</span>, <span class="hljs-number">39</span>]],       [[<span class="hljs-number">40</span>, <span class="hljs-number">41</span>],        [<span class="hljs-number">42</span>, <span class="hljs-number">43</span>],        [<span class="hljs-number">44</span>, <span class="hljs-number">45</span>],        [<span class="hljs-number">46</span>, <span class="hljs-number">47</span>],        [<span class="hljs-number">48</span>, <span class="hljs-number">49</span>],        [<span class="hljs-number">50</span>, <span class="hljs-number">51</span>],        [<span class="hljs-number">52</span>, <span class="hljs-number">53</span>],        [<span class="hljs-number">54</span>, <span class="hljs-number">55</span>],        [<span class="hljs-number">56</span>, <span class="hljs-number">57</span>],        [<span class="hljs-number">58</span>, <span class="hljs-number">59</span>]],       [[<span class="hljs-number">60</span>, <span class="hljs-number">61</span>],        [<span class="hljs-number">62</span>, <span class="hljs-number">63</span>],        [<span class="hljs-number">64</span>, <span class="hljs-number">65</span>],        [<span class="hljs-number">66</span>, <span class="hljs-number">67</span>],        [<span class="hljs-number">68</span>, <span class="hljs-number">69</span>],        [<span class="hljs-number">70</span>, <span class="hljs-number">71</span>],        [<span class="hljs-number">72</span>, <span class="hljs-number">73</span>],        [<span class="hljs-number">74</span>, <span class="hljs-number">75</span>],        [<span class="hljs-number">76</span>, <span class="hljs-number">77</span>],        [<span class="hljs-number">78</span>, <span class="hljs-number">79</span>]],       [[<span class="hljs-number">80</span>, <span class="hljs-number">81</span>],        [<span class="hljs-number">82</span>, <span class="hljs-number">83</span>],        [<span class="hljs-number">84</span>, <span class="hljs-number">85</span>],        [<span class="hljs-number">86</span>, <span class="hljs-number">87</span>],        [<span class="hljs-number">88</span>, <span class="hljs-number">89</span>],        [<span class="hljs-number">90</span>, <span class="hljs-number">91</span>],        [<span class="hljs-number">92</span>, <span class="hljs-number">93</span>],        [<span class="hljs-number">94</span>, <span class="hljs-number">95</span>],        [<span class="hljs-number">96</span>, <span class="hljs-number">97</span>],        [<span class="hljs-number">98</span>, <span class="hljs-number">99</span>]]])</code></pre><p>np.random的随机数函数<br><img src="/img/data/15.png" srcset="/img/loading.gif" alt="图15"><br><img src="/img/data/16.png" srcset="/img/loading.gif" alt="图16">   </p><pre><code class="hljs angelscript"> &gt;&gt;&gt; a = np.random.randint(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))&gt;&gt;&gt; a<span class="hljs-built_in">array</span>([[<span class="hljs-number">168</span>, <span class="hljs-number">133</span>, <span class="hljs-number">164</span>, <span class="hljs-number">186</span>],       [<span class="hljs-number">137</span>, <span class="hljs-number">111</span>, <span class="hljs-number">144</span>, <span class="hljs-number">114</span>],       [<span class="hljs-number">180</span>, <span class="hljs-number">138</span>, <span class="hljs-number">123</span>, <span class="hljs-number">189</span>]])&gt;&gt;&gt; np.random.shuffle(a)&gt;&gt;&gt; a<span class="hljs-built_in">array</span>([[<span class="hljs-number">180</span>, <span class="hljs-number">138</span>, <span class="hljs-number">123</span>, <span class="hljs-number">189</span>],       [<span class="hljs-number">168</span>, <span class="hljs-number">133</span>, <span class="hljs-number">164</span>, <span class="hljs-number">186</span>],       [<span class="hljs-number">137</span>, <span class="hljs-number">111</span>, <span class="hljs-number">144</span>, <span class="hljs-number">114</span>]])&gt;&gt;&gt; np.random.shuffle(a)&gt;&gt;&gt; a<span class="hljs-built_in">array</span>([[<span class="hljs-number">180</span>, <span class="hljs-number">138</span>, <span class="hljs-number">123</span>, <span class="hljs-number">189</span>],       [<span class="hljs-number">137</span>, <span class="hljs-number">111</span>, <span class="hljs-number">144</span>, <span class="hljs-number">114</span>],       [<span class="hljs-number">168</span>, <span class="hljs-number">133</span>, <span class="hljs-number">164</span>, <span class="hljs-number">186</span>]])In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">2</span>]: a = np.random.randint(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">3</span>]: aOut[<span class="hljs-number">3</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>],       [<span class="hljs-number">177</span>, <span class="hljs-number">161</span>, <span class="hljs-number">133</span>, <span class="hljs-number">153</span>],       [<span class="hljs-number">199</span>, <span class="hljs-number">172</span>, <span class="hljs-number">130</span>, <span class="hljs-number">104</span>]])In [<span class="hljs-number">4</span>]: np.random.permutation(a)Out[<span class="hljs-number">4</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">177</span>, <span class="hljs-number">161</span>, <span class="hljs-number">133</span>, <span class="hljs-number">153</span>],       [<span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>],       [<span class="hljs-number">199</span>, <span class="hljs-number">172</span>, <span class="hljs-number">130</span>, <span class="hljs-number">104</span>]])In [<span class="hljs-number">5</span>]: aOut[<span class="hljs-number">5</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>],       [<span class="hljs-number">177</span>, <span class="hljs-number">161</span>, <span class="hljs-number">133</span>, <span class="hljs-number">153</span>],       [<span class="hljs-number">199</span>, <span class="hljs-number">172</span>, <span class="hljs-number">130</span>, <span class="hljs-number">104</span>]])In [<span class="hljs-number">8</span>]: b = np.random.randint(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,(<span class="hljs-number">8</span>,))In [<span class="hljs-number">9</span>]: bOut[<span class="hljs-number">9</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">106</span>, <span class="hljs-number">108</span>, <span class="hljs-number">169</span>, <span class="hljs-number">160</span>, <span class="hljs-number">105</span>, <span class="hljs-number">181</span>, <span class="hljs-number">195</span>, <span class="hljs-number">165</span>])In [<span class="hljs-number">10</span>]: np.random.choice(b,(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>))Out[<span class="hljs-number">10</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">195</span>, <span class="hljs-number">105</span>],       [<span class="hljs-number">108</span>, <span class="hljs-number">106</span>],       [<span class="hljs-number">169</span>, <span class="hljs-number">108</span>]])In [<span class="hljs-number">13</span>]: np.random.choice(b, (<span class="hljs-number">3</span>,<span class="hljs-number">2</span>), replace=False)Out[<span class="hljs-number">13</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">181</span>, <span class="hljs-number">106</span>],       [<span class="hljs-number">195</span>, <span class="hljs-number">165</span>],       [<span class="hljs-number">105</span>, <span class="hljs-number">160</span>]])In [<span class="hljs-number">15</span>]: np.random.choice(b,(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>), p=b/np.sum(b))Out[<span class="hljs-number">15</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">105</span>, <span class="hljs-number">108</span>],       [<span class="hljs-number">181</span>, <span class="hljs-number">169</span>],       [<span class="hljs-number">169</span>, <span class="hljs-number">165</span>]])In [<span class="hljs-number">17</span>]: p=b/np.sum(b)In [<span class="hljs-number">18</span>]: pOut[<span class="hljs-number">18</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">0.08915055</span>, <span class="hljs-number">0.09083263</span>, <span class="hljs-number">0.14213625</span>, <span class="hljs-number">0.13456686</span>, <span class="hljs-number">0.0883095</span> ,       <span class="hljs-number">0.15222876</span>, <span class="hljs-number">0.16400336</span>, <span class="hljs-number">0.13877208</span>])</code></pre><p><img src="/img/data/17.png" srcset="/img/loading.gif" alt="图17">   </p><pre><code class="hljs angelscript">In [<span class="hljs-number">20</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">21</span>]: u = np.random.uniform(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">22</span>]: uOut[<span class="hljs-number">22</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">1.55342812</span>, <span class="hljs-number">9.66284631</span>, <span class="hljs-number">9.35205728</span>, <span class="hljs-number">4.35551918</span>],       [<span class="hljs-number">5.80542662</span>, <span class="hljs-number">3.67044365</span>, <span class="hljs-number">6.99966878</span>, <span class="hljs-number">9.01022477</span>],       [<span class="hljs-number">9.40537026</span>, <span class="hljs-number">8.69429305</span>, <span class="hljs-number">2.4411329</span> , <span class="hljs-number">2.42999845</span>]])In [<span class="hljs-number">23</span>]: n = np.random.normal(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">24</span>]: nOut[<span class="hljs-number">25</span>]:<span class="hljs-built_in">array</span>([[ <span class="hljs-number">8.79560911</span>, <span class="hljs-number">12.64784441</span>, <span class="hljs-number">14.08858882</span>,  <span class="hljs-number">7.24640246</span>],       [<span class="hljs-number">11.0859235</span> , <span class="hljs-number">13.34351634</span>,  <span class="hljs-number">6.48576609</span>, <span class="hljs-number">16.38133251</span>],       [ <span class="hljs-number">8.22931202</span>,  <span class="hljs-number">9.23737404</span>, <span class="hljs-number">12.66597265</span>,  <span class="hljs-number">3.07189174</span>]])</code></pre><h4 id="NumPy的统计函数"><a href="#NumPy的统计函数" class="headerlink" title="NumPy的统计函数"></a>NumPy的统计函数</h4><p><img src="/img/data/18.png" srcset="/img/loading.gif" alt="图18">   </p><pre><code class="hljs angelscript"> In [<span class="hljs-number">26</span>]: a = np.arange(<span class="hljs-number">15</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)In [<span class="hljs-number">27</span>]: aOut[<span class="hljs-number">27</span>]: <span class="hljs-built_in">array</span>([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>],       [ <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],       [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]])In [<span class="hljs-number">29</span>]: np.sum(a)Out[<span class="hljs-number">29</span>]: <span class="hljs-number">105</span>In [<span class="hljs-number">30</span>]: np.mean(a,axis = <span class="hljs-number">1</span>)Out[<span class="hljs-number">30</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">2.</span>,  <span class="hljs-number">7.</span>, <span class="hljs-number">12.</span>])In [<span class="hljs-number">31</span>]: np.mean(a,axis = <span class="hljs-number">0</span>)Out[<span class="hljs-number">31</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">5.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">9.</span>])In [<span class="hljs-number">33</span>]: np.average(a, axis=<span class="hljs-number">0</span>,weights=[<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>])Out[<span class="hljs-number">33</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">2.1875</span>, <span class="hljs-number">3.1875</span>, <span class="hljs-number">4.1875</span>, <span class="hljs-number">5.1875</span>, <span class="hljs-number">6.1875</span>])In [<span class="hljs-number">34</span>]: np.std(a)Out[<span class="hljs-number">34</span>]: <span class="hljs-number">4.320493798938574</span>In [<span class="hljs-number">35</span>]: np.var(a)Out[<span class="hljs-number">35</span>]: <span class="hljs-number">18.666666666666668</span></code></pre><p><img src="/img/data/19.png" srcset="/img/loading.gif" alt="图19">   </p><pre><code class="hljs angelscript">In [<span class="hljs-number">38</span>]: b = np.arange(<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)In [<span class="hljs-number">39</span>]: bOut[<span class="hljs-number">39</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>],       [<span class="hljs-number">10</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">6</span>],       [ <span class="hljs-number">5</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">1</span>]])In [<span class="hljs-number">40</span>]: np.max(b)Out[<span class="hljs-number">40</span>]: <span class="hljs-number">15</span>In [<span class="hljs-number">41</span>]: np.argmax(b)Out[<span class="hljs-number">41</span>]: <span class="hljs-number">0</span>In [<span class="hljs-number">42</span>]: np.unravel_index(np.argmax(b), b.shape)Out[<span class="hljs-number">42</span>]: (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)In [<span class="hljs-number">43</span>]: np.ptp(b)Out[<span class="hljs-number">43</span>]: <span class="hljs-number">14</span>In [<span class="hljs-number">45</span>]: np.median(b)Out[<span class="hljs-number">45</span>]: <span class="hljs-number">8.0</span></code></pre><h4 id="NumPy的梯度函数"><a href="#NumPy的梯度函数" class="headerlink" title="NumPy的梯度函数"></a>NumPy的梯度函数</h4><p><img src="/img/data/20.png" srcset="/img/loading.gif" alt="图20"><br>梯度：连续值之间的变化率，即斜率。<br>XY坐标轴中连续三个X坐标对应的Y轴值：a, b, c， 其中b的梯度是（c-a）/2  </p><pre><code class="hljs angelscript">In [<span class="hljs-number">46</span>]: c = np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">20</span>,(<span class="hljs-number">5</span>))In [<span class="hljs-number">47</span>]: cOut[<span class="hljs-number">47</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">13</span>, <span class="hljs-number">13</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">11</span>])In [<span class="hljs-number">49</span>]: np.gradient(c)Out[<span class="hljs-number">49</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">0.</span> , <span class="hljs-number">-4.5</span>, <span class="hljs-number">-4.</span> ,  <span class="hljs-number">3.5</span>,  <span class="hljs-number">6.</span> ])In [<span class="hljs-number">50</span>]: d = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>, (<span class="hljs-number">5</span>))In [<span class="hljs-number">51</span>]: dOut[<span class="hljs-number">51</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">13</span>, <span class="hljs-number">10</span>,  <span class="hljs-number">1</span>])In [<span class="hljs-number">52</span>]: np.gradient(d)Out[<span class="hljs-number">52</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">1.</span>,  <span class="hljs-number">0.</span>, <span class="hljs-number">-2.</span>, <span class="hljs-number">-6.</span>, <span class="hljs-number">-9.</span>])In [<span class="hljs-number">56</span>]: e = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">50</span> ,(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>))In [<span class="hljs-number">57</span>]: eOut[<span class="hljs-number">57</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">42</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">25</span>,  <span class="hljs-number">0</span>, <span class="hljs-number">23</span>],       [<span class="hljs-number">35</span>, <span class="hljs-number">18</span>, <span class="hljs-number">30</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>],       [<span class="hljs-number">15</span>, <span class="hljs-number">43</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">19</span>, <span class="hljs-number">43</span>]])In [<span class="hljs-number">59</span>]: np.gradient(e)Out[<span class="hljs-number">59</span>]: [<span class="hljs-built_in">array</span>([[ <span class="hljs-number">-7.</span> ,  <span class="hljs-number">13.</span> ,   <span class="hljs-number">5.</span> ,   <span class="hljs-number">6.</span> , <span class="hljs-number">-17.</span> ],        [<span class="hljs-number">-13.5</span>,  <span class="hljs-number">19.</span> , <span class="hljs-number">-10.</span> ,   <span class="hljs-number">9.5</span>,  <span class="hljs-number">10.</span> ],   #最外层维度的梯度值        [<span class="hljs-number">-20.</span> ,  <span class="hljs-number">25.</span> , <span class="hljs-number">-25.</span> ,  <span class="hljs-number">13.</span> ,  <span class="hljs-number">37.</span> ]]), <span class="hljs-built_in">array</span>([[<span class="hljs-number">-37.</span> ,  <span class="hljs-number">-8.5</span>,  <span class="hljs-number">-2.5</span>,  <span class="hljs-number">-1.</span> ,  <span class="hljs-number">23.</span> ],        [<span class="hljs-number">-17.</span> ,  <span class="hljs-number">-2.5</span>,  <span class="hljs-number">-6.</span> , <span class="hljs-number">-12.</span> ,   <span class="hljs-number">0.</span> ],   #第二层维度的梯度        [ <span class="hljs-number">28.</span> ,  <span class="hljs-number">-5.</span> , <span class="hljs-number">-12.</span> ,  <span class="hljs-number">19.</span> ,  <span class="hljs-number">24.</span> ]])]</code></pre>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>numpy</tag>
      
      <tag>matplotlib</tag>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫（二）</title>
    <link href="/2020/02/20/%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/02/20/%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>regular expression regex  RE<br>正则表达式是用来简洁表达一组字符串的表达式<br>优点是简洁<br><img src="/img/Crawler/22.png" srcset="/img/loading.gif" alt="图22"><br>是一种通用的字符串表达框架<br>简洁表达一组字符串的表达式<br>针对字符串表达“简洁”和“特征”思想的工具<br>判断字符串的特征归属<br>用处<br>表达文本类型的特征（病毒、入侵）<br>同时查找或替换一组字符串<br>匹配字符串的全部或部分<br>使用<br>编译：将符合正则表达式语法的字符串转换成正则表达式特征<br>语法<br>正则表达式是由字符和操作符组成<br><img src="/img/Crawler/23.png" srcset="/img/loading.gif" alt="图23"><br><img src="/img/Crawler/24.png" srcset="/img/loading.gif" alt="图24"><br>RE库是python的标准库，主要用于字符串的匹配 <code>import re </code><br>正则表达式的表示类型<br><code>raw string </code>类型（原生字符串类型）<br>re库采用raw string类型表示正则表达式，表示为：<code>r &#39;text&#39;</code> 例如<code> r&#39;[1-9]\d{5}&#39;</code><br>原生字符串不包含转义符<br><img src="/img/Crawler/26.png" srcset="/img/loading.gif" alt="图26"><br>re.search(pattern,string,flag=0)<br>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象  </p><ul><li>pattern：正则表达式的字符串或原生字符串表示  </li><li>string：待匹配的字符串  </li><li>flags：正则表达式使用时的控制标记<br><img src="/img/Crawler/27.png" srcset="/img/loading.gif" alt="图27">  <pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>match = re.search(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIT 100081'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> match:<span class="hljs-meta">... </span>    print(match.group(<span class="hljs-number">0</span>))<span class="hljs-comment">#group() 同group（0）就是匹配正则表达式整体结果</span><span class="hljs-meta">... </span><span class="hljs-number">100081</span></code></pre><code>re.match(pattern,string,flags=0)</code><br>从一个字符串的开始位置匹配正则表达式，返回match对象。  </li><li>pattern：正则表达式的字符串或原生字符串表示  </li><li>string：待匹配的字符串  </li><li>flags：正则表达式使用时的控制标记  <pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>match = re.search(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIT 100081'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> match:<span class="hljs-meta">... </span>    print(match.group(<span class="hljs-number">0</span>))<span class="hljs-meta">... </span><span class="hljs-number">100081</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>match = re.match(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BLT 100081'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> match:<span class="hljs-meta">... </span>    match.group[<span class="hljs-number">0</span>]<span class="hljs-meta">... </span><span class="hljs-meta">&gt;&gt;&gt; </span>match = re.match(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'100081 BLT'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> match:<span class="hljs-meta">... </span>    match.group(<span class="hljs-number">0</span>)<span class="hljs-meta">... </span><span class="hljs-string">'100081'</span></code></pre><code>re.findall(pattern,string,flags=0)</code><br>搜索字符串，以列表类型返回所有能匹配的子串  </li><li>pattern：正则表达式的字符串或原生字符串表示  </li><li>string：待匹配的字符串  </li><li>flags：正则表达式使用时的控制标记  <pre><code class="hljs python"> &gt;&gt;&gt; <span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>ls = re.findall(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIL100081 TSU100025'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>ls[<span class="hljs-string">'100081'</span>, <span class="hljs-string">'100025'</span>]</code></pre><code>re.split(pattern,string,maxsplit=0,flags=0)</code><br>将一个字符串按照正则表达式匹配的结果进行分割，返回列表类型  </li><li>pattern：正则表达式的字符串或原生字符串表示  </li><li>string：待匹配的字符串  </li><li>flags：正则表达式使用时的控制标记  </li><li>maxspilt: 最大分割数，剩余部分作为最后一个元素输出  <pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>ls = re.split(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIL100081 TSU100025'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>ls[<span class="hljs-string">'BIL'</span>, <span class="hljs-string">' TSU'</span>, <span class="hljs-string">''</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>ls = re.split(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIL100081 TSU100025'</span>, maxsplit=<span class="hljs-number">1</span>) <span class="hljs-meta">&gt;&gt;&gt; </span>ls[<span class="hljs-string">'BIL'</span>, <span class="hljs-string">' TSU100025'</span>]</code></pre><code>re.finditer(pattern,string,flags=0)</code><br>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象  </li><li>pattern：正则表达式的字符串或原生字符串表示  </li><li>string：待匹配的字符串  </li><li>flags：正则表达式使用时的控制标记<pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> re.finditer(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIT100081 TSU100084'</span>):<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> m:<span class="hljs-meta">... </span>            print(m.group(<span class="hljs-number">0</span>))<span class="hljs-meta">... </span><span class="hljs-number">100081</span><span class="hljs-number">100084</span></code></pre><code>re.sub(pattern,repl,string,count=0,flags=0)</code><br>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</li><li>pattern：正则表达式的字符串或原生字符串表示</li><li>repl: 替换字符串的字符串</li><li>string：待匹配的字符串</li><li>count：匹配的最大替换次数</li><li>flags：正则表达式使用时的控制标记<pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>re,sub(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">':zipcode'</span>, <span class="hljs-string">'BLT100081 TSU100084'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>re.sub(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">':zipcode'</span>, <span class="hljs-string">'BLT100081 TSU100084'</span>)<span class="hljs-string">'BLT:zipcode TSU:zipcode'</span></code></pre><img src="/img/Crawler/28.png" srcset="/img/loading.gif" alt="图28"><br><code>egex = re.compile(pattern,flags=0)</code><br>将正则表达式的字符串形式编译成正则表达式对象  </li><li>pattern：正则表达式的字符串或原生字符串表示  </li></ul><p>*flags ：正则表达式使用时的控制标记<br>RE库的match对象  </p><pre><code class="hljs python">RE库的match对象  ﻿&gt;&gt;&gt; <span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>match = re.search(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BLT 100081'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> match:<span class="hljs-meta">... </span>    print(match.group(<span class="hljs-number">0</span>))<span class="hljs-meta">... </span><span class="hljs-number">100081</span><span class="hljs-meta">&gt;&gt;&gt; </span>typr(match)<span class="hljs-meta">&gt;&gt;&gt; </span>type(match)&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">_sre</span>.<span class="hljs-title">SRE_Match</span>'&gt;</span></code></pre><p><img src="/img/Crawler/29.png" srcset="/img/loading.gif" alt="图29"><br><img src="/img/Crawler/30.png" srcset="/img/loading.gif" alt="图30"> </p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>m = re.search(<span class="hljs-string">r'[1-9]\d'</span>, <span class="hljs-string">'BIT100081 TSU100084'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>m.string<span class="hljs-string">'BIT100081 TSU100084'</span><span class="hljs-meta">&gt;&gt;&gt; </span>m.rere.compile(<span class="hljs-string">'[1-9]\\d'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>m.pos<span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span>m.endpos<span class="hljs-number">19</span><span class="hljs-meta">&gt;&gt;&gt; </span>m.end()<span class="hljs-number">5</span><span class="hljs-meta">&gt;&gt;&gt; </span>m.start()<span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span>m.span()(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)</code></pre><p>RE库的贪婪匹配和最小匹配 </p><pre><code class="hljs awk">match = re.search(<span class="hljs-string">r'PY.*N'</span>, <span class="hljs-string">'PYANBNCNDN'</span> match.group(<span class="hljs-number">0</span>) <span class="hljs-comment">#re库默认采用贪婪匹配，即输出匹配最长的子串</span>match = re.search(<span class="hljs-string">r'PY.*？N'</span>, <span class="hljs-string">'PYANBNCNDN'</span>) <span class="hljs-comment">#输出最小的匹配</span></code></pre><p><img src="/img/Crawler/31.png" srcset="/img/loading.gif" alt="图31">  </p><h4 id="淘宝商店比价定向爬虫"><a href="#淘宝商店比价定向爬虫" class="headerlink" title="淘宝商店比价定向爬虫"></a>淘宝商店比价定向爬虫</h4><p>功能描述<br>目标：获取淘宝搜索页面的信息，提取其中的商品名称和价格。<br>理解：<br>淘宝的搜索接口<br>翻页的处理<br>技术路线：requests-re   </p><p>程序的结构设计<br>步骤1：提交商品搜索请求，循环获取页面<br>步骤2：对于每个页面，提取商品名称和价格信息<br>步骤3：将信息输出到屏幕上  </p><pre><code class="hljs python"><span class="hljs-comment">#CrowTaobaoPrice.py</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> re <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHTMLText</span><span class="hljs-params">(url)</span>:</span>    <span class="hljs-keyword">try</span>:        r = requests.get(url, timeout=<span class="hljs-number">30</span>)        r.raise_for_status()        r.encoding = r.apparent_encoding        <span class="hljs-keyword">return</span> r.text    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parsePage</span><span class="hljs-params">(ilt, html)</span>:</span>    <span class="hljs-keyword">try</span>:        plt = re.findall(<span class="hljs-string">r'\"view_price\"\:\"[\d\.]*\"'</span>,html)        tlt = re.findall(<span class="hljs-string">r'\"raw_title\"\:\".*?\"'</span>,html)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(plt)):            price = eval(plt[i].split(<span class="hljs-string">':'</span>)[<span class="hljs-number">1</span>])            title = eval(tlt[i].split(<span class="hljs-string">':'</span>)[<span class="hljs-number">1</span>])            ilt.append([price , title])    <span class="hljs-keyword">except</span>:        print(<span class="hljs-string">""</span>) <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printGoodsList</span><span class="hljs-params">(ilt)</span>:</span>    tplt = <span class="hljs-string">"&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;"</span>    print(tplt.format(<span class="hljs-string">"序号"</span>, <span class="hljs-string">"价格"</span>, <span class="hljs-string">"商品名称"</span>))    count = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> ilt:        count = count + <span class="hljs-number">1</span>        print(tplt.format(count, g[<span class="hljs-number">0</span>], g[<span class="hljs-number">1</span>]))         <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    goods = <span class="hljs-string">'火影忍者'</span>    depth = <span class="hljs-number">3</span>    start_url = <span class="hljs-string">'https://s.taobao.com/search?spm=a21bo.2017.201867-links-7.37.5af911d9AriixI&amp;q='</span> + goods    infoList = []    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(depth):        <span class="hljs-keyword">try</span>:            url = start_url + <span class="hljs-string">'&amp;s='</span> + str(<span class="hljs-number">44</span>*i)            html = getHTMLText(url)            parsePage(infoList, html)        <span class="hljs-keyword">except</span>:            <span class="hljs-keyword">continue</span>    printGoodsList(infoList)     main()</code></pre><h4 id="股票数据定向爬虫"><a href="#股票数据定向爬虫" class="headerlink" title="股票数据定向爬虫"></a>股票数据定向爬虫</h4><p>目标：获取上交所和深交所所有股票的名称和交易信息<br>输出：保存到文件中<br>技术路线：requests-bs4-re<br>选取原则：股票信息静态存在于HTML页面中，非js代码生成，没有robots协议限制<br>选取方法：浏览器F12，源代码查看等<br>选取心态：不要纠结于某个网站，多找信息源尝试<br>程序的结构设计<br>步骤1：从东方财富网获取股票列表<br>步骤2：根据股票列表逐个到百度股票获取个股信息<br>步骤3：将结果存储到文件  </p><pre><code class="hljs python"><span class="hljs-comment">#CrawBaiduStocksB.py</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<span class="hljs-keyword">import</span> traceback<span class="hljs-keyword">import</span> re <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHTMLText</span><span class="hljs-params">(url, code=<span class="hljs-string">"utf-8"</span>)</span>:</span>    <span class="hljs-keyword">try</span>:        r = requests.get(url)        r.raise_for_status()        r.encoding = code        <span class="hljs-keyword">return</span> r.text    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getStockList</span><span class="hljs-params">(lst, stockURL)</span>:</span>    html = getHTMLText(stockURL, <span class="hljs-string">"GB2312"</span>)    soup = BeautifulSoup(html, <span class="hljs-string">'html.parser'</span>)     a = soup.find_all(<span class="hljs-string">'a'</span>)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:        <span class="hljs-keyword">try</span>:            href = i.attrs[<span class="hljs-string">'href'</span>]          <span class="hljs-comment">#&lt;a&gt; 标签的 href 属性用于指定超链接目标的 URL</span>            lst.append(re.findall(<span class="hljs-string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="hljs-number">0</span>])        <span class="hljs-keyword">except</span>:            <span class="hljs-keyword">continue</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getStockInfo</span><span class="hljs-params">(lst, stockURL, fpath)</span>:</span>    count = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> stock <span class="hljs-keyword">in</span> lst:        url = stockURL + stock + <span class="hljs-string">".html"</span>        html = getHTMLText(url)        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">if</span> html==<span class="hljs-string">""</span>:                <span class="hljs-keyword">continue</span>            infoDict = &#123;&#125;            soup = BeautifulSoup(html, <span class="hljs-string">'html.parser'</span>)            stockInfo = soup.find(<span class="hljs-string">'div'</span>,attrs=&#123;<span class="hljs-string">'class'</span>:<span class="hljs-string">'stock-bets'</span>&#125;)             name = stockInfo.find_all(attrs=&#123;<span class="hljs-string">'class'</span>:<span class="hljs-string">'bets-name'</span>&#125;)[<span class="hljs-number">0</span>]            infoDict.update(&#123;<span class="hljs-string">'股票名称'</span>: name.text.split()[<span class="hljs-number">0</span>]&#125;)                         keyList = stockInfo.find_all(<span class="hljs-string">'dt'</span>)            valueList = stockInfo.find_all(<span class="hljs-string">'dd'</span>)            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(keyList)):                key = keyList[i].text                val = valueList[i].text                infoDict[key] = val                         <span class="hljs-keyword">with</span> open(fpath, <span class="hljs-string">'a'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:                f.write( str(infoDict) + <span class="hljs-string">'\n'</span> )                count = count + <span class="hljs-number">1</span>                print(<span class="hljs-string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="hljs-number">100</span>/len(lst)),end=<span class="hljs-string">""</span>)        <span class="hljs-keyword">except</span>:            count = count + <span class="hljs-number">1</span>            print(<span class="hljs-string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="hljs-number">100</span>/len(lst)),end=<span class="hljs-string">""</span>)print(<span class="hljs-string">'*'</span>,end = <span class="hljs-string">' '</span>)            <span class="hljs-comment">#end值为空格</span>            <span class="hljs-comment">#print('*',end = '')#end值为空字符串</span>            <span class="hljs-comment">#print('*',end = '')#end值为空字符串</span>            <span class="hljs-comment">#print('')#end值为默认值（换行\n）</span>            <span class="hljs-comment">#print('*',end = '1')#end值为字符串‘1’</span>            <span class="hljs-comment">#print('*',end = '12')#end值为字符串‘12’</span>            <span class="hljs-keyword">continue</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    stock_list_url = <span class="hljs-string">'https://quote.eastmoney.com/stocklist.html'</span>    stock_info_url = <span class="hljs-string">'https://gupiao.baidu.com/stock/'</span>    output_file = <span class="hljs-string">'D:/BaiduStockInfo.txt'</span>    slist=[]    getStockList(slist, stock_list_url)    getStockInfo(slist, stock_info_url, output_file) main()</code></pre><h3 id="Scrapy-框架与实例"><a href="#Scrapy-框架与实例" class="headerlink" title="Scrapy 框架与实例"></a>Scrapy 框架与实例</h3><p>Scrapy是功能强大的爬虫框架<br>爬虫框架是实现爬虫功能的一个软件结构和功能组件集合<br>爬虫框架是一个半成品，能够帮助用户实现专业网络爬虫<br>Scrapy爬虫框架结构：<br><img src="/img/Crawler/32.png" srcset="/img/loading.gif" alt="图32"><br><code>Downloader Middleware</code><br>目的：实施Engine、Scheduler和Downlaoder之间进行用户可配置的控制<br>功能：修改、丢弃、新增请求或者响应<br><code>Spider</code>（用户主要编写模块）<br>解析Downloader返回的响应（Response）<br>产生爬取项（scrapyed item）<br>产生额外的爬取请求（Requests）<br><code>Item Pipelines</code>（需要用户自己编写代码）<br>以流水线方式处理Spider产生的爬取项<br>由一组操作顺序组成，类似流水线，每个操作是一个Item Pipeline类型<br>可能操作包括：清理、检验和查重爬取项中的HTML数据、将数据存储到数据库<br><code>Spider Middleware</code><br>目的：对请求和爬取项的再处理<br>功能：修改、丢弃、新增请求或者爬取项<br>用户可以编写配置代码<br><img src="/img/Crawler/33.png" srcset="/img/loading.gif" alt="图33"><br>Scrapy命令行格式：<br><code>&gt;scrapy&lt;command&gt;[options][args]</code><br><img src="/img/Crawler/34.png" srcset="/img/loading.gif" alt="图34"><br>产生步骤：  </p><ol><li>建立一个Scapy爬虫工程  </li><li>在工程中产生一个Scrapy爬虫  </li><li>配置产生的spider爬虫  </li><li>运行爬虫，获取网页  <pre><code class="hljs livecodeserver">oot@liu-PC:/home/liu/Documents/learn<span class="hljs-comment"># scrapy startproject scrapydemo</span>New Scrapy project <span class="hljs-string">'scrapydemo'</span>, <span class="hljs-keyword">using</span> template <span class="hljs-built_in">directory</span> <span class="hljs-string">'/usr/lib/python3/dist-packages/scrapy/templates/project'</span>, created <span class="hljs-keyword">in</span>: /home/liu/Documents/learn/scrapydemoYou can <span class="hljs-built_in">start</span> your <span class="hljs-keyword">first</span> spider <span class="hljs-keyword">with</span>: cd scrapydemo scrapy genspider example example.comroot@liu-PC:/home/liu/Documents/learn<span class="hljs-comment"># cd scrapydemo/</span>root@liu-PC:/home/liu/Documents/learn/scrapydemo<span class="hljs-comment"># scrapy genspider demo python123.io</span>Created spider <span class="hljs-string">'demo'</span> <span class="hljs-keyword">using</span> template <span class="hljs-string">'basic'</span> <span class="hljs-keyword">in</span> module: scrapydemo.spiders.demo﻿​</code></pre><pre><code class="hljs python"> -*- coding: utf<span class="hljs-number">-8</span> -*-<span class="hljs-keyword">import</span> scrapy<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span>    name = <span class="hljs-string">'demo'</span>    <span class="hljs-comment">#allowed_domains = ['python123.io']</span>    start_urls = [<span class="hljs-string">'http://python123.io/ws/demo.html'</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span>        fname = response.url.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>]        <span class="hljs-keyword">with</span> open(fname, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> f:            f.write(response.body)        self.log(<span class="hljs-string">'Saved file %s.'</span> % name)</code></pre><code>scrapy crawl  demo </code>运行爬虫<br>parse()用于处理响应，解析内容形成字典，发现新的URL爬取请求</li></ol><h4 id="Yield关键字"><a href="#Yield关键字" class="headerlink" title="Yield关键字"></a>Yield关键字</h4><p>生成器是一个不断产生值的函数<br>包含yield语句的函数是一个生成器<br>生成器每次产生一个值（yield语句），函数被冻结，被唤醒后再产生一个值   </p><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen</span><span class="hljs-params">(n)</span></span><span class="hljs-symbol">:</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n)<span class="hljs-symbol">:</span>        <span class="hljs-keyword">yield</span> i**<span class="hljs-number">2</span>        <span class="hljs-comment">#产生一个小于n的所有整数的平方值</span></code></pre><p>生成器相比一次列出所有内容的优势<br>更节省存储空间<br>响应更迅速<br>使用更灵活  </p><p>Scrapy爬虫的使用步骤：<br>步骤1：创建一个工程和Spider模板<br>步骤2：编写Spider<br>步骤3：编写Item Pipeline<br>步骤4：优化配置策略  </p><p>爬虫的数据类型：Request 类、Response类、Item类<br>Request类 <code>class scrapy.http.Request() </code><br>Request对象表示一个HTTP请求<br>由spider生成，由Downlaoder执行  </p><ul><li>url               Request对应请求的URL地址</li><li>method       对应的请求方法， ‘GET’ ‘POST’等</li><li>header        字典类型风格的请求头</li><li>body           请求内容主体，字符串类型</li><li>meta           用户添加的扩展信息，在Scrapy内部模块间传递信息使用  </li><li>copy()         复制该请求  </li></ul><p><code>Response类 class scrapy.http.Response()</code><br>Response对象表示一个HTTP响应<br>由Downlaoder生成，由spider处理  </p><ul><li>url               Request对应请求的URL地址</li><li>status         HTTP状态码，默认是200</li><li>header       Response对应的头部信息</li><li>body           Response对应的内容主体信息，字符串类型</li><li>flag             一组标记</li><li>request       产生Response类型对应的Request对象</li><li>copy()         复制该响应</li></ul><p>Item类 <code>class scrapy.item.Item()</code><br>Item对象表示一个从HTML页面中提取的信息内容<br>由Spider生成，由Item Pipeline处理<br>Item类似于字典类型，可以按照字典类型操作  </p><p>Scrapy爬虫支持多种HTML信息提取方法<br>Beautiful Soup<br>Ixml<br>re<br>XPath Selector<br>CSS Selector  </p><p><code>&lt;HTML&gt;.css(&#39;a::attr(href)&#39;).extract </code>  # a:标签名称  href：标签属性</p><h4 id="股票数据Scrapy爬虫实例"><a href="#股票数据Scrapy爬虫实例" class="headerlink" title="股票数据Scrapy爬虫实例"></a>股票数据Scrapy爬虫实例</h4><p>功能描述：<br>技术路线：Scrapy<br>目标：获取上交所和深交所所有股票的名称和交易信息<br>输出：保存到文件中   </p><p>获取股票列表：<br>东方财富网：<a href="http://quote.eastmoney.com/stocklist.html" target="_blank" rel="noopener">http://quote.eastmoney.com/stocklist.html</a><br>获取个股信息：<br>百度股票： <a href="https://gupiao.baidu.com/stock/" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/</a><br>单个股票：<a href="https://gupiao.baidu.com/stock/sz002439.html" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/sz002439.html</a><br>步骤：<br>1.建立工程和Spider模板  </p><pre><code class="hljs armasm"><span class="hljs-symbol">scrapy</span> startproject <span class="hljs-keyword">BaiduStocks</span><span class="hljs-keyword">cd </span><span class="hljs-keyword">BaiduStocks</span><span class="hljs-keyword">scrapy </span>genspider stocks <span class="hljs-keyword">baidu.com</span><span class="hljs-keyword">进一步修改spider/stocks.py文件</span></code></pre><p>2.编写Spider<br>配置stocks.py文件<br>修改对返回页面的处理<br>修改对新增URL爬取请求的处理  </p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> scrapy<span class="hljs-keyword">import</span> re<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StocksSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span>    name = <span class="hljs-string">'stocks'</span>    start_urls = [<span class="hljs-string">'http://quote.eastmoney.com/stocklist.html'</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span>        <span class="hljs-keyword">for</span> href <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'a::attr(href)'</span>).extract():            <span class="hljs-keyword">try</span>:                stock = re.findall(<span class="hljs-string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="hljs-number">0</span>]                url = <span class="hljs-string">'https://gupiao.baidu.com/stock'</span> + stock +<span class="hljs-string">'.html'</span>                <span class="hljs-keyword">yield</span> scrapy.Request(url, callback=self.parse_stock)<span class="hljs-comment">#回调函数，异步进程</span>            <span class="hljs-keyword">except</span>:                <span class="hljs-keyword">continue</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_stock</span><span class="hljs-params">(self,response)</span>:</span>        infoDict = &#123;&#125;        stockInfo = response.css(<span class="hljs-string">'.stock-bets'</span>)        name = stockInfo.css(<span class="hljs-string">'.bets-name'</span>).extract()[<span class="hljs-number">0</span>]        keyList = stockInfo.css(<span class="hljs-string">'dt'</span>).extract()        valueList = stockInfo.css(<span class="hljs-string">'dd'</span>).extract()        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(keyList)):            key = re.findall(<span class="hljs-string">r'&gt;.*&lt;/d&gt;'</span>, keyList[i])[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>:<span class="hljs-number">-5</span>]            <span class="hljs-keyword">try</span>:                val = re.findall(<span class="hljs-string">r'\d+\.?.*&lt;/dd&gt;'</span>, valueList[i])[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>:<span class="hljs-number">-5</span>]            <span class="hljs-keyword">except</span>:                val = <span class="hljs-string">'--'</span>            infoDict[key]=val        infoDict.update(            &#123;<span class="hljs-string">'股票名称'</span>:re.findall(<span class="hljs-string">'\s.*\('</span>,name)[<span class="hljs-number">0</span>].split()[<span class="hljs-number">0</span>] +\            re.findall(<span class="hljs-string">'\&gt;.*\&lt;'</span>, name)[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>]&#125;)        <span class="hljs-keyword">yield</span> infoDict</code></pre><p>3.编写ITEM Pipelines<br>配置pipelines.py文件<br>定义对爬取项（Scraped Item）的处理类  </p><pre><code class="hljs ruby"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment"># Define your item pipelines here</span><span class="hljs-comment">#</span><span class="hljs-comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="hljs-comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaidustocksPipeline</span>(<span class="hljs-title">object</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_item</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, item, spider)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-keyword">return</span> item<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaidustocksInfoPipeline</span>(<span class="hljs-title">object</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_spider</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,spider)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-keyword">self</span>.f = open(<span class="hljs-string">'BaiduStockInfo.txt'</span>, <span class="hljs-string">'w'</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close_spider</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,spider)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-keyword">self</span>.f.close()        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_item</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, item, spider)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-symbol">try:</span>            line = str(dict(item)) + <span class="hljs-string">'\n'</span>            <span class="hljs-keyword">self</span>.f.write(line)        <span class="hljs-symbol">except:</span>            pass        <span class="hljs-keyword">return</span> item</code></pre><p>配置ITEM_PIPELINES选项  </p><pre><code class="hljs ebnf"><span class="hljs-attribute">ITEM_PIPELINES</span> = &#123;    <span class="hljs-string">'BaiduStocks.pipelines.BaidustocksInfoPipeline'</span>: 300,&#125;</code></pre><h4 id="优化实例"><a href="#优化实例" class="headerlink" title="优化实例"></a>优化实例</h4><p>配置并发连接选项<br><img src="/img/Crawler/35.png" srcset="/img/loading.gif" alt="图35"></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Crawler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫（一）</title>
    <link href="/2020/02/15/%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/02/15/%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/Crawler/01.png" srcset="/img/loading.gif" alt="图1">  </p><h3 id="集成开发系统"><a href="#集成开发系统" class="headerlink" title="集成开发系统"></a>集成开发系统</h3><p>文本工具类<br>IDLE是自带的，入门级<br>Sublime Text<br>专为程序员设计，提高编程体验<br>Wine<br>收费，适合多人开发<br>PyCharm<br>简单、集成度较高<br>Canopy<br>公司维护<br>Anaconda<br>开源免费，数据分析，科学计算  </p><h3 id="Python网络爬虫与信息提取"><a href="#Python网络爬虫与信息提取" class="headerlink" title="Python网络爬虫与信息提取"></a>Python网络爬虫与信息提取</h3><p>equwsts库的安装<br>Requests库的7个主要方法  </p><ul><li><code>requests.request()</code>  构造一个请求，支撑以下各方法的基础方法  </li><li><code>requests.get()</code>         获取HTML网页的主要方法，对应于HTTP的GET  *****  </li><li><code>requests.head()</code>      获取HTML网页头信息的方法，对应于HTTP的HEAD  *****  </li><li><code>requests.post()</code>       向HTML网页提交POST请求的方法，对应于HTTP的POST  </li><li><code>requests.put()</code>         向HTML网页提交PUT请求的方法，对应于HTTP的PUT  </li><li><code>requests.patch()</code>     向HTML网页提交局部修改请求，对应于HTTP的PATCH  </li><li><code>requests.delete()</code>    向HTML页面提交删除请求，对应于HTTP的DELETE  </li></ul><p>requests.request()<br><code>requests.get(url)</code> 返回一个包含服务器资源的Reponse对象（包括爬取返回的所有对象），构造一个向服务器请求资源的request对象<br>Response对象的属性  </p><ul><li><code>r.status_code</code>     HTTP请求的返回状态，200表示连接成功，404表示失败  </li><li><code>r.text</code>                   HTTP响应内容的字符串形式，即，url对应的页面内容  </li><li><code>r.encoding</code>          从HTTP header中猜测的响应内容编码方式  </li><li><code>r.apparent_encoding</code>         从内容中分析出响应内容的编码方式（备选编码方式）  </li><li><code>r.content</code>             HTTP响应内容的二进制形式  </li></ul><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span>&gt; import requests<span class="hljs-meta">&gt;&gt;</span>&gt; r = requests.get(<span class="hljs-string">"http://www.baidu.com"</span>) <span class="hljs-meta">&gt;&gt;</span>&gt; r.status_code <span class="hljs-number">200</span> <span class="hljs-meta">&gt;&gt;</span>&gt; r.encoding = <span class="hljs-string">'utf-8'</span> <span class="hljs-meta">&gt;&gt;</span>&gt; r.text﻿​</code></pre><p><code>requests.request(url,  **kwarges)</code><br>url: 拟获取页面的url链接<br>**kwarge: 12个控制访问的参数:<br>paras字典或者字节序列，作为参数增加URL中<br>data 字典、字节序列或文件对象，作为Request的内容<br>json JSON格式的数据，作为Request的内容<br>headers 字典，HTTP定制头（模拟浏览器）<br>cookies 字典或CookieJar， Request中的cookie<br>auth  元组，支持HTTP认证功能<br>files  字典类型，传输文件<br>timeout  设定超时时间，秒为单位<br>proxies 字典类型，设定访问服务器，可以增加登录认证<br>allow_redirects: True/False, 默认为True，重定向开关<br>stream: True/False ，默认为True，获取内容立即下载开关<br>verify True、False，默认为True，认证SSL证书开关<br>cert 本地SSL证书的路径<br><code>requests.head(url. **kwargs) </code><br><code>r = requests.head(&#39;http://httpbin.org/get&#39;&#39;)</code><br>可以用很少的流量获取网络的概要信息<br><code>requests.post(url, data=None,json=None,**kwargs)</code><br><code>payload = {&#39;key1&#39; : &#39;value1&#39;, &#39;key2&#39; : &#39;value2&#39;}</code><br><code>r = requests.post(&#39;http://httpbin.org/post&#39;, data = payload)</code><br>向URL POST一个字典，自动编码为form（表单）<br>如果不提交键对，只提交字符串，则会向ULR POST一个字符串，自动编码为data<br><code>requests.put(url, data=None,**kwargs)</code><br><code>requests.delete(url, **kwargs)</code><br><code>requests.get(url, params=None, **kwargs)</code>  </p><h3 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h3><p>理解requests库的异常  </p><ul><li><code>requests,ConnectionError</code>        网络连接错误异常，如DNS查询失败、拒绝连接等  </li><li><code>requests.HTTPError</code>  HTTP错误异常  </li><li><code>requests.URLRequired </code>            URL缺失异常  </li><li><code>requests.TooManyRedircts</code>       超过最大重定向次数，产生重定向异常  </li><li><code>requests.ConnectionTimeout</code>    连接远程服务器超时异常  </li><li><code>requests.Timeout</code>                      请求URL超时，产生超时异常  <pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHTMLText</span><span class="hljs-params">(url)</span>:</span>    <span class="hljs-keyword">try</span>:        r = requests.get(url, timeout=<span class="hljs-number">30</span>)        r.raise_for_status() <span class="hljs-comment">#如果状态不是200，引发HTTPError异常(有效的测试连接返回错误)</span>        r.encoding = r.apparent_encoding        <span class="hljs-keyword">return</span> r.text    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">"产生异常"</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    url = <span class="hljs-string">"http://www.baidu.com"</span>    print(getHTMLText(url))</code></pre><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3>HTTP, Hypertext Transfer Protocol, 超文本传输协议。<br>HTTP是基于“请求与响应” 模式的、无状态的应用层协议。<br>HTTP URL实例：<br><a href="http://www.bit.edu.cn/" target="_blank" rel="noopener">http://www.bit.edu.cn</a><br><a href="http://220.181.111.188/duty" target="_blank" rel="noopener">http://220.181.111.188/duty</a><br>HTTP URL的理解：URL是通过HTTP协议存储资源的Internet路径，一个URL对应一个数据资源<br>HTTP协议对资源的操作<br>GET            请求获得URL位置的资源<br>HEAD         请求获取URL位置资源的响应信息报告，即获得该资源的头部信息<br>POST         请求向URL位置资源后附加新的数据<br>PUT            请求向URL位置存储一个资源，覆盖原URL位置的资源<br>PATCH        请求局部更新URL位置的资源，即改变该处资源的部分内容<br>DELETE    请求删除URL位置存储的资源  </li></ul><p>理解PATCH和PUT的区别：<br>假设URL位置有一组数据UserInfo， 包括UserID、UserName等20个字段。<br>需求：用户修改了UserName，其他不变。<br>*采用PATCH，仅向URL提交UserName的局部更新请求<br>*采用PUT，必须将所有20个字段一并提交到URL，未提交的字段被删除<br>PATCH的最主要好处是节省带宽。  </p><h3 id="网络爬虫的尺寸："><a href="#网络爬虫的尺寸：" class="headerlink" title="网络爬虫的尺寸："></a>网络爬虫的尺寸：</h3><pre><code class="hljs asciidoc">-----------------------------------------------------小规模，数据量小  中规模，数据规模较大    大规模，搜索引擎爬取速度不敏感    爬取速度敏感           爬取速度关键Request库       Scrapy库             定制开发-----------------------------------------------------爬取网页 玩转网页  爬取网站，爬取系列网站   爬取全网</code></pre><p>第一个实例，爬取京东商品信息  </p><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">"https://item.jd.com/2967929.html"</span><span class="hljs-keyword">try</span>:    r = requests.<span class="hljs-built_in">get</span>(url)    r.raise_for_status()    r.encoding r.apparaent_encoding    <span class="hljs-built_in">print</span>(r.<span class="hljs-built_in">text</span>[:<span class="hljs-number">1000</span>])except:    <span class="hljs-built_in">print</span>(爬取失败)</code></pre><p> 第二个实例，爬取亚马逊页面信息</p><pre><code class="hljs routeros">import requestsurl = <span class="hljs-string">"http://www.amazon.cn/gp/product/B01MBL5Z3Y"</span>try:    kv = &#123;<span class="hljs-string">'user-agent'</span>:<span class="hljs-string">'Mozilla/5.0'</span>&#125;    r = requests.<span class="hljs-builtin-name">get</span>(url,<span class="hljs-attribute">header</span>=kv)    r.raise_for_status()    r.encoding = r.apparent_encoding    <span class="hljs-builtin-name">print</span>(r.text[1000:2000])except:    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">"爬取失败"</span>)</code></pre><p>第三个实例，百度/360搜索</p><pre><code class="hljs routeros">import requestskeyword  = <span class="hljs-string">"Python"</span>try:    kv = &#123;<span class="hljs-string">'wd'</span>:keyword&#125;    r = requests.<span class="hljs-builtin-name">get</span>(<span class="hljs-string">"http://www.baidu.com/s"</span>, params = kv)    <span class="hljs-builtin-name">print</span>(r.request.url)    r.raise_for_status()    <span class="hljs-builtin-name">print</span>(len(r.text))except:    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">"爬取失败"</span>)</code></pre><p>第四个实例，网络图片的爬取和存储</p><pre><code class="hljs lua">import requestsimport <span class="hljs-built_in">os</span> #路径操作：<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>子库，处理文件路径及信息、进程管理：启动系统中的其他程序、环境参数：获得系统中软硬件信息等环境参数url = <span class="hljs-string">"http://img0.dili360.com/pic/2020/04/29/5ea8e963e9e4f5663028305.jpg"</span>root = <span class="hljs-string">"/home/liu/Pictures/"</span><span class="hljs-built_in">path</span> = root +url.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>] #分割 [<span class="hljs-string">'http:'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">'www.baidu.com'</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'image'</span>, <span class="hljs-string">'123456.jpg'</span>]try:    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(root):   #判断<span class="hljs-built_in">path</span>对应文件或目录是否存在，返回True或False        <span class="hljs-built_in">os</span>.mkdir(root)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(<span class="hljs-built_in">path</span>):        r = requests.get        with <span class="hljs-built_in">open</span>(<span class="hljs-built_in">path</span>, <span class="hljs-string">'wb'</span>) as f: #<span class="hljs-string">'wb'</span>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。            f.<span class="hljs-built_in">write</span>(r.content)            f.<span class="hljs-built_in">close</span>()            <span class="hljs-built_in">print</span>(<span class="hljs-string">"文件保存成功"</span>)    <span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(文件已经存在)except:    <span class="hljs-built_in">print</span>(<span class="hljs-string">"爬取失败"</span>)</code></pre><p>第五个实例，IP地址归属地的自动查询</p><pre><code class="hljs processing"><span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">"http://m.ip138.com/ip.asp?ip="</span><span class="hljs-keyword">try</span>:    r = requests.<span class="hljs-built_in">get</span>(url+<span class="hljs-string">'202.204.80.112'</span>)    r.raise_for_status()    r.encoding = r.apparent_encoding    <span class="hljs-built_in">print</span>(r.<span class="hljs-built_in">text</span>[<span class="hljs-number">-500</span>:])except:    <span class="hljs-built_in">print</span>(<span class="hljs-string">"爬取失败"</span>)</code></pre><h3 id="掌握定向网络数据爬取和网页解析的基本能力"><a href="#掌握定向网络数据爬取和网页解析的基本能力" class="headerlink" title="掌握定向网络数据爬取和网页解析的基本能力"></a>掌握定向网络数据爬取和网页解析的基本能力</h3><h4 id="Beautiful-Soup库的入门和使用"><a href="#Beautiful-Soup库的入门和使用" class="headerlink" title="Beautiful Soup库的入门和使用"></a>Beautiful Soup库的入门和使用</h4><p>演示HTML页面地址：<br><a href="http://python123.io/ws/demo.html" target="_blank" rel="noopener">http://python123.io/ws/demo.html</a>  </p><p>打开网页的源代码（HTML 5.0）</p><pre><code class="hljs coffeescript"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup <span class="hljs-comment">#bs4是一个类</span>soup = BeautifulSoup(<span class="hljs-string">'&lt;p&gt;data&lt;/p&gt;'</span>, <span class="hljs-string">'html.parser'</span>)  <span class="hljs-built_in">print</span>(soup.prettify())</code></pre><p>BeautifulSoup库的基本元素<br><img src="/img/Crawler/02.png" srcset="/img/loading.gif" alt="图2"><br>BeautifulSoup库是解析、遍历、维护“标签树”的功能库<br><img src="/img/Crawler/03.png" srcset="/img/loading.gif" alt="图3"><br>BeautifulSoup库的引用<br>BeautifulSoup库，也叫bs4<br><code>from bs4 import BeautifulSoup</code><br><img src="/img/Crawler/04.png" srcset="/img/loading.gif" alt="图4"><br>这三者是等价的关系</p><pre><code class="hljs lisp">from bs4 import BeautifulSoupsoup = BeautifulSoup(<span class="hljs-string">"&lt;html&gt;data&lt;html&gt;"</span>, <span class="hljs-string">"html.parser"</span>)soup2 = BeautifulSoup(<span class="hljs-name">open</span>(<span class="hljs-string">"/home/liu/Document/demo.htmnl"</span>), html.parser)</code></pre><p>BeaytifulSoup库的解析器  </p><ul><li>bs4的HTML解析器   BeautifulSoup(mk, ‘html.parser’)  安装ps4库  </li><li>lxml 的HTML解析器  BeautifulSoup(mk, ‘lxml’)             pip install lxml  </li><li>lxml 的XML解析器    BeautifulSoup(mk, ‘lxml’)            pip install lxml  </li><li>html5lib的解析器      BeautifulSoup(mk. ‘html5lib’)       pip install html5lib  </li></ul><p>BeautifulSoup 类的基本元素<br>Tag 标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;表明开头和结尾<br>Name  标签的名字  <code>&lt;p&gt;...&lt;/p&gt;</code>的名字是‘p’，格式：<tag>.name<br>Atrributes 标签的属性，字典形式组织，格式：<code>&lt;tag&gt;.attrs</code><br>NavigableString 　标签内非属性字符串，&lt;&gt;…&lt;/.&gt;字符串，格式：<tag>string 可以跨越多个标签形式<br>Comment  标签内字符串的注释部分，一种特殊的Comment类型  </p><pre><code class="hljs vim">&gt;&gt;&gt; from bs4 import BeautifulSoup&gt;&gt;&gt; soup = BeautifulSoup(demo, <span class="hljs-string">"html.parser"</span>)&gt;&gt;&gt; <span class="hljs-keyword">print</span>(soup.prettify())<span class="hljs-symbol">&lt;html&gt;</span> <span class="hljs-symbol">&lt;head&gt;</span>  <span class="hljs-symbol">&lt;title&gt;</span>   This <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">python</span> demo page  &lt;/title&gt; &lt;/head&gt; <span class="hljs-symbol">&lt;body&gt;</span>  &lt;<span class="hljs-keyword">p</span> class=<span class="hljs-string">"title"</span>&gt;   <span class="hljs-symbol">&lt;b&gt;</span>    The demo <span class="hljs-keyword">python</span> introduces several <span class="hljs-keyword">python</span> courses.   &lt;/<span class="hljs-keyword">b</span>&gt;  &lt;/<span class="hljs-keyword">p</span>&gt;  &lt;<span class="hljs-keyword">p</span> class=<span class="hljs-string">"course"</span>&gt;   Python <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> wonderful general-purpose programming <span class="hljs-keyword">language</span>. You can learn Python from novice <span class="hljs-keyword">to</span> professional by tracking the following course<span class="hljs-variable">s:</span>   &lt;<span class="hljs-keyword">a</span> class=<span class="hljs-string">"py1"</span> href=<span class="hljs-string">"http://www.icourse163.org/course/BIT-268001"</span> id=<span class="hljs-string">"link1"</span>&gt;    Basic Python   &lt;/<span class="hljs-keyword">a</span>&gt;   <span class="hljs-built_in">and</span>   &lt;<span class="hljs-keyword">a</span> class=<span class="hljs-string">"py2"</span> href=<span class="hljs-string">"http://www.icourse163.org/course/BIT-1001870001"</span> id=<span class="hljs-string">"link2"</span>&gt;    Advanced Python   &lt;/<span class="hljs-keyword">a</span>&gt;   .  &lt;/<span class="hljs-keyword">p</span>&gt; &lt;/body&gt;&lt;/html&gt;&gt;&gt;&gt; from bs4 import BeautifulSoup &gt;&gt;&gt; soup = BeautifulSoup(demo, <span class="hljs-string">"html.parser"</span>)&gt;&gt;&gt; soup.title<span class="hljs-symbol">&lt;title&gt;</span>This <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">python</span> demo page&lt;/title&gt;&gt;&gt;&gt; <span class="hljs-keyword">tag</span>Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, in <span class="hljs-symbol">&lt;module&gt;</span>NameError: name <span class="hljs-string">'tag'</span> <span class="hljs-keyword">is</span> not defined&gt;&gt;&gt; <span class="hljs-keyword">tag</span> = soup.<span class="hljs-keyword">a</span>&gt;&gt;&gt; <span class="hljs-keyword">tag</span>&lt;<span class="hljs-keyword">a</span> class=<span class="hljs-string">"py1"</span> href=<span class="hljs-string">"http://www.icourse163.org/course/BIT-268001"</span> id=<span class="hljs-string">"link1"</span>&gt;Basic Python&lt;/<span class="hljs-keyword">a</span>&gt;&gt;&gt;&gt; soup.<span class="hljs-keyword">a</span>.name<span class="hljs-string">'a'</span>&gt;&gt;&gt; soup.<span class="hljs-keyword">a</span>.parent.name <span class="hljs-string">'p'</span>&gt;&gt;&gt; soup.<span class="hljs-keyword">p</span>.parent.name<span class="hljs-string">'body'</span>&gt;&gt;&gt; <span class="hljs-keyword">tag</span> = soup.<span class="hljs-keyword">a</span>&gt;&gt;&gt; <span class="hljs-keyword">tag</span>.attrs&#123;<span class="hljs-string">'href'</span>: <span class="hljs-string">'http://www.icourse163.org/course/BIT-268001'</span>, <span class="hljs-string">'id'</span>: <span class="hljs-string">'link1'</span>, <span class="hljs-string">'class'</span>: [<span class="hljs-string">'py1'</span>]&#125;&gt;&gt;&gt; <span class="hljs-keyword">tag</span>.attrs[<span class="hljs-string">'class'</span>][<span class="hljs-string">'py1'</span>]&gt;&gt;&gt; <span class="hljs-keyword">tag</span>.attrs[<span class="hljs-string">'href'</span>]<span class="hljs-string">'http://www.icourse163.org/course/BIT-268001'</span>&gt;&gt;&gt; <span class="hljs-built_in">type</span>(<span class="hljs-keyword">tag</span>.attrs)&lt;class <span class="hljs-string">'dict'</span>&gt;&gt;&gt;&gt; <span class="hljs-built_in">type</span>(<span class="hljs-keyword">tag</span>)&lt;class <span class="hljs-string">'bs4.element.Tag'</span>&gt;&gt;&gt;&gt; soup.<span class="hljs-keyword">a</span>&lt;<span class="hljs-keyword">a</span> class=<span class="hljs-string">"py1"</span> href=<span class="hljs-string">"http://www.icourse163.org/course/BIT-268001"</span> id=<span class="hljs-string">"link1"</span>&gt;Basic Python&lt;/<span class="hljs-keyword">a</span>&gt;&gt;&gt;&gt; soup.<span class="hljs-keyword">a</span>.strong&gt;&gt;&gt; soup.<span class="hljs-keyword">a</span>.<span class="hljs-built_in">string</span><span class="hljs-string">'Basic Python'</span>&gt;&gt;&gt; soup.<span class="hljs-keyword">p</span>&lt;<span class="hljs-keyword">p</span> class=<span class="hljs-string">"title"</span>&gt;<span class="hljs-symbol">&lt;b&gt;</span>The demo <span class="hljs-keyword">python</span> introduces several <span class="hljs-keyword">python</span> courses.&lt;/<span class="hljs-keyword">b</span>&gt;&lt;/<span class="hljs-keyword">p</span>&gt;&gt;&gt;&gt; soup.<span class="hljs-keyword">p</span>.<span class="hljs-built_in">string</span><span class="hljs-string">'The demo python introduces several python courses.'</span>&gt;&gt;&gt; <span class="hljs-built_in">type</span>(soup.<span class="hljs-keyword">p</span>.<span class="hljs-built_in">string</span>)&lt;class <span class="hljs-string">'bs4.element.NavigableString'</span>&gt;&gt;&gt;&gt; newsoup = BeaytifulSoup(<span class="hljs-string">"&lt;b&gt;&lt;!--This is a comment--&gt;&lt;/b&gt;&lt;p&gt;this is not a comment&lt;/p&gt;"</span>, <span class="hljs-string">"html.parser"</span>)Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, in <span class="hljs-symbol">&lt;module&gt;</span>NameError: name <span class="hljs-string">'BeaytifulSoup'</span> <span class="hljs-keyword">is</span> not defined&gt;&gt;&gt; newsoup = BeautifulSoup(<span class="hljs-string">"&lt;b&gt;&lt;!--This is a comment--&gt;&lt;/b&gt;&lt;p&gt;this is not a comment&lt;/p&gt;"</span>, <span class="hljs-string">"html.parser"</span>)&gt;&gt;&gt; newsoup.<span class="hljs-keyword">b</span>.<span class="hljs-built_in">string</span><span class="hljs-string">'This is a comment'</span>&gt;&gt;&gt; <span class="hljs-built_in">type</span>(newsoup.<span class="hljs-keyword">p</span>.<span class="hljs-built_in">string</span>)&lt;class <span class="hljs-string">'bs4.element.NavigableString'</span>&gt;&gt;&gt;&gt; newsoup.<span class="hljs-keyword">p</span>.<span class="hljs-built_in">string</span><span class="hljs-string">'this is not a comment'</span>&gt;&gt;&gt; <span class="hljs-built_in">type</span>(newsoup.<span class="hljs-keyword">p</span>.<span class="hljs-built_in">string</span>)&lt;class <span class="hljs-string">'bs4.element.NavigableString'</span>&gt;</code></pre><p>HTML的基本格式<br><img src="/img/Crawler/05.png" srcset="/img/loading.gif" alt="图5">  </p><ul><li>contents  子节点的列表，将<code>&lt;tag&gt;</code>所有儿子节点存入列表</li><li>children   子节点的迭代类型，与.contents类似，用于循环遍历儿子节点</li><li>descendants   子孙节点的迭代类型，包含所有子孙节点，用于循环遍历<br>标签树的上行遍历  </li><li>parent  节点的父亲标签</li><li>parents   节点先辈标签的迭代类型，用于循环遍历先辈节点<pre><code class="hljs mel">soup = BeautifulSoup(demo, <span class="hljs-string">"html.parser"</span>)<span class="hljs-keyword">for</span> <span class="hljs-keyword">parent</span> <span class="hljs-keyword">in</span> soup.a.parents:    <span class="hljs-keyword">if</span> <span class="hljs-keyword">parent</span> is None:        <span class="hljs-keyword">print</span>(<span class="hljs-keyword">parent</span>)    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">print</span>(<span class="hljs-keyword">parent</span>.name)pbodyhtml[document]</code></pre>标签库的平行遍历  </li><li>next_sibling 返回按照HTML文本顺序的下一个平行节点标签  </li><li>previous_sibling 返回按照HTML文本顺序的上一个平行节点标签 </li><li>.next_siblings 迭代类型，返回按照HTML文本顺序的后续所有平行节点标签  </li><li>.previous_siblings 迭代类型， 返回按照HTML文本顺序的前续所有平行节点标签  </li><li>所有的平行遍历发生在同一个父亲节点之下<pre><code class="hljs bash"><span class="hljs-keyword">for</span> sibling <span class="hljs-keyword">in</span> soup.a.next_siblings:    <span class="hljs-built_in">print</span>(sibling) <span class="hljs-comment">#遍历后续节点</span>    <span class="hljs-keyword">for</span> sibling <span class="hljs-keyword">in</span> soup.a.previous_siblings:    <span class="hljs-built_in">print</span>(sibling)<span class="hljs-comment">#遍历前续节点</span></code></pre>基于bs4库的HTML格式输出<br><img src="/img/Crawler/06.png" srcset="/img/loading.gif" alt="图6"><pre><code class="hljs xml">&gt;&gt;&gt; print(soup.prettify())<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>   This is a python demo page  <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>    The demo python introduces several python courses.   <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"course"</span>&gt;</span>   Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py1"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.icourse163.org/course/BIT-268001"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"link1"</span>&gt;</span>    Basic Python   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   and   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py2"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.icourse163.org/course/BIT-1001870001"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"link2"</span>&gt;</span>    Advanced Python   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   .  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>bs4库的编码<pre><code class="hljs stylus">soup = BeautifulSoup(<span class="hljs-string">"&lt;p&gt;中文&lt;/p&gt;"</span>, <span class="hljs-string">"html, parser"</span>)soup<span class="hljs-selector-class">.p</span>.string<span class="hljs-string">'中文'</span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.p.prettify()</span></span>)&lt;p&gt;中文&lt;p/&gt;</code></pre>信息组织与提取方法<br>信息的标记<br>标记的信息可形成信息组织结构，增加了信息维度<br>标记后的信息可用于通信、存储或展示<br>标记后的结构与信息一样具有重要价值<br><img src="/img/Crawler/07.png" srcset="/img/loading.gif" alt="图7"><br>HTML可以通过预定义的&lt;&gt;…&lt;/&gt;标签形式组织不同类型的信息<br>XML eXtensible Markup Language (基于HTML发展而来)<br><img src="/img/Crawler/08.png" srcset="/img/loading.gif" alt="图8"><br><img src="/img/Crawler/09.png" srcset="/img/loading.gif" alt="图9"><br>JSON javaScript Object Notation<br>有类型的键值对key:value<br><img src="/img/Crawler/10.png" srcset="/img/loading.gif" alt="图10"><br><img src="/img/Crawler/11.png" srcset="/img/loading.gif" alt="图11"><br><img src="/img/Crawler/12.png" srcset="/img/loading.gif" alt="图12"><br>YAML YAML Ain’t Markup Language<br>无类型键值对 key：value<br><img src="/img/Crawler/13.png" srcset="/img/loading.gif" alt="图13"><br><img src="/img/Crawler/14.png" srcset="/img/loading.gif" alt="图14"><br><img src="/img/Crawler/15.png" srcset="/img/loading.gif" alt="图15"><br><img src="/img/Crawler/16.png" srcset="/img/loading.gif" alt="图17"><br>XML 最早的通用信息标记语言，可扩展性好，但繁琐          Internet 上的信息交互与传递<br>JSON 信息有类型，适合程序处理（js），相比XML简洁   移动应用云端和节点的信息通信，无注释<br>YAML 信息无类型，文本信息比例最高，可读性好       各类系统的配置文件，有注释易读  </li></ul><p>信息提取的一般方法<br>方法一：完整解析信息的 标记形式，再提取关键信息<br>XML JSON YAML<br>需要标记解析器  例如：bs4库的标签树遍历<br>优点：信息解析准确<br>缺点：提取过程繁琐，速度慢<br>方法二：无视任何标记形式，直接搜索关键信息<br>对信息的文本查找函数即可<br>优点： 提取过程简洁，速度较快<br>缺点： 提取结果准确性与信息内容相关<br>方法三：融合方法：结合形式解析与搜索方法，提取关键信息<br>XML JSON YAML搜索<br>需要标记解析器及文本查找函数  </p><p>实例：提取HTML中所有的URL连接<br>思路：<br>（1）搜索到所有<code>&lt;a&gt;</code>标签<br>（2）解析<code>&lt;a&gt;</code>标签格式，提取href后的链接内容</p><pre><code class="hljs lasso">&gt;&gt;&gt; soup = BeautifulSoup(demo, <span class="hljs-string">"html.parser"</span>)&gt;&gt;&gt; for <span class="hljs-keyword">link</span> <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">'a'</span>):<span class="hljs-params">...</span>     print(<span class="hljs-keyword">link</span>.get(<span class="hljs-string">'href'</span>))<span class="hljs-params">...</span> http:<span class="hljs-comment">//www.icourse163.org/course/BIT-268001</span>http:<span class="hljs-comment">//www.icourse163.org/course/BIT-1001870001</span></code></pre><p>返回一个列表类型，存储查找的结果<br>name：对标签名称的检索字符串<br>attrs: 对标签属性值的检索字符串，可标注属性检索<br>recursive: 是否对子孙全部检索，默认True<br>string:&lt;&gt;…&lt;/&gt;中字符串区域的检索字符串<br><code>&lt;tag&gt;(..) </code>等价于 <code>&lt;tag&gt;.find_all(..) </code><br><code>soup(..)</code>等价于 <code>soup.find_all(..)</code><br><img src="/img/Crawler/18.png" srcset="/img/loading.gif" alt="图18">  </p><h3 id="实例：最好大学排名"><a href="#实例：最好大学排名" class="headerlink" title="实例：最好大学排名"></a>实例：最好大学排名</h3><p>功能描述<br>输入：大学排名URL链接 <a href="http://www.zuihaodaxue.com/zuihaodaxuepaiming2019.html" target="_blank" rel="noopener">http://www.zuihaodaxue.com/zuihaodaxuepaiming2019.html</a><br>输出：大学排名信息的屏幕输出（排名，大学名称，总分）<br>技术路线：requests-bs4<br>定向爬虫：仅对输入的URL进行爬取，不扩展爬取。<br>程序的结构设计：<br>步骤一：从网络上获取大学排名网页内容   getHTMLText()<br>步骤二：提取网页内容中信息到合适的数据结构   fillUnivList()<br>步骤三：利用数据结构展示并输出结果  printUnivList<br>实例编写：<br><img src="/img/Crawler/19.png" srcset="/img/loading.gif" alt="图19">  </p><pre><code class="hljs python"><span class="hljs-comment">#CrawUnivRankingA.py</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<span class="hljs-keyword">import</span> bs4 <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHTMLText</span><span class="hljs-params">(url)</span>:</span>    <span class="hljs-keyword">try</span>:        r = requests.get(url, timeout=<span class="hljs-number">30</span>)        r.raise_for_status()        r.encoding = r.apparent_encoding        <span class="hljs-keyword">return</span> r.text    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fillUnivList</span><span class="hljs-params">(ulist, html)</span>:</span>    soup = BeautifulSoup(html, <span class="hljs-string">"html.parser"</span>)    <span class="hljs-keyword">for</span> tr <span class="hljs-keyword">in</span> soup.find(<span class="hljs-string">'tbody'</span>).children:        <span class="hljs-keyword">if</span> isinstance(tr, bs4.element.Tag):            tds = tr(<span class="hljs-string">'td'</span>)            ulist.append([tds[<span class="hljs-number">0</span>].string, tds[<span class="hljs-number">1</span>].string, tds[<span class="hljs-number">3</span>].string]) <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printUnivList</span><span class="hljs-params">(ulist, num)</span>:</span>    print(<span class="hljs-string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(<span class="hljs-string">"排名"</span>,<span class="hljs-string">"学校名称"</span>,<span class="hljs-string">"总分"</span>))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num):        u=ulist[i]        print(<span class="hljs-string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(u[<span class="hljs-number">0</span>],u[<span class="hljs-number">1</span>],u[<span class="hljs-number">2</span>]))     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    uinfo = []    url = <span class="hljs-string">'https://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html'</span>    html = getHTMLText(url)    fillUnivList(uinfo, html)    printUnivList(uinfo, <span class="hljs-number">20</span>) <span class="hljs-comment"># 20 univs</span></code></pre><p><img src="/img/Crawler/20.png" srcset="/img/loading.gif" alt="图20"><br>中文对齐问题的解决<br>采用中文字符的空格填充chr（12288）  </p><pre><code class="hljs routeros">def printUnivList(ulist, num):    tplt = <span class="hljs-string">"&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;"</span>    <span class="hljs-builtin-name">print</span>(tplt.format(<span class="hljs-string">"排名"</span>,<span class="hljs-string">"学校名称"</span>,<span class="hljs-string">"总分"</span>,chr(12288)))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num):        <span class="hljs-attribute">u</span>=ulist[i]        <span class="hljs-builtin-name">print</span>(tplt.format(u[0],u[1],u[2],chr(12288)))</code></pre><p><img src="/img/Crawler/21.png" srcset="/img/loading.gif" alt="图21">  </p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Crawler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础知识（二）</title>
    <link href="/2020/01/15/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/01/15/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="用户-和-权限-的基本概念"><a href="#用户-和-权限-的基本概念" class="headerlink" title="用户 和 权限 的基本概念"></a>用户 和 权限 的基本概念</h3><p>基本概念：<br>用户是在Linux系统工作中重要的一环，用户管理包括用户 和组管理<br>在Linux系统中，不论是由本机或是远程登录系统，每个系统都必须要有一个账号，并且对于不同的系统资源拥有不同的使用权限<br>在Linux中，可以指定每一个用户 针对 不同的文件和目录 的 不同权限<br>对 文件和目录的权限包括：<br><img src="/img/linux/20.png" srcset="/img/loading.gif" alt="图20"> </p><h4 id="组"><a href="#组" class="headerlink" title="组"></a>组</h4><p>为了方便用户管理，提出了组的概念，在实际应用中，可以针对组设置好权限，然后将不同的用户添加 到对应的组中，从而不用依次为每一个用户设置权限<br><img src="/img/linux/21.png" srcset="/img/loading.gif" alt="图21"></p><h4 id="ls-l扩展"><a href="#ls-l扩展" class="headerlink" title="ls-l扩展"></a>ls-l扩展</h4><p><img src="/img/linux/22.png" srcset="/img/loading.gif" alt="图22"><br>ls-l可以查看文件夹下文件的详细信息，从左到右依次是：<br>权限，读一个字符如果是d 表示目录<br>硬链接数 通俗地讲，就是有多少钟方式，可以访问当前的目录/文件<br>拥有者，家目录下 文件/目录的拥有者通常都是当前用户<br>组，在Linux中，很多时候，会出现组名和用户名相同的情况<br>大小<br>时间<br>名称<br><img src="/img/linux/23.png" srcset="/img/loading.gif" alt="图23"></p><h4 id="chmod简单使用（重要）"><a href="#chmod简单使用（重要）" class="headerlink" title="chmod简单使用（重要）"></a>chmod简单使用（重要）</h4><p>chmod可以修改 用户/组 对 文件/目录的权限<br>命令格式如下：<br><code>chmod +/- rwx 文件名|目录名</code>  </p><h4 id="超级用户"><a href="#超级用户" class="headerlink" title="超级用户"></a>超级用户</h4><p>Linux系统中root账号通常用于系统的维护和管理，对操作系统的所有资源 具有所有访问权限<br>在大多数版本的linux中，都不推荐直接使用root账号登录系统<br>在Linux安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为标准用<code>sudo </code><br>su是 substitute user 的缩写，表示使用另一个用户的身份<br>sudo命令用来以其他身份来执行命令，预设的身份是 root<br>用户使用sudo时，必须先输入密码。之后会有5分钟的有效期限，超过期限必须重新输入密码  </p><h4 id="组管理-终端命令"><a href="#组管理-终端命令" class="headerlink" title="组管理 终端命令"></a>组管理 终端命令</h4><p>创建组/删除组的终端命令都需要通过sudo来执行<br><img src="/img/linux/24.png" srcset="/img/loading.gif" alt="图24">  </p><h4 id="用户管理-终端命令"><a href="#用户管理-终端命令" class="headerlink" title="用户管理 终端命令"></a>用户管理 终端命令</h4><p><img src="/img/linux/25.png" srcset="/img/loading.gif" alt="图25"><br>创建用户时，如果忘记添加-m选项指定新用户的家目录–最简单的方法就是删除用户，重新创建<br>创建用户时，默认会创建一个和用户名同名的组名<br>用户信息保存在/etc/passwd文件中  </p><h4 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h4><p><img src="/img/linux/26.png" srcset="/img/loading.gif" alt="图26"><br>passwd文件<br>/etc/passwd文件存放的时用户的信息，由6个分号组成的7个信息，分别是  </p><ol><li>用户名</li><li>密码（x. 表示加密的密码）</li><li>UID（用户标识）</li><li>GID（组标识）</li><li>用户全名或本地账号</li><li>家目录</li><li>登录使用的Schell，就是登录之后，使用的终端命令，Ubuntu默认是dash  </li></ol><p>usermod<br>usermod可以来设置用户的主组/附加组 和登录Shell 命令格式下：<br>主组：通常在新建用户指定，在etc/passwd的第四列GID对应的组<br>附加组：在etc/group中最后一列表示该组的用户列表，用于指定用户的附加权限<br>（设置了用户的附加组之后，需要重新登录才能生效）<br><img src="/img/linux/27.png" srcset="/img/loading.gif" alt="图27"><br>（默认使用useradd添加的用户是没有权限使用sudo以及root身份执行命令的，可以使用以下命令，将用户添加到sudo附加组中）<br><code>usermod -G sudo 用户名</code></p><p>which（重要）<br>提示<br><code>/etc/passwd</code> 是用于保存用户信息的文件<br><code>/usr/bin/passwd</code> 是用于修改用户密码的程序<br><code>which</code>命令可以查看执行命令的位置  </p><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><p><img src="/img/linux/28.png" srcset="/img/loading.gif" alt="图28"><br>su 不接用户名，可以切换到root。但是不推荐使用，因为不安全<br>exit示意图如下：<br><img src="/img/linux/29.png" srcset="/img/loading.gif" alt="图29">  </p><h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><p><img src="/img/linux/30.png" srcset="/img/loading.gif" alt="图30"><br>命令的格式如下：<br><img src="/img/linux/31.png" srcset="/img/loading.gif" alt="图31"><br>hmod在设置权限的时候，可以简单的使用三个数字分别对应拥有者/组和其他 用户的权限<br>直接修改文件|目录 读【写】执行权限，但是不能精确到拥有者【组】其他chmod +/-rwx 文件名|目录名<br><img src="/img/linux/32.png" srcset="/img/loading.gif" alt="图32"></p><h3 id="系统信息相关命令"><a href="#系统信息相关命令" class="headerlink" title="系统信息相关命令"></a>系统信息相关命令</h3><p><img src="/img/linux/33.png" srcset="/img/loading.gif" alt="图33"><br>本节内容主要是为了方便通过远程终端维护服务器时，查看服务器上当前 系统日期和时间/磁盘空间占用情况/程序执行情况<br>本小节学习的终端命令基本都是查询命令，通过这些命令对系统资源的使用情况有个了解  </p><h4 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h4><p><img src="/img/linux/34.png" srcset="/img/loading.gif" alt="图34"></p><h4 id="磁盘信息"><a href="#磁盘信息" class="headerlink" title="磁盘信息"></a>磁盘信息</h4><p><img src="/img/linux/35.png" srcset="/img/loading.gif" alt="图35"><br><code>-h </code>以人性化方式显示文件大小  </p><h4 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h4><p>所谓进程就是 通俗地说就是 当前正在执行的一个程序<br>默认只会显示当前用户通过终端启动的应用程序<br>ps选项说明功能<br><img src="/img/linux/36.png" srcset="/img/loading.gif" alt="图36"><br>使用kill命令的时候，最好只终止当前用户开启的进程，而不要终止root身份开启的进程<br>否则可能导致系统崩溃<br>要推出top 输入一个q即可  </p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>目标：<br>查找文件：<code>find</code><br>软链接：<code>ln</code><br>打包和压缩： <code>tar</code><br>软件安装：<code>apt-get</code></p><h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h4><p>find命令功能非常强大，通常用来在 特定目录下 搜索 符合条件的文件<br><code>find 【路径】 - name “*.py” </code> 查找指定路径下扩展名是 .py 的文件，包括子目录  </p><ul><li>如果省略路径，表示在当前文件夹下查找</li><li>之前学习的通配符，在使用find命令时同时使用</li></ul><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><p><code>ln -s</code> 被链接的源文件  链接文件<br>建立文件的软链接，用通俗的方式讲类似于 Windows下的快捷方式<br>注意：<br>没有 -s选项建立的是一个硬链接文件，两个文件占用相同大小的硬盘空间，工作中机会不会建立文件的硬链接<br>源文件要使用绝对路径，不能使用相对路径，这样方便移动链接文件后，仍能够正常使用  </p><p>硬链接<br>在Linux中，文件名和文件数据是分开存储的<br><img src="/img/linux/37.png" srcset="/img/loading.gif" alt="图37"><br>在linux中，只有文件的硬链接数==0才会被删除<br>使用ls -l可以查看一个文件的硬链接的数量   </p><h4 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h4><p>打包压缩是日常工作中备份文件的一种方式在不同的操作系统中，常用的打包方式是不同的<br>windows 常用rar<br>mac常用 zip<br>linux常用tar.gz<br>打包/解包<br>tar是Linux中常用的备份工具，此命令可以把一系列文件打包到一个大文件中，也可以把一个打包的大文件恢复成一系列文件<br>tar的命令格式如下：<br>#打包文件<br><code>tar -cvf 打包文件.tar 被打包文件/路径....</code><br>#解包文件<br><code>tar -xvf 打包文件.tar</code><br><img src="/img/linux/38.png" srcset="/img/loading.gif" alt="图38">  </p><ol><li>压缩/解压缩<br>tar与gzip命令结合可以实现文件的打包和压缩<br>tar只负责打包，但不压缩<br>用gzip压缩tar打包后的文件，其扩展名一般用xxx.tar.gz<br>在Linux中，最常见的压缩文件格式就是xxx.tar.gz<br>在tar命令中，有一个-z的选项可以调用gzip。从而方便的实现压缩和解压缩的功能<br><img src="/img/linux/39.png" srcset="/img/loading.gif" alt="图38"><br>C 解压缩到指定的路径，要解压缩的目录必须存在 </li><li>bzip2<br>tar和bzip2命令结合使用同样可以打包和压缩，其扩展名为xxx.tar.bz2<br>在tar命令中有个选项-j可以调用bzip2，从而可以方便的实现压缩和解压缩的功能<br><img src="/img/linux/40.png" srcset="/img/loading.gif" alt="图40"></li></ol><h4 id="通过apt安装-卸载-更新软件包"><a href="#通过apt安装-卸载-更新软件包" class="headerlink" title="通过apt安装/卸载/更新软件包"></a>通过apt安装/卸载/更新软件包</h4><p>apt是Advanced Packaging Tool, 是<br><img src="/img/linux/41.png" srcset="/img/loading.gif" alt="图41"></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础知识（一）</title>
    <link href="/2020/01/10/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/01/10/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>内核（kernel）是系统的心脏，是运行程序和管理像磁盘和打印机登硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层。</p><h3 id="Linux文件和目录结构"><a href="#Linux文件和目录结构" class="headerlink" title="Linux文件和目录结构"></a>Linux文件和目录结构</h3><ul><li><p><code>/：</code>根目录，一般根目录下只存放目录，在linux下有且只有一个根目录，所有的东西都是从这里开始的。当在终端里输入/home﻿​，其实是在告诉电脑，先从/（根目录）开始，再进入home目录  </p></li><li><p><code>/bin、/usr/bin</code>: 可执行二进制文件的目录，如常用的命令<code>ls 、tar、mv、cat</code>等  </p></li><li><p><code>/dev</code>:  放置linux下的设备文件，访问该目录下的某个文件，相当于访问某个设备，常用的是挂载光驱<code>mount/dev/cdrom/mnt </code> </p></li><li><p><code>/boot</code>: 放置linux系统启动时用的一些文件，如linux的内核文件:<code>/boot/vmlinuz</code>，系统引导管理器：<code>/boot/grub  </code></p></li><li><p><code>/etc</code>: 系统配置文件存放的目录, 不建议在此目录存放可执行文件</p></li><li><p><code>/home</code>: 系统默认的用户家目录,新增用户账号时, 用户的家目录都存放此目录下  </p></li><li><p><code>/lib、/usr/lib、/usr/local/lib</code>: 系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助 </p></li><li><p><code>/lost*fount</code>: 系统产生错误时，会将一些遗失的片段放置于此目录下  </p></li><li><p><code>/mnt: /media</code>: 光盘默认挂载点，通常将光盘挂载于/mnt/cdrom下，也可以选择任意位置挂载  </p></li><li><p><code>/opt</code>: 给主机额外安装软件所摆放的目录  </p></li><li><p><code>/proc</code>: 此目录的数据都在内存中，如系统核心、外部设备、网络状态，由于数据都存放在内存中，所以不占用磁盘空间，比较重要的文件有<code>/proc/cpuinfo、/proc/dma、/proc/net/</code>等  </p></li><li><p><code>/root</code>: 系统管理员root的家目录  </p></li></ul><p>在职场中，大量的服务器维护工作都是在远程 通过ssh客户端来完成的，并没有图形界面、所有的维护工作都需要命令来完成</p><p>小技巧：<br><code>ctrl + shift + = </code> 放大终端窗口的字体显示<br><code>ctrl + - </code>  缩小终端窗口中的字体显示</p><h3 id="常用的Linux指令"><a href="#常用的Linux指令" class="headerlink" title="常用的Linux指令"></a>常用的Linux指令</h3><p><img src="/img/linux/01.png" srcset="/img/loading.gif" alt="图1"></p><p>自动补全<br>在敲出文件/目录/命令 等等，可以<code>tab</code>补全</p><p>inux终端命令格式<br><code>command [-option] [parameter]</code></p><p>查阅命令帮助信息（知道）</p><ol><li><code>help  command --help </code> </li><li><code>man man command</code><br><img src="/img/linux/02.png" srcset="/img/loading.gif" alt="图2"></li></ol><p>Linux下文件或者目录名称最长可以有256个字符<br>以.开头的文件为隐藏文件，需要用-a 参数才能显示<br><code>.</code>代表当前目录<br><code>..</code>代表上一级目录 </p><h4 id="ls的详细介绍"><a href="#ls的详细介绍" class="headerlink" title="ls的详细介绍"></a>ls的详细介绍</h4><p>ls列出目录下的内容，选项如下<br><img src="/img/linux/03.png" srcset="/img/loading.gif" alt="图3"></p><p>ls通配符的使用<br><img src="/img/linux/04.png" srcset="/img/loading.gif" alt="图4"></p><h4 id="cd的详细介绍"><a href="#cd的详细介绍" class="headerlink" title="cd的详细介绍"></a>cd的详细介绍</h4><p>cd是英文单词change directory 的简写，其功能为更改当前的工作目录，也是用户最常用的命令之一<br>注意： linux所有的目录和文件名都是大小写敏感的<br><img src="/img/linux/05.png" srcset="/img/loading.gif" alt="图5"><br>（~波浪号代表用户家目录）</p><p>相对路径：在输入路径时，最前面不是/或者<del>，表示相对当前目录 所在的目录位置<br>绝对路劲：在输入路径时，最前面是/或者</del>，表示 根目录/家目录开始的具体目录位置</p><h4 id="touch的详细介绍"><a href="#touch的详细介绍" class="headerlink" title="touch的详细介绍"></a>touch的详细介绍</h4><p>创建文件或者修改文件时间<br>-如果文件不存在，可以创建一个空白文件<br>-如果文件已经存在，可以修改文件的末次修改日期  </p><h4 id="mkdir的详细介绍"><a href="#mkdir的详细介绍" class="headerlink" title="mkdir的详细介绍"></a>mkdir的详细介绍</h4><p>创建一个新的目录<br><code>-p </code>可以递归创建目录<br>新建目录的名称 不能与当前目录中 已有的目录或文件 同名 </p><h4 id="rm的详细介绍"><a href="#rm的详细介绍" class="headerlink" title="rm的详细介绍"></a>rm的详细介绍</h4><p>删除文件或目录<br>使用rm命令要小心，因为文件删除后不能恢复<br>选项<br><code>-f</code>强制删除，忽略不存在的文件，无需提示<br><code>-r</code> 递归地删除目录下的内容，删除文件夹时必须加此参数</p><h4 id="拷贝和移动文件"><a href="#拷贝和移动文件" class="headerlink" title="拷贝和移动文件"></a>拷贝和移动文件</h4><p><img src="/img/linux/06.png" srcset="/img/loading.gif" alt="图6"></p><h5 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h5><p>tree命令可以树状图列出文件目录结构<br>选项<br><code>-d</code>  只显示目录  </p><h5 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h5><p>p命令的功能是将给出的文件或目录复制到另一个文件或目录中，相当于DOS底下的copy命令<br><img src="/img/linux/07.png" srcset="/img/loading.gif" alt="图7"><br>cp 复制文件路径即文件  目标文件</p><h5 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h5><p><code>mv</code> 源文件 目标文件<br><code>-i</code> 覆盖文件前提示<br>可以起到重命名的作用<br><img src="/img/linux/08.png" srcset="/img/loading.gif" alt="图8"></p><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><p><img src="/img/linux/09.png" srcset="/img/loading.gif" alt="图9"></p><h5 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h5><p><code>cat</code> 命令可以用来查看文件内容、创建文件、文件合并、追加文件内容等功能<br><code>cat</code> 会一次显示所有的内容，适合查看内容较少的文本文件  </p><h5 id="more"><a href="#more" class="headerlink" title="more"></a>more</h5><p>more命令可以用于分屏显示文件内容，每次只显示一页内容<br>适合查看内容较多的文本文件<br>使用more的操作键<br>空格键  显示手册页的下一屏<br><img src="/img/linux/10.png" srcset="/img/loading.gif" alt="图10"></p><h5 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h5><p>Linux系统中<code>grep</code>命令是一种强大的文本搜索工具<br><code>grep</code>允许对文本文件进行 模式查找，所谓模式查找，又被称为正则表达式<br><img src="/img/linux/11.png" srcset="/img/loading.gif" alt="图11"><br><img src="/img/linux/12.png" srcset="/img/loading.gif" alt="图12"><br>常用的两种模式查找<br><img src="/img/linux/13.png" srcset="/img/loading.gif" alt="图13"></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="echo-文字内容"><a href="#echo-文字内容" class="headerlink" title="echo 文字内容"></a><code>echo</code> 文字内容</h5><p><code>echo</code>会在终端中显示参数指定的文字，通常会和 重定向联合使用  </p><h5 id="重定向-gt-和-gt-gt"><a href="#重定向-gt-和-gt-gt" class="headerlink" title="重定向&gt;和&gt;&gt;"></a>重定向<code>&gt;</code>和<code>&gt;&gt;</code></h5><p><code>Linux</code>允许将命令执行结果，重定向到一个文件<br>将本应显示在终端上的内容输出/追加到指定文件中<br>其中<br><code>&gt;</code>表示输出，会覆盖文件原有的内容<br><code>&gt;&gt;</code>表示追加，会将内容追加到已有文件的末尾  </p><h5 id="管道（二次处理）"><a href="#管道（二次处理）" class="headerlink" title="管道（二次处理）| "></a>管道（二次处理）<code>| </code></h5><p>linux允许将一个命令的输出 可以通过管道 作为另一个命令的输入<br>可以理解现实生活中的管子，一头塞东西进去，另一头取出来，这里的<br><code>|</code> 分为左右两端，左端塞东西（写） 右端取东西（读） </p><p>常用的管道命令有：<br>more：分屏显示内容<br>grep：在命令执行结果的基础上查询指定的文本  </p><h3 id="远程管理常用命令"><a href="#远程管理常用命令" class="headerlink" title="远程管理常用命令"></a>远程管理常用命令</h3><h4 id="关机-重启"><a href="#关机-重启" class="headerlink" title="关机/重启"></a>关机/重启</h4><p><code>shutdown 选项 时间</code><br><code>shutdown</code>命令可以安全关闭或者重新启动系统<br><code>shutdown -r 时间</code>  可以重新启动  <code>shutdown -r now</code> 立即重启  </p><h4 id="查看或配置网卡信息"><a href="#查看或配置网卡信息" class="headerlink" title="查看或配置网卡信息"></a>查看或配置网卡信息</h4><p>网卡<br>网卡是一个专门负责网络通讯的硬件设备<br>IP地址是设置在网卡上的地址信息<br>我们可以把电脑 比作 电话，网卡相当于SIM卡，IP地址相当于电话号码  </p><p>IP地址<br>每台联网的电脑上都有IP地址，是保证电脑之间正常通讯的重要设置<br>注意：每台电脑的IP地址不能相同，否则会出现IP地址冲突，并且没有办法正常通讯<br><img src="/img/linux/14.png" srcset="/img/loading.gif" alt="图14"><br>ifconig可以查看/配置计算机当前的<br><img src="/img/linux/15.png" srcset="/img/loading.gif" alt="图15"></p><p>更方便对应ip地址，可输入：<code>ifconfig | grep inet ping</code><br>检测到目标主机是否正常连接<br><code>ping IP</code>地址<br>检测本地网卡工作正常<br><code>ping  127.0.0.1</code><br><code>ping</code> 一般用于检测当前计算机于目标计算机之间的网络是否通畅，数值越大，速度越慢  </p><h4 id="远程登陆和复制文件"><a href="#远程登陆和复制文件" class="headerlink" title="远程登陆和复制文件"></a>远程登陆和复制文件</h4><h5 id="ssh基础（重点）"><a href="#ssh基础（重点）" class="headerlink" title="ssh基础（重点）"></a>ssh基础（重点）</h5><p>在Linux中SSH是非常常用的工具，通过SSH 客户端 我们可以连接到运行了SSH服务器的远程机器上<br>数据传输是加密的，可以防止信息泄露<br>数据传输是压缩的，可以提高传输速度<br>SSH客户端是一种使用Secure Shell（SSH）协议连接到远程计算机的软件程序<br>SSH是目前较可靠，专为远程登录会话和其他网络服务 提供安全性的协议  </p><ol><li><p>域名和端口号<br>域名：由一串用点分隔的名字组成，例如：<code>www.itcast.cn</code>是IP地址的别名，方便用户记忆<br>端口号：通过IP地址可以找到网络上的计算机<br>而通过端口号可以找到计算机上运行的应用程序<br>SSH服务器的默认端口号是22，如果是默认端口号，在连接的时候可以省略<br>常见服务端口号如下：<code>22 80 443</code></p></li><li><p>ssh客户端的简单使用<br><code>ssh [-p port] user@remote</code><br>user 是远程机器上的用户名。如果不指定的话默认为当前用户<br>remote 是远程机器的地址，可以是IP/域名，或者是后面会提到的别名<br>port 是SSH Server监听的端口，如果不指定，就默认为22<br>使用exit退出当前用户的登录<br>注意：ssh这个终端命令只能在Linux或者Unix系统下使用<br>如果在Windows系统中，可以安装Putty或者Xshell客户端软件即可<br><img src="/img/linux/16.png" srcset="/img/loading.gif" alt="图16"></p></li></ol><h5 id="scp（掌握）"><a href="#scp（掌握）" class="headerlink" title="scp（掌握）"></a>scp（掌握）</h5><p> scp就是secure copy，是一个在Linux下用来进行远程拷贝文件的命令（跟在ip后面冒号不可省略）<br>它的地址格式与ssh基本相同，需要注意的是，在指定端口时用的是大写的-P而不是小写的<br><img src="/img/linux/17.png" srcset="/img/loading.gif" alt="图17"><br>如果在Windows系统中，可以安装Putty，使用pscp命令行工具或者安装Filezilla使用FTP进行文件传<br><img src="/img/linux/18.png" srcset="/img/loading.gif" alt="图18"></p><h5 id="SSH高级（知道）"><a href="#SSH高级（知道）" class="headerlink" title="SSH高级（知道）"></a>SSH高级（知道）</h5><ol><li>免密码登陆<br>步骤：<br>配置公钥<br>执行ssh-keygen即可生成SSH钥匙，一路回车即可<br>上传公钥到服务器<br>执行ssh-copy-id -P port ﻿user@remote,可以让远程服务器记住我们的公钥<br><img src="/img/linux/19.png" srcset="/img/loading.gif" alt="图19"></li></ol><p>2）配置别名<br>每次都输入ssh -P port user@remote,时间久了会觉得很麻烦，特别是当user，port和remote都要输入，而且还不好记忆<br>而配置别名可以让我们进一步偷懒，比如用ssh mac来替代上面一长串，那么就在~/.ssh/config里面追加以下内容  </p><pre><code class="hljs routeros">Host myserverHostName ip地址User ithrimaport 22</code></pre><p>保存之后，即可用ssh mac 实现远程登录了，scp同样可以使用  </p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git&amp;Github</title>
    <link href="/2019/11/15/%E5%A5%BD%E7%94%A8%E7%9A%84git/"/>
    <url>/2019/11/15/%E5%A5%BD%E7%94%A8%E7%9A%84git/</url>
    
    <content type="html"><![CDATA[<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><ul><li><p>初始化一个Git仓库，使用<code>git init</code>命令。<br>添加文件到Git仓库，分两步：  </p><ol><li>使用命令git add <file>，注意，可反复多次使用，添加多个文件；</li><li>使用命令git commit -m <message>，完成。</li></ol></li><li><p>要随时掌握工作区的状态，使用<code>git status</code>命令。<br>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p></li><li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。<br>(HEAD^是指的上一个版本HEAD^^指的是上上个版本)</p></li><li><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。  </p></li><li><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。<br><img src="/img/git/1.png" srcset="/img/loading.gif" alt="分支示意图"></p></li><li><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到commit中 </p></li><li><p>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。    </p></li><li><p>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。      </p></li><li><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。  </p></li><li><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容.  </p></li><li><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 </p></li></ul><h3 id="关联远程库推送"><a href="#关联远程库推送" class="headerlink" title="关联远程库推送"></a>关联远程库推送</h3><ul><li>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；  </li><li>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；  </li><li>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；  </li></ul><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p><h3 id="克隆远程库项目"><a href="#克隆远程库项目" class="headerlink" title="克隆远程库项目"></a>克隆远程库项目</h3><ul><li>从远程库克隆<br><code>git clone git@github.com:Mango/gitskills.git</code></li><li>要克隆一个仓库，首先必须知道仓库的地址然后使用<code>git clone  git@</code>  </li></ul><h3 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h3><p>Git鼓励大量使用分支：</p><ul><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git checkout &lt;name&gt;或者git switch &lt;name&gt;</code></li><li>创建+切换分支：<code>git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code>  </li></ul><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。  </p><ul><li>用<code>git log --graph</code>命令可以看到分支合并图。</li></ul><p>在实际开发中，我们应该按照几个基本原则进行分支管理：<br>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；<br>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；<br>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。  </p><ul><li><p>Git分支十分强大，在团队开发中应该充分应用。<br>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。  </p></li><li><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；<br>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。  </p></li><li><p>开发一个新feature，最好新建一个分支；<br>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p></li><li><p>多人协作的工作模式通常是这样：<br>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；<br>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；<br>如果合并有冲突，则解决冲突，并在本地提交；<br>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！<br>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。<br>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p></li><li><p>查看远程库信息，使用<code>git remote -v</code>；<br>本地新建的分支如果不推送到远程，对其他人就是不可见的；  </p></li><li><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；  </p></li><li><p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；    </p></li><li><p>建立本地分支和远程分支的关联，使用<code>git branch   --set-upstream branch-name origin/branch-name</code>；<br>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。  </p></li></ul><p>rebase操作可以把本地未push的分叉提交历史整理成直线；<br>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。 </p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul><li>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起<br>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；<br>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...</code>“可以指定标签信息；<br>命令<code>git tag</code>可以查看所有标签。<br>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字<br>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；<br>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；<br>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；<br>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。 </li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在GitHub上，可以任意Fork开源仓库；<br>自己拥有Fork后的仓库的读写权限；<br>可以推送pull request给官方仓库来贡献代码。</p><p>让Git显示颜色，会让命令输出看起来更醒目：<br><code>git config --global color.ui true</code></p>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM的使用</title>
    <link href="/2019/10/08/VIM%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/10/08/VIM%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="光标命令"><a href="#光标命令" class="headerlink" title="光标命令"></a>光标命令</h3><pre><code class="hljs properties"><span class="hljs-attr">h</span> <span class="hljs-string">左移一个字符</span><span class="hljs-attr">l</span> <span class="hljs-string">右移一个字符</span><span class="hljs-attr">j</span> <span class="hljs-string">下移一行</span><span class="hljs-attr">k</span> <span class="hljs-string">上移一行</span><span class="hljs-attr">w</span> <span class="hljs-string">前移一个单词，光标停在下一个单词开头</span><span class="hljs-attr">W</span> <span class="hljs-string">移动下一个单词开头，但忽略一些标点</span><span class="hljs-attr">e</span> <span class="hljs-string">前移一个单词，光标停在下一个单词末尾</span><span class="hljs-attr">E</span> <span class="hljs-string">移动到下一个单词末尾，如果词尾有标点，则移动到标点</span><span class="hljs-attr">b</span> <span class="hljs-string">后移一个单词，光标停在上一个单词开头</span><span class="hljs-attr">B</span> <span class="hljs-string">移动到上一个单词开头，忽略一些标点</span><span class="hljs-meta">(</span> <span class="hljs-string">前移1句</span><span class="hljs-meta">)</span> <span class="hljs-string">后移1句</span><span class="hljs-meta">&#123;</span> <span class="hljs-string">前移1段</span><span class="hljs-meta">&#125;</span> <span class="hljs-string">后移1段​</span></code></pre><h3 id="滚屏命令"><a href="#滚屏命令" class="headerlink" title="滚屏命令"></a>滚屏命令</h3><pre><code class="hljs properties"><span class="hljs-meta">ctrl+f</span> <span class="hljs-string">下翻一屏</span><span class="hljs-meta">ctrl+b</span> <span class="hljs-string">上翻一屏</span><span class="hljs-meta">ctrl+d</span> <span class="hljs-string">下翻半屏</span><span class="hljs-meta">ctrl+u</span> <span class="hljs-string">上翻半屏</span><span class="hljs-meta">ctrl+e</span> <span class="hljs-string">向下滚动一行</span><span class="hljs-meta">ctrl+y</span> <span class="hljs-string">向上滚动一行</span><span class="hljs-meta">n%</span> <span class="hljs-string">到文件n%的位置</span><span class="hljs-attr">zz</span> <span class="hljs-string">将当前行移动到屏幕中央</span><span class="hljs-attr">zt</span> <span class="hljs-string">将当前行移动到屏幕顶端</span><span class="hljs-attr">zb</span> <span class="hljs-string">将当前行移动到屏幕底端​</span></code></pre><h3 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h3><pre><code class="hljs excel">第一部分 基本插入I 在当前行第一个非空字符前插入gI 在当前行第一列插入a 在光标后插入A 在当前行最后插入o 在下面新建一行插入O 在上面新建一行插入第二部分 改写插入c[<span class="hljs-built_in">n</span>]w 改写光标后<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个词c[<span class="hljs-built_in">n</span>]l 改写光标后<span class="hljs-built_in">n</span>个字母,l (vim中光标右移一个字符命令)c[<span class="hljs-built_in">n</span>]h 改写光标前<span class="hljs-built_in">n</span>个字母, h (vim中光标左移一个字符命令)[<span class="hljs-built_in">n</span>]cc 修改当前[<span class="hljs-built_in">n</span>]行[<span class="hljs-built_in">n</span>]s 以输入的文本替代光标之后<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符，相当于c[<span class="hljs-built_in">n</span>]l[<span class="hljs-built_in">n</span>]S 删除指定数目的行，并以所输入文本代替之​</code></pre><h3 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h3><pre><code class="hljs excel">y 复制在可视模式下选中的文本yy <span class="hljs-built_in">or</span> Y 复制整行文本y[<span class="hljs-built_in">n</span>]w 复制一(<span class="hljs-built_in">n</span>)个词y[<span class="hljs-built_in">n</span>]l 复制光标右边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符y[<span class="hljs-built_in">n</span>]h 复制光标左边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符y$ 从光标当前位置复制到行尾<span class="hljs-symbol">y0</span> 从光标当前位置复制到行首​﻿​</code></pre><h3 id="剪切和粘贴命令"><a href="#剪切和粘贴命令" class="headerlink" title="剪切和粘贴命令"></a>剪切和粘贴命令</h3><pre><code class="hljs excel">[<span class="hljs-built_in">n</span>]x 剪切光标右边<span class="hljs-built_in">n</span>个字符，相当于d[<span class="hljs-built_in">n</span>]l[<span class="hljs-built_in">n</span>]X 剪切光标左边<span class="hljs-built_in">n</span>个字符，相当于d[<span class="hljs-built_in">n</span>]hp 在光标之后粘贴P 在光标之前粘贴​</code></pre><h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><pre><code class="hljs excel">d 删除（剪切）在可视模式下选中的文本d$ <span class="hljs-built_in">or</span> D 删除（剪切）当前位置到行尾的内容d[<span class="hljs-built_in">n</span>]w 删除（剪切）<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个单词d[<span class="hljs-built_in">n</span>]l 删除（剪切）光标右边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符d[<span class="hljs-built_in">n</span>]h 删除（剪切）光标左边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符<span class="hljs-symbol">d0</span> 删除（剪切）当前位置到行首的内容[<span class="hljs-built_in">n</span>] dd 删除（剪切）<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)行​</code></pre><h3 id="撤销命令"><a href="#撤销命令" class="headerlink" title="撤销命令"></a>撤销命令</h3><pre><code class="hljs properties"><span class="hljs-attr">u</span> <span class="hljs-string">撤销最后执行的命令</span><span class="hljs-attr">U</span> <span class="hljs-string">撤销对整行的修改​</span></code></pre><h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><pre><code class="hljs applescript">/<span class="hljs-built_in">word</span> 在后面的文本中查找<span class="hljs-built_in">word</span>?<span class="hljs-built_in">word</span> 在前面的文本中查找<span class="hljs-built_in">word</span>/pattern/+<span class="hljs-built_in">number</span> 将光标停在包含pattern的行后面第<span class="hljs-built_in">number</span>行上/pattern/-<span class="hljs-built_in">number</span> 将光标停在包含pattern的行前面第<span class="hljs-built_in">number</span>行上n 向后查找下一个N 向前查找下一个​</code></pre><h3 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h3><pre><code class="hljs elixir"><span class="hljs-symbol">:s/old/new/g</span> 可以替换 old 为 new替换两行之间出现的每个匹配串，操作如下<span class="hljs-symbol">:</span><span class="hljs-comment">#,#s/old/new/g 其中 #,# 代表的是替换操作的若干行中首尾两行的行号。</span><span class="hljs-symbol">:%s/old/new/g</span> 则是替换整个文件中的每个匹配串。<span class="hljs-symbol">:%s/old/new/gc</span> 会找到整个文件中的每个匹配串，并且对每个匹配串提示是否进行替换。</code></pre><h3 id="排版命令"><a href="#排版命令" class="headerlink" title="排版命令"></a>排版命令</h3><pre><code class="hljs ruby">&lt;&lt; 向左缩进一个shiftwidth<span class="hljs-meta">&gt;&gt;</span> 向右缩进一个shiftwidth<span class="hljs-symbol">:ce</span>(nter) 本行文字居中<span class="hljs-symbol">:le</span>(ft) 本行文字靠左<span class="hljs-symbol">:ri</span>(ght) 本行文字靠右</code></pre><h3 id="命令行中分屏打开多文件"><a href="#命令行中分屏打开多文件" class="headerlink" title="命令行中分屏打开多文件"></a>命令行中分屏打开多文件</h3><pre><code class="hljs css"><span class="hljs-selector-tag">-o</span> 水平分屏<span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">-o</span><span class="hljs-selector-attr">[n]</span> <span class="hljs-selector-tag">file1</span> <span class="hljs-selector-attr">[file2 ...]</span><span class="hljs-selector-tag">-O</span> 垂直分屏<span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">-O</span><span class="hljs-selector-attr">[n]</span> <span class="hljs-selector-tag">file1</span> <span class="hljs-selector-attr">[file2 ...]</span></code></pre><h3 id="vim中命令模式分屏"><a href="#vim中命令模式分屏" class="headerlink" title="vim中命令模式分屏"></a>vim中命令模式分屏</h3><ol><li>垂直分屏<pre><code class="hljs vim">:<span class="hljs-keyword">vs</span> [<span class="hljs-keyword">file</span>]:<span class="hljs-keyword">vs</span> 将当前文件垂直分屏:<span class="hljs-keyword">vs</span> <span class="hljs-keyword">file</span> 创建新文件并垂直分屏</code></pre></li><li>水平分屏<pre><code class="hljs vim">:<span class="hljs-keyword">sv</span> [<span class="hljs-keyword">file</span>]:<span class="hljs-keyword">sv</span> 将当前文件水平分屏:<span class="hljs-keyword">sv</span> <span class="hljs-keyword">file</span> 创建新文件并水平分屏</code></pre></li></ol><h3 id="分屏屏间光标移动"><a href="#分屏屏间光标移动" class="headerlink" title="分屏屏间光标移动"></a>分屏屏间光标移动</h3><ol><li>分屏间循环移动光标<br><code>ctrl-w ctrl-w</code></li><li>光标移到右边的屏中<br><code>ctrl+w l</code></li><li>光标移到左边的屏中<br><code>ctrl+w h</code></li><li>光标移到上面的屏中<br><code>ctrl+w k</code></li><li>光标移到下边的屏中<br><code>ctrl+w j</code></li><li>光标移到下一个屏中<br><code>ctrl+w w</code></li><li>把光标移到上一个屏中<br><code>ctrl+w p</code></li></ol><h3 id="分屏的移动"><a href="#分屏的移动" class="headerlink" title="分屏的移动"></a>分屏的移动</h3><p>四个键位同上相比均换成了大写</p><ol><li>把当前分屏移动到最左边<br><code>ctrl+w H</code></li><li>把当前分屏移动到上面并扩展到整屏的宽度<br><code>ctrl+w K </code></li><li>把当前分屏移动到最下边<br><code>ctrl+w J</code> </li><li>把当前分屏移动到最右边<br><code>ctrl+w L</code> </li></ol><h3 id="关闭分屏"><a href="#关闭分屏" class="headerlink" title="关闭分屏"></a>关闭分屏</h3><ol><li>关闭当前子屏<br><code>ctrl+wc</code></li><li>关闭当前子屏，若为最后一个，则退出vim<br><code>ctrl+w q</code> </li><li>hide<br><code>:hide 关闭当前窗口</code> </li><li>only<br><code>:only 仅保持此窗口开启</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown的基本语法</title>
    <link href="/2019/06/08/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2019/06/08/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre><code class="hljs clean">#一级标题  ##二级标题  ###三级标题  ####四级标题  #####五级标题  ######六级标题</code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>1     <code>* 1</code></li><li>2     <code>* 2</code></li><li>3     <code>* 3</code></li></ul><ol><li>1.</li><li>2.</li><li>3.</li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>只需要在文本前加入&gt;即可</p><blockquote><p>这里是引用 </p></blockquote><p>注意符合和文本间要空格</p><h2 id="插入图片和链接"><a href="#插入图片和链接" class="headerlink" title="插入图片和链接"></a>插入图片和链接</h2><p>插入链接 [超链接名] (链接地址 “超链接title”)  </p><p>插入图片<br>! [图片alt] (图片地址 ‘’图片title’’)<br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>生成表格  </p><pre><code class="hljs ruby"><span class="hljs-params">| Tables        |</span> Are           <span class="hljs-params">| Cool  |</span>  <span class="hljs-params">| ------------- |</span><span class="hljs-symbol">:-------------</span><span class="hljs-symbol">:|</span> -----<span class="hljs-symbol">:|</span>   <span class="hljs-params">| col 3 is      |</span> right-aligned <span class="hljs-params">| $1600 |</span>  <span class="hljs-params">| col 2 is      |</span> centered      <span class="hljs-params">|   $12 |</span>  <span class="hljs-params">| zebra stripes |</span> are neat      <span class="hljs-params">|    $1 |</span></code></pre><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td align="center">right-aligned</td><td align="right">$1600</td></tr><tr><td>col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td>zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr><tr><td>第二行分割表头和内容。</td><td align="center"></td><td align="right"></td></tr><tr><td><code>-</code>有一个就行，为了对齐，多加了几个</td><td align="center"></td><td align="right"></td></tr><tr><td>文字默认居左</td><td align="center"></td><td align="right"></td></tr><tr><td>-两边加：表示文字居中</td><td align="center"></td><td align="right"></td></tr><tr><td>-右边加：表示文字居右</td><td align="center"></td><td align="right"></td></tr><tr><td>原生的语法两边都要用</td><td align="center">包起来</td><td align="right"></td></tr></tbody></table><h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><p>用两个<code>*</code>包起来<br><strong>这是加粗的文字</strong><br>用一个<code>*</code>包起来<br><em>这是倾斜的文字</em><br>用*<strong>包起来<br>**<em>这是斜体加粗的文字</em></strong><br>用～包起来<br><del>这是加删除线的文字</del></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>单行代码之间用反引号包起来<br>代码块两边分别用三个反引号包起来，且两边的反引号单独占一行<br><code>```</code><br>  代码…<br>  代码…<br>  代码…<br><code>```</code></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>只需要三个***</p><hr>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
