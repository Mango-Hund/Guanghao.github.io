<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>吴恩达机器学习（二）</title>
    <link href="/2020/06/10/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/06/10/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>分类问题，例如<br>Email: 垃圾邮件/不是垃圾邮件<br>Online：信息是真的/信息是假的<br>Tumor：良性的/恶性的<br>$y=\{0,1\}$<br>0:Negative Class负类/1:Positive Class正类<br><img src="/img/machine-learning/09.png" srcset="/img/loading.gif" alt="图9"><br>将分类器的输出$h_\theta(x)$阀值定位0.5<br>如果$h_\theta\geq0.5$,预测’y=1’<br>如果$h_\theta&lt;0.5$,预测‘y=0’ </p><h4 id="假设陈述"><a href="#假设陈述" class="headerlink" title="假设陈述"></a>假设陈述</h4><p>逻辑分类模型<br>我们想要$0\leq h_\theta(x) \leq 1$<br>$h_\theta(x)=g(\theta^Tx)$<br>$g(z)=\frac{1}{1+e^{-z}}$ z是实数 ，g(z)一端趋向1一端趋向0。<br>关于假设h(x)函数的解释：<br>$h_\theta(x)$= 输入x对于y=1的估计概率<br>举例：如果 $x=\begin{bmatrix}x_0 \\ x_1\end{bmatrix}=\begin{bmatrix}1 \\ tumorSize \end{bmatrix}$<br>$h_\theta(x)=0.7$<br>可以说明病人的肿瘤有70%的概率为恶性肿瘤。<br>当特征变量为x，变量的参数为$\theta$，可以表示‘y=1’或‘y=0’的概率为：  </p><script type="math/tex; mode=display">h_\theta(x)=P(y=1|x;\theta)</script><script type="math/tex; mode=display">P(y=0|x;\theta)+P(y=1|x;\theta)=1</script><script type="math/tex; mode=display">P(y=0|x;\theta)=1-P(y=1|x;\theta)</script><h4 id="决策界限（decision-boundary）"><a href="#决策界限（decision-boundary）" class="headerlink" title="决策界限（decision boundary）"></a>决策界限（decision boundary）</h4><p>分类函数：<br>$h_\theta(x)=g(\theta^Tx)=P(y=1|x;\theta)$<br>$g(z)=\frac{1}{1+e^{-z}}$<br><img src="/img/machine-learning/10.png" srcset="/img/loading.gif" alt="图10"><br>$g(z)\geq0.5$ when $z \geq 0$。$h_\theta(x)=g(\theta^Tx)\geq0.5$ when $\theta^T\geq0$<br>假设：预测“y=1” 如果$h_\theta(x)\geq0.5$<br>预测“y=0” 如果$h_\theta(x)&lt;0.5$<br><img src="/img/machine-learning/11.png" srcset="/img/loading.gif" alt="图11"><br>假设$h_\theta(x)=g(\theta_0+\theta x_1+\theta x_2)$,并且已知$\theta^T=\begin{bmatrix}-3 &amp; 1 &amp; 1\end{bmatrix}$<br>可以预测”y=1”, 如果 $-3+x_1+x_2\geq0$，也就是$x_1+x_2\geq3$<br><img src="/img/machine-learning/12.png" srcset="/img/loading.gif" alt="图12"><br>$h_\theta(x)=g(\theta_0+\theta_1x_1+\theta_2x_2+\theta_3x_1^2+\theta_4x_4^2)$<br>$\theta^T=\begin{bmatrix}-1 &amp; 0 &amp; 0 &amp; 1 &amp;1\end{bmatrix}$<br>预测“y=1”，如果$-1+x_1^2+x_2^2\geq0$，可改写为$x_1^2+x_2^2\geq0$<br>一旦有了参数$\theta$，决策边界就可以确定了。</p><h4 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h4><p>训练集：{$(x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}),…,(x^{(m)},y^{(m)})$}<br>m个特征 $x\in\begin{bmatrix}x_0\\x_1\...\\x_n\end{bmatrix}$<br>$x_0=1,y\in\{0,1\}$  </p><script type="math/tex; mode=display">h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}</script><p>我们应该怎么去确定参数$\theta$呢？<br>代价函数：<br>线性回归：</p><script type="math/tex; mode=display">J(\theta)=\frac{1}{m}\sum^m_{i=1}\frac{1}{2}(h_\theta(x^{(i)})-y^{(i)})^2</script><p>平均误差平方可以写为：    </p><script type="math/tex; mode=display">Cost(h_\theta(x^{(i)}),y^{(i)})=\frac{1}{2}(h_\theta(x^{(i)})-y^{(i)})^2</script><p>如果直接代入，画出代价函数（优化目标函数如左图，有很多局部最优，且是非凸函数）<br><img src="/img/machine-learning/13.png" srcset="/img/loading.gif" alt="图13"><br>逻辑回归代价函数</p><script type="math/tex; mode=display">Cost(h_\theta(x),y)=\begin{cases}-log(h_\theta(x)&if&y=1\\-log(1-h_\theta(x))&if&y=0\end{cases}</script><p><img src="/img/machine-learning/14.png" srcset="/img/loading.gif" alt="图14"><br>搞错的代价是巨大的<br><img src="/img/machine-learning/15.png" srcset="/img/loading.gif" alt="图15">    </p><h4 id="简化代价函数与梯度下降"><a href="#简化代价函数与梯度下降" class="headerlink" title="简化代价函数与梯度下降"></a>简化代价函数与梯度下降</h4><p>逻辑回归代价函数（优化目标函数）</p><script type="math/tex; mode=display">J(\theta)=\frac{1}{m}\sum^m_{i=1}Cost(h_\theta(x^{(i)}),y^{(i)})</script><script type="math/tex; mode=display">Cost(h_\theta(x),y)=\begin{cases}-log(h_\theta(x)&if&y=1\\-log(1-h_\theta(x))&if&y=0\end{cases}</script><p>Note:y=0 or 1 always<br>简化$Cost(h_\theta(x),y)=-ylog(h_\theta(x))-(1-y)log(1-h_\theta(x))$<br>由此我们可以得到：  </p><script type="math/tex; mode=display">J(\theta)=-\frac{1}{m}[\sum^m_{i-1}y^{(i)}logh_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]</script><p>为了拟合出参数$\theta$,我们应该找出让$J(\theta)$取得最小值的参数$\theta$：<br>$\min\limits_\theta J(\theta)$<br>得到了参数，当我们输入一组新的特征去预测时<br>输出：$h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}$<br>使用梯度下降法来找出代价函数的最小值</p><script type="math/tex; mode=display">J(\theta)=-\frac{1}{m}[\sum^m_{i-1}y^{(i)}logh_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]</script><p>想要得到$\min\limits_\theta J(\theta)$：<br>Repeat{</p><script type="math/tex; mode=display">\theta_j:\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta)=\theta_j-\alpha\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}</script><p>(同时更新所有的$\theta_j$)<br>}<br>它与线性回归的参数求解公式一样，但是因为线性回归和逻辑回归所设定的假设函数不一样，一个是$h_\theta(x)=\theta^Tx$,一个是$h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}$.  </p><h4 id="高级优化"><a href="#高级优化" class="headerlink" title="高级优化"></a>高级优化</h4><p>优化算法<br>代价函数$J(\theta)$,想得到$\min\limits_\theta J(\theta)$<br>当我们输入参数$\theta$的时候，我们可以使用代码计算  </p><ul><li>$J(\theta)$</li><li>$\frac{\partial}{\partial\theta_j}J(\theta)\quad (for\quad j=0,1,2…,n)$<br>梯度下降：<br>Repeat { <script type="math/tex; mode=display">\theta_j:\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta)</script>}<br><img src="/img/machine-learning/16.png" srcset="/img/loading.gif" alt="图16"><br>(共轭梯度法、BFGS、L-BFGS)<br>举例：<br>$\theta=\begin{bmatrix}\theta_1 \\ \theta_2\end{bmatrix}$<br>$J(\theta)=(\theta_1-5)^2+(\theta_2-5)^2$<br>$\frac{\partial}{\partial\theta_1}J(\theta)=2(\theta_1-5)$<br>$\frac{\partial}{\partial\theta_2}J(\theta)=2(\theta_2-5)$    <pre><code class="hljs lsl">funtion[jVal,gradient]        = costFunction(theta)    jVal = (theta(<span class="hljs-number">1</span>)<span class="hljs-number">-5</span>)^<span class="hljs-number">2</span> + ...    (theta(<span class="hljs-number">2</span>)<span class="hljs-number">-5</span>)^<span class="hljs-number">2</span>;    gradient = zeros(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);    gradient(<span class="hljs-number">1</span>) = <span class="hljs-number">2</span>*(theta(<span class="hljs-number">1</span>)<span class="hljs-number">-5</span>);    gradient(<span class="hljs-number">2</span>) = <span class="hljs-number">2</span>*(theta(<span class="hljs-number">2</span>)<span class="hljs-number">-5</span>);options = optimst('GradObj', 'on','MaxIter','<span class="hljs-number">100</span>');initialTheta = zeros(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);[optTheta, functionVal, exitFlag] ...    =fminunc(@costFunction,initialTheta,options)</code></pre></li></ul><h4 id="多元算法"><a href="#多元算法" class="headerlink" title="多元算法"></a>多元算法</h4><p>多元分类问题<br>Email 标签归类：工作、朋友、家庭和爱好<br>医学诊断：没有生病、感冒、发烧<br>天气：晴朗、多云、下雨、下雪<br><img src="/img/machine-learning/17.png" srcset="/img/loading.gif" alt="图17"><br><img src="/img/machine-learning/18.png" srcset="/img/loading.gif" alt="图18"><br>训练一个逻辑回归分类器$h_\theta^{(i)}(x)$对每一个种类进行预测。<br>新输入一个x去做分类预测，取$\max\limits_ih_\theta^{(i)}(x)$即最大值，有最好分类效果的分类器。</p><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><h4 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h4><p><img src="/img/machine-learning/19.png" srcset="/img/loading.gif" alt="图19"><br>欠拟合/正常拟合与过拟合<br>如果我们具有太多的特征，则学习的假设可能非常适合训练集，但无法归纳为新的示例（在新示例上预测价格,无法泛化一般化去预测）<br><img src="/img/machine-learning/20.png" srcset="/img/loading.gif" alt="图20"><br>有两个办法防止过拟合</p><ol><li>减少特征的数量</li></ol><ul><li>人为的删除某些特征变量</li><li>模型选择算法</li></ul><ol><li>正则化</li></ol><ul><li>保留所有的特征变量，但是减少参数值的大小</li><li>这个方法非常有效，当我们有很多特征变量时，每个变量都可以对预测做出贡献  </li></ul><p><img src="/img/machine-learning/20.png" srcset="/img/loading.gif" alt="图20"><br>假设我们在函数中加入惩罚项，使得$\theta_3$,$\theta_4$非常小</p><script type="math/tex; mode=display">\min\limits_\theta\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2</script><script type="math/tex; mode=display">\min\limits_\theta\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2+1000\theta_3^2+1000\theta_4^2</script><p>要想改写后的代价函数尽可能小，那么$\theta_3$,$\theta_4$的值都要尽量接近于0。也就是说我们只需要多余项的参数足够小，这样就可以避免过拟合。<br>将参数的值减小，我们会得到一个更简单的假设模型，也更不容易出现过拟合的现象。<br>举例房屋问题：</p><ul><li>特征：$x_1,x_2,…,x_100$</li><li>参数：$\theta$  </li></ul>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>machine-learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>吴恩达机器学习（一）</title>
    <link href="/2020/06/10/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/06/10/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="1-欢迎"><a href="#1-欢迎" class="headerlink" title="1 欢迎"></a>1 欢迎</h3><h4 id="1-1-什么是机器学习"><a href="#1-1-什么是机器学习" class="headerlink" title="1.1 什么是机器学习"></a>1.1 什么是机器学习</h4><p> A computer program is said to learn from experience E with respect  to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.<br>Supervised learning 监督学习<br>监督学习是指我们给算法一个数据集，其中包含了正确的答案（回归问题、分类问题 ）<br>Unsupervisef learning  无监督学习<br>聚类算法：探究数据集中的数据结构，数据是没有什么标签的，将数据进行归类<br>强化学习：是指智能系统在与环境的连续互动中学习最优行为测略的机器学习问题，本质是学习最优打序管决策<br><img src="/img/machine-learning/01.png" srcset="/img/loading.gif" alt="图1">  </p><h3 id="2-单变量线性回归"><a href="#2-单变量线性回归" class="headerlink" title="2 单变量线性回归"></a>2 单变量线性回归</h3><h4 id="2-1-代价函数"><a href="#2-1-代价函数" class="headerlink" title="2.1 代价函数"></a>2.1 代价函数</h4><script type="math/tex; mode=display">h_\theta(x)=\theta_0+\theta_1x</script><p>把$\theta$称为模型参数 Parameter<br>假设函数不同，参数也不同<br>在线性回归中，训练集给出一些点，我们要选择最能拟合的假设函数，合理预测y值</p><script type="math/tex; mode=display">\sum^m_{i=1}(h_\theta(x^{(i)-y^{(i)}}))^2</script><p>预测值和实际值的差的平方误差和或者说预测价格与实际卖出价格的差的平方。m是训练集的容量。<br>代价函数也称平均误差函数，可写作</p><script type="math/tex; mode=display">J(\theta_0,\theta_1)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)-y^{(i)}}))^2</script><p>我们要做的是关于$\theta_0$和$\theta_1$对函数$J(\theta_0,\theta_1)$求最小值。<br>Hypothesis: $h_\theta(x)=\theta_0+\theta_1x$<br>Parameters: $\theta_0,\theta_1$<br>Cost Function: $J(\theta_0,\theta_1)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2$<br>Goal: $minimize_{\theta_0,\theta_1} J(\theta_0,\theta_1)$<br>代价函数=优化目标<br><img src="/img/machine-learning/02.png" srcset="/img/loading.gif" alt="图2"><br><img src="/img/machine-learning/03.png" srcset="/img/loading.gif" alt="图3">   </p><h4 id="2-2-梯度下降"><a href="#2-2-梯度下降" class="headerlink" title="2.2 梯度下降"></a>2.2 梯度下降</h4><p>用梯度下降算法最小化任意函数J<br>Have some function $J(\theta_0,\theta_1)$<br>Want $min{J(\theta_0,\theta_1})$<br><strong>Outline:</strong></p><ul><li>Start with some $\theta_0,\theta_1$</li><li>Keep changing $\theta_0,\theta_1$ to reduce $J(\theta_0,\theta_1)$ until we hopefully end up at a minimum</li></ul><p><img src="/img/machine-learning/04.png" srcset="/img/loading.gif" alt="图4"><br>$\theta_0$和$\theta_1$在水平轴上，函数J在垂直坐标轴上，图形表面高度则是J的值。我们从$\theta_0$和$\theta_1$的某个值出发，对其两个赋初值，从这个函数表面的某个点出发。<br>Gradient descent algorithm<br>repeat until convergence{ </p><script type="math/tex; mode=display">\theta_j:=\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)\quad(for\quad j=0 \quad and \quad j=1)</script><p>}  </p><hr><p>Corret: Simultaneous update<br>$temp0:=\theta_0-\alpha\frac{\partial}{\partial\theta_0}J(\theta_0,\theta_1)$<br>$temp1:=\theta_1-\alpha\frac{\partial}{\partial\theta_1}J(\theta_0,\theta_1)$<br>$\theta_0:=temp0$<br>$\theta_1:=temp1$<br>用“:=”表示赋值，是一个赋值运算符，这里的$\alpha$是一个被称为学习率的数字，用来控制，梯度下降时，我们迈出多大的步子。<br>我们要同时更新$\theta_0,\theta_1$，同步更新<br>导数项代表该点的斜率<br><img src="/img/machine-learning/05.png" srcset="/img/loading.gif" alt="图5"><br>$\theta_1:=\theta_1\alpha\frac{\partial}{\partial\theta_1}J(\theta_1)$<br>If $\alpha$ is too small,gradient descent can be slow.<br>If $\alpha$ is too large,gradient descent can overshoot the minimum. It may fail to converge, or even diverge.</p><h4 id="2-3-线性回归的梯度下降"><a href="#2-3-线性回归的梯度下降" class="headerlink" title="2.3 线性回归的梯度下降"></a>2.3 线性回归的梯度下降</h4><p>将梯度函数和代价函数结合得到线性回归的算法<br>Gradient descent algorithm<br>repeat until convergence{ </p><script type="math/tex; mode=display">\theta_j:=\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)\quad(for\quad j=0 \quad and \quad j=1)</script><p>}<br>Linear Regression Model<br>Hypothesis:</p><script type="math/tex; mode=display">h_\theta(x)=\theta_0+\theta_1x</script><p>Cost Function: </p><script type="math/tex; mode=display">J(\theta_0,\theta_1)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2</script><p>关键问题在导数项：</p><script type="math/tex; mode=display">\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1) = \frac{\partial}{\partial\theta_j}\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)-y^{(i)}}))^2=\frac{\partial}{\partial\theta_j}\frac{1}{2m}\sum^m_{i=1}(\theta_0+\theta_1x^{i}-y^{i})^2</script><script type="math/tex; mode=display">j=0 : \frac{\partial}{\partial\theta_0}J(\theta_0,\theta_1)=\frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})</script><script type="math/tex; mode=display">j=1 : \frac{\partial}{\partial\theta_1}J(\theta_0,\theta_1)=\frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x^{(i)}</script><p>不断重复同步更新：<br>repeat until convergence</p><script type="math/tex; mode=display">\theta_0:=\theta_0-\alpha\frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})</script><script type="math/tex; mode=display">\theta_1=\frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x^{(i)}</script><p>我们学习出的算法叫做：Batch梯度下降法 </p><h3 id="3-线性代数回顾"><a href="#3-线性代数回顾" class="headerlink" title="3 线性代数回顾"></a>3 线性代数回顾</h3><h4 id="3-1-矩阵和向量"><a href="#3-1-矩阵和向量" class="headerlink" title="3.1 矩阵和向量"></a>3.1 矩阵和向量</h4><p>矩阵：由数字组成的阵列，并写在方括号里<br>矩阵的维数应该写作：行<em>列<br>向量：n</em>1行的矩阵，有n个元素，R^n<br>一般用大写字母表示矩阵  </p><h4 id="3-2-加法和标量乘法"><a href="#3-2-加法和标量乘法" class="headerlink" title="3.2 加法和标量乘法"></a>3.2 加法和标量乘法</h4><p>加法：</p><script type="math/tex; mode=display">\begin{bmatrix} 1 & 0 \\ 2 & 5 \\ 3 & 1\end{bmatrix}+\begin{bmatrix} 4 & 0.5 \\ 2 & 5 \\ 0 & 1\end{bmatrix}=\begin{bmatrix} 5 & 0.5 \\ 4 & 10 \\ 3 & 2\end{bmatrix}</script><p>这两个矩阵的每一个元素都逐个相加<br>标量乘法：<br>将标量与矩阵中每一个元素相乘 </p><h4 id="3-3-矩阵向量乘法"><a href="#3-3-矩阵向量乘法" class="headerlink" title="3.3 矩阵向量乘法"></a>3.3 矩阵向量乘法</h4><p>一个矩阵与向量相乘<br>m*n矩阵乘n*1向量 等于m*1向量<br>To get $y_i$,multiply A’s $i^{th}$ row with elements of vector x, and add them up.</p><h4 id="3-4-矩阵乘法"><a href="#3-4-矩阵乘法" class="headerlink" title="3.4 矩阵乘法"></a>3.4 矩阵乘法</h4><p>能够相乘的矩阵，需要满足矩阵的维度相互匹配<br><img src="/img/machine-learning/06.png" srcset="/img/loading.gif" alt="图6">  </p><h4 id="3-5-矩阵乘法的特征"><a href="#3-5-矩阵乘法的特征" class="headerlink" title="3.5 矩阵乘法的特征"></a>3.5 矩阵乘法的特征</h4><p>标量的运算，乘法可以满足交换律，但是这个不能应用在矩阵运算中<br>矩阵运算满足结合律<br>特征矩阵：Identity Matrix</p><script type="math/tex; mode=display">\begin{bmatrix} 1 & 0 & 0\\ 0 & 1 & 0 \\ 0 & 0 &1\end{bmatrix}</script><p>对角线上都是1,其他位置都是0,对于任何矩阵A </p><script type="math/tex; mode=display">A\cdot I = I \cdot A = A</script><h4 id="3-6-逆和转置"><a href="#3-6-逆和转置" class="headerlink" title="3.6 逆和转置"></a>3.6 逆和转置</h4><p>如果A矩阵是一个m$\times$m的矩阵(square)，而且它存在一个逆矩阵，</p><script type="math/tex; mode=display">AA^{-1}=A^{-1}A=I</script><script type="math/tex; mode=display">\begin{bmatrix} 3 & 4 \\ 2 & 16 \end{bmatrix}\begin{bmatrix} 0.4 & -0.1 \\ -0.05 & 0.075 \end{bmatrix} = \begin{bmatrix} 1 & 0 \\ 0 & 1 \end{bmatrix} = I_{2\times 2}</script><p>不存在逆矩阵的矩阵称作奇异矩阵  其值无限接近0<br>转置矩阵：  </p><script type="math/tex; mode=display">A=\begin{bmatrix} 1 & 2 & 0 \\ 3 & 5 & 9\end{bmatrix}</script><script type="math/tex; mode=display">A^T=\begin{bmatrix} 1 & 3 \\ 2 & 5 \\ 0 & 9 \end{bmatrix}</script><h3 id="4-多变量线性回归"><a href="#4-多变量线性回归" class="headerlink" title="4 多变量线性回归"></a>4 多变量线性回归</h3><h4 id="4-1-多功能"><a href="#4-1-多功能" class="headerlink" title="4.1 多功能"></a>4.1 多功能</h4><p>n = number of features<br>$x^{(i)}$ = input(features) of i^{th} training example<br>$x^{(i)}_j$ =value of feature j in i^{th} training example  </p><p>假设函数：</p><script type="math/tex; mode=display">h_\theta(x)=\theta_0+\theta_1x_1+\theta_2x_2+...+\theta_nx_n</script><p>为了方便，定义 $x_0=1$</p><script type="math/tex; mode=display">h_\theta(x)=\theta_0x_0+\theta_1x_1+\theta_2x_2+...+\theta_nx_n</script><h4 id="4-2-多元梯度下降法"><a href="#4-2-多元梯度下降法" class="headerlink" title="4.2 多元梯度下降法"></a>4.2 多元梯度下降法</h4><p>假设函数：$h_\theta(x)=\theta^Tx\theta_0x_0+\theta_1x_1+\theta_2x_2+…+\theta_nx_n$<br>参数： $\theta_0,\theta_1,…,\theta_n$<br>代价函数：$J(\theta_0,\theta_1,…,\theta_n)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})^2$<br>梯度下降：<br>Repeat  </p><script type="math/tex; mode=display">\theta_j:=\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta_0,...,\theta_n)</script><p>simultaneously update for every j = 0,…,n<br>New algorithm(n&gt;=1);<br>Repeat  </p><script type="math/tex; mode=display">\theta_j:=\theta_j-\alpha\frac{1}{m}\sum^m_{i=1}(h_\theta(x^{(i)})-y^{(i)})x^{(i)}</script><p>同时更新$\theta_j$, j=1,2,…,n<br>函数的特征需要保证相似的大小<br><strong>Mean normalizaton</strong><br>Replace $x_i$ with $x_i-\mu_i(平均值)$ to make features have approximately zero mean  (Do not apply to $x_0=1$)<br>例如$x_1$的范围是$0&lt;x_1\leq2000$, $x2$的范围是$0&lt;x_2\leq5$<br>特征缩放<br>$x_1=\frac{size-1000}{2000}$<br>$x_2=\frac{bedrooms-2}{5}$</p><script type="math/tex; mode=display">-0.5\leq x_1\leq0.5, -0.5 \leq x_2\leq0.5</script><p>怎么样选择学习率$\alpha$</p><h4 id="4-3-特征和多项目式回归"><a href="#4-3-特征和多项目式回归" class="headerlink" title="4.3 特征和多项目式回归"></a>4.3 特征和多项目式回归</h4><p>趋势可能是曲线，所以需要多项式，例如：</p><script type="math/tex; mode=display">\theta_0+\theta_1x+\theta_2x^2</script><p><img src="/img/machine-learning/07.png" srcset="/img/loading.gif" alt="图7"></p><h3 id="5-正规方程"><a href="#5-正规方程" class="headerlink" title="5 正规方程"></a>5 正规方程</h3><p>对于某些线性回归问题，正规方程会给我们更好的方法来求得$\theta$的最优值。<br>使用解析的方式，跟递归不同，正规方程只需要一次就可求解<br>$\theta\in R^{n+1} \quad J(\theta_0,\theta_1,…,\theta_m)=\frac{1}{2m}\sum^m_{i=1}(h_\theta(x^{(i)})-y{(i)})^2$</p><script type="math/tex; mode=display">\frac{\partial}{\partial\theta_j}J(\theta)=...=0 \qquad (for\quad every\quad j)</script><p>solve for $\theta_0,\theta_1,..,\theta_n$<br><img src="/img/machine-learning/08.png" srcset="/img/loading.gif" alt="图8"><br>增加一列$x_0$，它的取值永远是1<br>$X=\begin{bmatrix}1 &amp; 2104 &amp; 5 &amp; 1 &amp; 45 \\ 1 &amp; 1416 &amp; 3 &amp; 2 &amp; 40 \\ 1 &amp; 1534 &amp; 3 &amp; 2 &amp; 30 \\ 1 &amp; 852 &amp; 2 &amp; 1 &amp; 36\end{bmatrix}\qquad y=\begin{bmatrix}460 \\232 \\315 \\178 \end{bmatrix}$  </p><script type="math/tex; mode=display">\theta=(X^TX)^{-1}X^Ty</script><p>使用正规方程不需要特征缩放，但递归下降算法适用于处理大量的数据，大于一万，小于一万用正规方程即可。<br>在矩阵方程不可逆的时候，使用程序可以正常计算出来（伪逆），这是技术性进阶的数学原因。而不可能逆有两种原因，数值的单位不一样，还有就是样本数太少，想求的参数太多，这样可以删除某些多余的特征。  </p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>machine-learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析工具（三）</title>
    <link href="/2020/03/20/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2020/03/20/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="Pandas-库的引用"><a href="#Pandas-库的引用" class="headerlink" title="Pandas 库的引用"></a>Pandas 库的引用</h3><p>Pandas是Python第三方库，提供高性能易用数据类型和分析工具。<br><code>import pandas as pd</code><br>Pandas 基于Numpy实现，常与Numpy和Matplotlib一同使用<br>两个数据类型：Series, DataFrame<br>基于上述数据类型的各类操作<br>基本操作、运算操作、特征类操作、关联类操作<br>NumPy               Pandas<br>基础数据类型          扩展数据类型<br>关注数据的结构表达     关注数据的应用表达<br>维度：数据间关系       数据与索引间关系   </p><p>Pandas库中的Series类型,由一组数据与之相关的数据索引组成<br>index_0 —-&gt;data_a<br>index_1 —-&gt;data_b<br>index_2 —-&gt;data_c<br>index_3 —-&gt;data_d<br><pre><code class="hljs angelscript">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">2</span>]: a = pd.Series([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>])In [<span class="hljs-number">3</span>]: aOut[<span class="hljs-number">3</span>]: <span class="hljs-number">0</span>    <span class="hljs-number">9</span><span class="hljs-number">1</span>    <span class="hljs-number">8</span><span class="hljs-number">2</span>    <span class="hljs-number">7</span><span class="hljs-number">3</span>    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">4</span>]: a = pd.Series([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>], index=[<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>]) In [<span class="hljs-number">5</span>]: aOut[<span class="hljs-number">5</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64</code></pre><br>从标量值创建<br><pre><code class="hljs angelscript">In [<span class="hljs-number">7</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">8</span>]: s = pd.Series(<span class="hljs-number">25</span>, index=[<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>])In [<span class="hljs-number">9</span>]: sOut[<span class="hljs-number">9</span>]: a    <span class="hljs-number">25</span>b    <span class="hljs-number">25</span>c    <span class="hljs-number">25</span>dtype: <span class="hljs-built_in">int</span>64</code></pre><br>从字典类型创建<br><pre><code class="hljs angelscript">In [<span class="hljs-number">10</span>]: d = pd.Series(&#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">9</span>, <span class="hljs-string">'b'</span>:<span class="hljs-number">8</span>, <span class="hljs-string">'c'</span>:<span class="hljs-number">7</span>&#125;)In [<span class="hljs-number">11</span>]: dOut[<span class="hljs-number">11</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>c    <span class="hljs-number">7</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">12</span>]: e = pd.Series(&#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">9</span>, <span class="hljs-string">'b'</span>:<span class="hljs-number">8</span>, <span class="hljs-string">'c'</span>:<span class="hljs-number">7</span>&#125;, index=[<span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'d'</span>]) #index从字典中进行选择操作In [<span class="hljs-number">13</span>]: eOut[<span class="hljs-number">13</span>]: c    <span class="hljs-number">7.0</span>a    <span class="hljs-number">9.0</span>b    <span class="hljs-number">8.0</span>d    NaNdtype: <span class="hljs-built_in">float</span>64</code></pre><br>从ndarray类型创建<br><pre><code class="hljs angelscript">In [<span class="hljs-number">14</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">15</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">16</span>]: n = pd.Series(np.arange(<span class="hljs-number">5</span>))In [<span class="hljs-number">17</span>]: nOut[<span class="hljs-number">17</span>]: <span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">2</span><span class="hljs-number">3</span>    <span class="hljs-number">3</span><span class="hljs-number">4</span>    <span class="hljs-number">4</span>dtype: <span class="hljs-built_in">int</span>64</code></pre><br>Series类型的基本操作<br><pre><code class="hljs angelscript">In [<span class="hljs-number">19</span>]: aOut[<span class="hljs-number">19</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">20</span>]: b.indexIn [<span class="hljs-number">21</span>]: a.indexOut[<span class="hljs-number">21</span>]: Index([<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>], dtype=<span class="hljs-string">'object'</span>)            #.index 获得索引/.valus获得数据In [<span class="hljs-number">22</span>]: a.valuesOut[<span class="hljs-number">22</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>])</code></pre><br><pre><code class="hljs angelscript">In [<span class="hljs-number">27</span>]: b = pd.Series([<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>], index=[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>])In [<span class="hljs-number">28</span>]: bOut[<span class="hljs-number">28</span>]: a    <span class="hljs-number">8</span>b    <span class="hljs-number">9</span>c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">29</span>]: b[<span class="hljs-string">'b'</span>]         #自动索引和自定义索引并存Out[<span class="hljs-number">29</span>]: <span class="hljs-number">9</span>In [<span class="hljs-number">30</span>]: b[<span class="hljs-number">1</span>]Out[<span class="hljs-number">30</span>]: <span class="hljs-number">9</span>In [<span class="hljs-number">31</span>]: b[[<span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-number">0</span>]]        #两套索引并存，但不能混合使用Out[<span class="hljs-number">31</span>]: c    <span class="hljs-number">7.0</span>d    <span class="hljs-number">6.0</span><span class="hljs-number">0</span>    NaNdtype: <span class="hljs-built_in">float</span>64In [<span class="hljs-number">32</span>]: b[[<span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'a'</span>]]   Out[<span class="hljs-number">32</span>]: c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>a    <span class="hljs-number">8</span>dtype: <span class="hljs-built_in">int</span>64</code></pre><br>Series类型的操作类似于ndarray类型<br>索引方法相同，采用[]<br>NumPy中运算和操作可用于Series类型<br>可以通过自定义索引的列表进行切片<br>可以通过自动索引进行切片，如果含有自定义索引，它们也会被保留下来<br><pre><code class="hljs angelscript">In [<span class="hljs-number">34</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">35</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">36</span>]: b = pd.Series([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>], [<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>])In [<span class="hljs-number">37</span>]: bOut[<span class="hljs-number">37</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">38</span>]: b[<span class="hljs-number">3</span>]Out[<span class="hljs-number">38</span>]: <span class="hljs-number">6</span>In [<span class="hljs-number">39</span>]: b[:<span class="hljs-number">3</span>]Out[<span class="hljs-number">39</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>c    <span class="hljs-number">7</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">41</span>]: b[b &gt; b.median()]Out[<span class="hljs-number">41</span>]: a    <span class="hljs-number">9</span>b    <span class="hljs-number">8</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">42</span>]: np.exp(b)Out[<span class="hljs-number">42</span>]: a    <span class="hljs-number">8103.083928</span>b    <span class="hljs-number">2980.957987</span>c    <span class="hljs-number">1096.633158</span>d     <span class="hljs-number">403.428793</span>dtype: <span class="hljs-built_in">float</span>64In [<span class="hljs-number">43</span>]: <span class="hljs-string">'c'</span> <span class="hljs-keyword">in</span> bOut[<span class="hljs-number">43</span>]: TrueIn [<span class="hljs-number">44</span>]: <span class="hljs-number">0</span> <span class="hljs-keyword">in</span> b           #<span class="hljs-keyword">in</span>判断自定义索引在不在Out[<span class="hljs-number">44</span>]: FalseIn [<span class="hljs-number">45</span>]: b.<span class="hljs-keyword">get</span>(<span class="hljs-string">'f'</span>, <span class="hljs-number">100</span>)  #从b中提取f的值并返回，但f中为空，第二个参数<span class="hljs-number">100</span>,所以返回了<span class="hljs-number">100</span>Out[<span class="hljs-number">45</span>]: <span class="hljs-number">100</span>#Series + SeriesIn [<span class="hljs-number">47</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">48</span>]: a = pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>])In [<span class="hljs-number">49</span>]: b = pd.Series([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>],[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>])In [<span class="hljs-number">50</span>]: a + b Out[<span class="hljs-number">50</span>]: a    NaNb    NaNc    <span class="hljs-number">8.0</span>d    <span class="hljs-number">8.0</span>e    NaNdtype: <span class="hljs-built_in">float</span>64</code></pre><br>Series类型在运算中会自动对齐不同索引的数据<br>Series对象和索引都可以有一个名字，存储在属性.name中<br>Series对象可以随时修改并立刻生效<br><pre><code class="hljs angelscript">In [<span class="hljs-number">53</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">54</span>]: b = pd.Series([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>],[<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>])In [<span class="hljs-number">55</span>]: b[<span class="hljs-string">'a'</span>]Out[<span class="hljs-number">55</span>]: <span class="hljs-number">9</span>In [<span class="hljs-number">56</span>]: b[<span class="hljs-string">'a'</span>] = <span class="hljs-number">15</span>In [<span class="hljs-number">57</span>]: b.name = <span class="hljs-string">"Series"</span>In [<span class="hljs-number">58</span>]: bOut[<span class="hljs-number">58</span>]: a    <span class="hljs-number">15</span>b     <span class="hljs-number">8</span>c     <span class="hljs-number">7</span>d     <span class="hljs-number">6</span>Name: Series, dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">59</span>]: b[<span class="hljs-string">'a'</span>, <span class="hljs-string">'c'</span>] = <span class="hljs-number">20</span>In [<span class="hljs-number">60</span>]: bOut[<span class="hljs-number">60</span>]: a    <span class="hljs-number">20</span>b     <span class="hljs-number">8</span>c    <span class="hljs-number">20</span>d     <span class="hljs-number">6</span>Name: Series, dtype: <span class="hljs-built_in">int</span>64</code></pre></p><p>Pandas库的DataFrame类型<br>DataFrame类型由共同相同索引的一组列组成<br>index_0 —-&gt;data_a     data_1            data_w<br>index_1 —-&gt;data_b     data_2     ….   data_x<br>index_2 —-&gt;data_c     data_3            data_y<br>index_3 —-&gt;data_d     data_4            data_z<br>DataFrame是一个表格型的数据类型，每列值类型可以不同<br>DataFrame既有行索引、也有列索引<br>DataFrame常用于表达二维数据，但可以表达多维数据<br>可以由：  </p><ul><li>二维ndarray对象  </li><li>由一维ndarray、列表、字典、元组或者Series构成的字典  </li><li>Series类型  </li><li>其他的DaraFrame类型 </li></ul><h4 id="Pandas库的DataFrame类型"><a href="#Pandas库的DataFrame类型" class="headerlink" title="Pandas库的DataFrame类型"></a>Pandas库的DataFrame类型</h4><p>DataFrame类型由共同相同索引的一组列组成<br>index_0 —-&gt;data_a     data_1            data_w<br>index_1 —-&gt;data_b     data_2     ….   data_x<br>index_2 —-&gt;data_c     data_3            data_y<br>index_3 —-&gt;data_d     data_4            data_z<br>DataFrame是一个表格型的数据类型，每列值类型可以不同<br>DataFrame既有行索引、也有列索引<br>DataFrame常用于表达二维数据，但可以表达多维数据<br>可以由：<br><em>二维ndarray对象</em>由一维ndarray、列表、字典、元组或者Series构成的字典<br><em>Series类型</em>其他的DaraFrame类型</p><p>二维ndarray对象创建<br><pre><code class="hljs angelscript">In [<span class="hljs-number">62</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">63</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">64</span>]: d = pd.DataFrame(np.arange(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>))In [<span class="hljs-number">65</span>]: dOut[<span class="hljs-number">65</span>]:    <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><span class="hljs-number">1</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>In [<span class="hljs-number">66</span>]:</code></pre><br>从一维ndarray对象字典创建<br><pre><code class="hljs prolog"><span class="hljs-symbol">In</span> [<span class="hljs-number">67</span>]: dt = &#123;<span class="hljs-string">'one'</span>: pd.<span class="hljs-symbol">Series</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span> ,<span class="hljs-number">3</span>], index=[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>]), <span class="hljs-string">'two'</span>:pd.<span class="hljs-symbol">Series</span>    ...: ([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>], index=[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>])&#125;<span class="hljs-symbol">In</span> [<span class="hljs-number">68</span>]: d = pd.<span class="hljs-symbol">DataFrame</span>(dt)<span class="hljs-symbol">In</span> [<span class="hljs-number">69</span>]: d<span class="hljs-symbol">Out</span>[<span class="hljs-number">69</span>]:    one  twoa  <span class="hljs-number">1.0</span>    <span class="hljs-number">9</span>b  <span class="hljs-number">2.0</span>    <span class="hljs-number">8</span>c  <span class="hljs-number">3.0</span>    <span class="hljs-number">7</span>d  <span class="hljs-symbol">NaN</span>    <span class="hljs-number">6</span><span class="hljs-symbol">In</span> [<span class="hljs-number">70</span>]: d = pd.<span class="hljs-symbol">DataFrame</span>(dt, index=[<span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>], columns=[<span class="hljs-string">'two'</span>, <span class="hljs-string">'three'</span>])<span class="hljs-symbol">In</span> [<span class="hljs-number">71</span>]: d<span class="hljs-symbol">Out</span>[<span class="hljs-number">71</span>]:    two threeb    <span class="hljs-number">8</span>   <span class="hljs-symbol">NaN</span>c    <span class="hljs-number">7</span>   <span class="hljs-symbol">NaN</span>d    <span class="hljs-number">6</span>   <span class="hljs-symbol">NaN</span></code></pre><br>从列表类型的字典创建<br><pre><code class="hljs prolog"><span class="hljs-symbol">In</span> [<span class="hljs-number">73</span>]: dl = &#123;<span class="hljs-string">'one'</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>], <span class="hljs-string">'two'</span>:[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>]&#125;<span class="hljs-symbol">In</span> [<span class="hljs-number">75</span>]: d = pd.<span class="hljs-symbol">DataFrame</span>(dl, index = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>])<span class="hljs-symbol">In</span> [<span class="hljs-number">76</span>]: d<span class="hljs-symbol">Out</span>[<span class="hljs-number">76</span>]:    one twoa    <span class="hljs-number">1</span>   ab    <span class="hljs-number">2</span>   bc    <span class="hljs-number">3</span>   cd    <span class="hljs-number">4</span>   d<span class="hljs-symbol">In</span> [<span class="hljs-number">77</span>]:</code></pre><br><img src="/img/data/43.png" srcset="/img/loading.gif" alt="图43"><br>如何改变Series和DataFrame对象？<br>增加或重排：重新索引  .reindex()能够改变或重排Series和DataFrame索引<br><img src="/img/data/44.png" srcset="/img/loading.gif" alt="图44"><br><img src="/img/data/45.png" srcset="/img/loading.gif" alt="图45"><br><img src="/img/data/46.png" srcset="/img/loading.gif" alt="图46"><br>Series 和DataFrame的索引是Index类型<br>Index对象是不可修改类型<br><img src="/img/data/47.png" srcset="/img/loading.gif" alt="图47"><br><img src="/img/data/48.png" srcset="/img/loading.gif" alt="图48"><br>使用.drop()能够删除Series和DataFrame指定行或列索引<br><img src="/img/data/49.png" srcset="/img/loading.gif" alt="图49">   </p><h4 id="Pandas库的算术运算法则"><a href="#Pandas库的算术运算法则" class="headerlink" title="Pandas库的算术运算法则"></a>Pandas库的算术运算法则</h4><p>算术运算根据行列索引，补齐后运算，运算默认产生浮点数<br>补齐时缺项填充NaN（空值）<br>二维和一维、一维和零维间为广播运算<br>采用+-*/符号进行的二元运算产生新的对象<br><pre><code class="hljs angelscript">In [<span class="hljs-number">78</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">79</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">80</span>]: a = pd.DataFrame(np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">81</span>]: aOut[<span class="hljs-number">81</span>]:    <span class="hljs-number">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span><span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span><span class="hljs-number">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span><span class="hljs-number">2</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>In [<span class="hljs-number">82</span>]: b = pd.DataFrame(np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))In [<span class="hljs-number">83</span>]: bOut[<span class="hljs-number">83</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">1</span>   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span><span class="hljs-number">2</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span><span class="hljs-number">3</span>  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>In [<span class="hljs-number">84</span>]: a + b Out[<span class="hljs-number">84</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">2.0</span>   <span class="hljs-number">4.0</span>   <span class="hljs-number">6.0</span> NaN<span class="hljs-number">1</span>   <span class="hljs-number">9.0</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">13.0</span>  <span class="hljs-number">15.0</span> NaN<span class="hljs-number">2</span>  <span class="hljs-number">18.0</span>  <span class="hljs-number">20.0</span>  <span class="hljs-number">22.0</span>  <span class="hljs-number">24.0</span> NaN<span class="hljs-number">3</span>   NaN   NaN   NaN   NaN NaNIn [<span class="hljs-number">85</span>]: a * bOut[<span class="hljs-number">85</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>      <span class="hljs-number">2</span>      <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">1.0</span>    <span class="hljs-number">4.0</span>    <span class="hljs-number">9.0</span> NaN<span class="hljs-number">1</span>  <span class="hljs-number">20.0</span>  <span class="hljs-number">30.0</span>   <span class="hljs-number">42.0</span>   <span class="hljs-number">56.0</span> NaN<span class="hljs-number">2</span>  <span class="hljs-number">80.0</span>  <span class="hljs-number">99.0</span>  <span class="hljs-number">120.0</span>  <span class="hljs-number">143.0</span> NaN<span class="hljs-number">3</span>   NaN   NaN    NaN    NaN NaN</code></pre><br><img src="/img/data/50.png" srcset="/img/loading.gif" alt="图50"><br><pre><code class="hljs angelscript">In [<span class="hljs-number">86</span>]: b.add(a, fill_value = <span class="hljs-number">100</span>)Out[<span class="hljs-number">86</span>]:        <span class="hljs-number">0</span>      <span class="hljs-number">1</span>      <span class="hljs-number">2</span>      <span class="hljs-number">3</span>      <span class="hljs-number">4</span><span class="hljs-number">0</span>    <span class="hljs-number">0.0</span>    <span class="hljs-number">2.0</span>    <span class="hljs-number">4.0</span>    <span class="hljs-number">6.0</span>  <span class="hljs-number">104.0</span><span class="hljs-number">1</span>    <span class="hljs-number">9.0</span>   <span class="hljs-number">11.0</span>   <span class="hljs-number">13.0</span>   <span class="hljs-number">15.0</span>  <span class="hljs-number">109.0</span><span class="hljs-number">2</span>   <span class="hljs-number">18.0</span>   <span class="hljs-number">20.0</span>   <span class="hljs-number">22.0</span>   <span class="hljs-number">24.0</span>  <span class="hljs-number">114.0</span><span class="hljs-number">3</span>  <span class="hljs-number">115.0</span>  <span class="hljs-number">116.0</span>  <span class="hljs-number">117.0</span>  <span class="hljs-number">118.0</span>  <span class="hljs-number">119.0</span>In [<span class="hljs-number">87</span>]: b.mul(a, fill_value = <span class="hljs-number">0</span>)Out[<span class="hljs-number">87</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>      <span class="hljs-number">2</span>      <span class="hljs-number">3</span>    <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">1.0</span>    <span class="hljs-number">4.0</span>    <span class="hljs-number">9.0</span>  <span class="hljs-number">0.0</span><span class="hljs-number">1</span>  <span class="hljs-number">20.0</span>  <span class="hljs-number">30.0</span>   <span class="hljs-number">42.0</span>   <span class="hljs-number">56.0</span>  <span class="hljs-number">0.0</span><span class="hljs-number">2</span>  <span class="hljs-number">80.0</span>  <span class="hljs-number">99.0</span>  <span class="hljs-number">120.0</span>  <span class="hljs-number">143.0</span>  <span class="hljs-number">0.0</span><span class="hljs-number">3</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">0.0</span>    <span class="hljs-number">0.0</span>    <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span></code></pre><br>fill_value 参数代替NaN，代替后参与运算<br><pre><code class="hljs angelscript">In [<span class="hljs-number">88</span>]: bOut[<span class="hljs-number">88</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">1</span>   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span><span class="hljs-number">2</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span><span class="hljs-number">3</span>  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>In [<span class="hljs-number">89</span>]: c = pd.Series(np.arange(<span class="hljs-number">4</span>))In [<span class="hljs-number">90</span>]: cOut[<span class="hljs-number">90</span>]: <span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">2</span><span class="hljs-number">3</span>    <span class="hljs-number">3</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">91</span>]: c <span class="hljs-number">-10</span>Out[<span class="hljs-number">91</span>]: <span class="hljs-number">0</span>   <span class="hljs-number">-10</span><span class="hljs-number">1</span>    <span class="hljs-number">-9</span><span class="hljs-number">2</span>    <span class="hljs-number">-8</span><span class="hljs-number">3</span>    <span class="hljs-number">-7</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">92</span>]: b - cOut[<span class="hljs-number">92</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>   <span class="hljs-number">4</span><span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">0.0</span> NaN<span class="hljs-number">1</span>   <span class="hljs-number">5.0</span>   <span class="hljs-number">5.0</span>   <span class="hljs-number">5.0</span>   <span class="hljs-number">5.0</span> NaN<span class="hljs-number">2</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">10.0</span> NaN<span class="hljs-number">3</span>  <span class="hljs-number">15.0</span>  <span class="hljs-number">15.0</span>  <span class="hljs-number">15.0</span>  <span class="hljs-number">15.0</span> NaN</code></pre><br>不同维度间为广播运算，一维Series默认在轴1参与运算<br>比较运算<br>同维度运算，尺寸一致<br>不同维度运算为广播运算，运算在轴1<br>Python 数据特征的提取<br> Pandas库的数据排序<br><code>.sort_index()方法在指定轴上根据索引进行排序，默认升序</code><br><code>.sort_index(axis=,ascending=True)</code><br><pre><code class="hljs angelscript">In [<span class="hljs-number">94</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">95</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">96</span>]: b = pd.DataFrame(np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>),index=[<span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'b'</span>])In [<span class="hljs-number">97</span>]: bOut[<span class="hljs-number">97</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>In [<span class="hljs-number">99</span>]: b.sort_index()Out[<span class="hljs-number">99</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>In [<span class="hljs-number">100</span>]: b.sort_index(ascending=True)Out[<span class="hljs-number">100</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>In [<span class="hljs-number">101</span>]: b.sort_index(ascending=False)Out[<span class="hljs-number">101</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>In [<span class="hljs-number">102</span>]: b.sort_index(axis=<span class="hljs-number">1</span>, ascending=False)Out[<span class="hljs-number">102</span>]:     <span class="hljs-number">4</span>   <span class="hljs-number">3</span>   <span class="hljs-number">2</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>c   <span class="hljs-number">4</span>   <span class="hljs-number">3</span>   <span class="hljs-number">2</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>a   <span class="hljs-number">9</span>   <span class="hljs-number">8</span>   <span class="hljs-number">7</span>   <span class="hljs-number">6</span>   <span class="hljs-number">5</span>d  <span class="hljs-number">14</span>  <span class="hljs-number">13</span>  <span class="hljs-number">12</span>  <span class="hljs-number">11</span>  <span class="hljs-number">10</span>b  <span class="hljs-number">19</span>  <span class="hljs-number">18</span>  <span class="hljs-number">17</span>  <span class="hljs-number">16</span>  <span class="hljs-number">15</span></code></pre><br><code>.sort_value()</code>方法在指定轴上根据数值进行排序，默认升序<br><code>Series.sort_values(axis=0, ascending=True)</code><br><code>DataFrame.sort_values(by, axis = 0, ascending=True)</code><br>by : axis轴上某个索引或者索引列表<br><pre><code class="hljs angelscript">In [<span class="hljs-number">105</span>]: c = b.sort_values(<span class="hljs-number">2</span>, ascending=False)In [<span class="hljs-number">106</span>]: cOut[<span class="hljs-number">106</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>In [<span class="hljs-number">107</span>]: c = b.sort_values(<span class="hljs-string">'a'</span>, axis=<span class="hljs-number">1</span>, ascending=False)In [<span class="hljs-number">108</span>]: cOut[<span class="hljs-number">108</span>]:     <span class="hljs-number">4</span>   <span class="hljs-number">3</span>   <span class="hljs-number">2</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>c   <span class="hljs-number">4</span>   <span class="hljs-number">3</span>   <span class="hljs-number">2</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>a   <span class="hljs-number">9</span>   <span class="hljs-number">8</span>   <span class="hljs-number">7</span>   <span class="hljs-number">6</span>   <span class="hljs-number">5</span>d  <span class="hljs-number">14</span>  <span class="hljs-number">13</span>  <span class="hljs-number">12</span>  <span class="hljs-number">11</span>  <span class="hljs-number">10</span>b  <span class="hljs-number">19</span>  <span class="hljs-number">18</span>  <span class="hljs-number">17</span>  <span class="hljs-number">16</span>  <span class="hljs-number">15</span></code></pre><br>NaN统一放到末尾  </p><h4 id="Pandas基本分析函数"><a href="#Pandas基本分析函数" class="headerlink" title="Pandas基本分析函数"></a>Pandas基本分析函数</h4><p>适用于Series和DataFrame类型<br><img src="/img/data/51.png" srcset="/img/loading.gif" alt="图51"><br><img src="/img/data/52.png" srcset="/img/loading.gif" alt="图52"><br><pre><code class="hljs angelscript">In [<span class="hljs-number">109</span>]: c =pd.Series([<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>], index=[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>])In [<span class="hljs-number">110</span>]: cOut[<span class="hljs-number">110</span>]: a    <span class="hljs-number">8</span>b    <span class="hljs-number">9</span>c    <span class="hljs-number">7</span>d    <span class="hljs-number">6</span>dtype: <span class="hljs-built_in">int</span>64In [<span class="hljs-number">111</span>]: c.describe()Out[<span class="hljs-number">111</span>]: count    <span class="hljs-number">4.000000</span>mean     <span class="hljs-number">7.500000</span>std      <span class="hljs-number">1.290994</span>min      <span class="hljs-number">6.000000</span><span class="hljs-number">25</span>%      <span class="hljs-number">6.750000</span><span class="hljs-number">50</span>%      <span class="hljs-number">7.500000</span><span class="hljs-number">75</span>%      <span class="hljs-number">8.250000</span>max      <span class="hljs-number">9.000000</span>dtype: <span class="hljs-built_in">float</span>64</code></pre><br>只适用于Series类型</p><p><img src="/img/data/53.png" srcset="/img/loading.gif" alt="图53">   </p><p>数据的累计统计分析<br>适用于Series和DataFrame类型<br><img src="/img/data/54.png" srcset="/img/loading.gif" alt="图54"><br><pre><code class="hljs angelscript"> In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">2</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">3</span>]: b = pd.DataFrame(np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>),index=[<span class="hljs-string">'c'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'d'</span>,<span class="hljs-string">'b'</span>])In [<span class="hljs-number">4</span>]: bOut[<span class="hljs-number">4</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>In [<span class="hljs-number">5</span>]: b.cumsum()Out[<span class="hljs-number">5</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">7</span>   <span class="hljs-number">9</span>  <span class="hljs-number">11</span>  <span class="hljs-number">13</span>d  <span class="hljs-number">15</span>  <span class="hljs-number">18</span>  <span class="hljs-number">21</span>  <span class="hljs-number">24</span>  <span class="hljs-number">27</span>b  <span class="hljs-number">30</span>  <span class="hljs-number">34</span>  <span class="hljs-number">38</span>  <span class="hljs-number">42</span>  <span class="hljs-number">46</span>In [<span class="hljs-number">6</span>]: b.cumprod()Out[<span class="hljs-number">6</span>]:    <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>c  <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>a  <span class="hljs-number">0</span>     <span class="hljs-number">6</span>    <span class="hljs-number">14</span>    <span class="hljs-number">24</span>    <span class="hljs-number">36</span>d  <span class="hljs-number">0</span>    <span class="hljs-number">66</span>   <span class="hljs-number">168</span>   <span class="hljs-number">312</span>   <span class="hljs-number">504</span>b  <span class="hljs-number">0</span>  <span class="hljs-number">1056</span>  <span class="hljs-number">2856</span>  <span class="hljs-number">5616</span>  <span class="hljs-number">9576</span>In [<span class="hljs-number">7</span>]: b.cummin()Out[<span class="hljs-number">7</span>]:    <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>c  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>a  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>d  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>b  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>In [<span class="hljs-number">8</span>]: b.cummax()Out[<span class="hljs-number">8</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span></code></pre><br>适用于Series和DataFrame类型，滚动计算（窗口计算）<br><img src="/img/data/55.png" srcset="/img/loading.gif" alt="图55"><br><pre><code class="hljs angelscript"> In [<span class="hljs-number">10</span>]: <span class="hljs-keyword">import</span> pandas as pdIn [<span class="hljs-number">11</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">12</span>]: b = pd.DataFrame(np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>),index=[<span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'b'</span>])In [<span class="hljs-number">13</span>]: bOut[<span class="hljs-number">13</span>]:     <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>c   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>a   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   <span class="hljs-number">9</span>d  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  <span class="hljs-number">13</span>  <span class="hljs-number">14</span>b  <span class="hljs-number">15</span>  <span class="hljs-number">16</span>  <span class="hljs-number">17</span>  <span class="hljs-number">18</span>  <span class="hljs-number">19</span>In [<span class="hljs-number">14</span>]: b.rolling(<span class="hljs-number">2</span>).sum()Out[<span class="hljs-number">14</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>c   NaN   NaN   NaN   NaN   NaNa   <span class="hljs-number">5.0</span>   <span class="hljs-number">7.0</span>   <span class="hljs-number">9.0</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">13.0</span>d  <span class="hljs-number">15.0</span>  <span class="hljs-number">17.0</span>  <span class="hljs-number">19.0</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">23.0</span>b  <span class="hljs-number">25.0</span>  <span class="hljs-number">27.0</span>  <span class="hljs-number">29.0</span>  <span class="hljs-number">31.0</span>  <span class="hljs-number">33.0</span>In [<span class="hljs-number">15</span>]: b.rolling(<span class="hljs-number">3</span>).sum()Out[<span class="hljs-number">15</span>]:       <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>c   NaN   NaN   NaN   NaN   NaNa   NaN   NaN   NaN   NaN   NaNd  <span class="hljs-number">15.0</span>  <span class="hljs-number">18.0</span>  <span class="hljs-number">21.0</span>  <span class="hljs-number">24.0</span>  <span class="hljs-number">27.0</span>b  <span class="hljs-number">30.0</span>  <span class="hljs-number">33.0</span>  <span class="hljs-number">36.0</span>  <span class="hljs-number">39.0</span>  <span class="hljs-number">42.0</span></code></pre></p><h4 id="数据的相关分析"><a href="#数据的相关分析" class="headerlink" title="数据的相关分析"></a>数据的相关分析</h4><p>两个事物，表示为X和Y，如何判断它们之间的相关性？  </p><ul><li>X增大，Y增大，两个变量正相关  </li><li>X增大，Y减小，两个变量负相关  </li><li>X增大，Y无视，两个变量不相关<br>斜方差<br>两个事物，表示为X和Y<br><img src="/img/data/56.png" srcset="/img/loading.gif" alt="图56"><br>Pearson相关系数<br><img src="/img/data/57.png" srcset="/img/loading.gif" alt="图57"><br><img src="/img/data/58.png" srcset="/img/loading.gif" alt="图58"> <pre><code class="hljs 1c">In [<span class="hljs-number">17</span>]: hprice = pd.Series([<span class="hljs-number">3.04</span>,<span class="hljs-number">22.93</span>,<span class="hljs-number">12.75</span>,<span class="hljs-number">22.6</span>,<span class="hljs-number">12.33</span>], index = ['<span class="hljs-number">2008</span>','<span class="hljs-number">2009</span>',    ...: '<span class="hljs-number">2010</span>', '<span class="hljs-number">2011</span>', '<span class="hljs-number">2012</span>'])In [<span class="hljs-number">18</span>]: m2 = pd.Series([<span class="hljs-number">8.18</span>,<span class="hljs-number">18.38</span>,<span class="hljs-number">9.13</span>,<span class="hljs-number">7.82</span>,<span class="hljs-number">6.69</span>], index=['<span class="hljs-number">2008</span>','<span class="hljs-number">2009</span>', '<span class="hljs-number">2010</span>',    ...: '<span class="hljs-number">2011</span>', '<span class="hljs-number">2012</span>'])In [<span class="hljs-number">20</span>]: hprice.corr(m2)Out[<span class="hljs-number">20</span>]: <span class="hljs-number">0.5239439145220387</span></code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>numpy</tag>
      
      <tag>matplotlib</tag>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析工具（二）</title>
    <link href="/2020/03/13/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/03/13/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="图像的数组表示"><a href="#图像的数组表示" class="headerlink" title="图像的数组表示"></a>图像的数组表示</h3><p>图像的RGB色彩模式<br>RGB三个颜色通道的变化和叠加得到各种颜色，其中<br><em>R红色，取值范围，0-255  </em>G绿色，取值范围，0-255<br>*B蓝色，取值范围，0-255<br>RGB形成的颜色包括了人类视力感知的所有颜色<br>PIL库，Python Image Library<br>PIL库是一个具有强大图像处理能力的第三方库<br><code>from PIL import Image</code><br>Image 是PIL库中代表一个图像的类（对象）<br>图像是一个由像素组成的二维矩阵，每个元素是一个RGB值<br><pre><code class="hljs angelscript">In [<span class="hljs-number">61</span>]: <span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageIn [<span class="hljs-number">62</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">63</span>]: im = np.<span class="hljs-built_in">array</span>(Image.open(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/1.jpg"</span>))In [<span class="hljs-number">64</span>]: print(im.shape,im.dtype)(<span class="hljs-number">853</span>, <span class="hljs-number">1280</span>, <span class="hljs-number">3</span>) <span class="hljs-built_in">uint</span>8</code></pre><br>图像是一个三维数组  </p><p>图像变换<br>读入图像后，获得像素RGB值，修改后保存为新的文件<br><pre><code class="hljs angelscript">In [<span class="hljs-number">66</span>]: <span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageIn [<span class="hljs-number">67</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">68</span>]: a = np.<span class="hljs-built_in">array</span>(Image.open(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/1.jpg"</span>))In [<span class="hljs-number">69</span>]: print(a.shape,a.dtype)(<span class="hljs-number">853</span>, <span class="hljs-number">1280</span>, <span class="hljs-number">3</span>) <span class="hljs-built_in">uint</span>8In [<span class="hljs-number">70</span>]: b = [<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>] -aIn [<span class="hljs-number">71</span>]: im = Image.fromarray(b.astype(<span class="hljs-string">'uint8'</span>))In [<span class="hljs-number">72</span>]: im.save(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/2.jpg"</span>)In [<span class="hljs-number">73</span>]: c = np.<span class="hljs-built_in">array</span>(Image.open(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/1.jpg"</span>).convert(<span class="hljs-string">'L'</span>))In [<span class="hljs-number">74</span>]: d = <span class="hljs-number">255</span> - cIn [<span class="hljs-number">75</span>]: ip = Image.fromarray(d.astype(<span class="hljs-string">'uint8'</span>))In [<span class="hljs-number">76</span>]: ip.save(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/3.jpg"</span>)In [<span class="hljs-number">77</span>]: e = (<span class="hljs-number">100</span>/<span class="hljs-number">255</span>)*c + <span class="hljs-number">150</span> #区间变换In [<span class="hljs-number">80</span>]: it = Image.fromarray(e.astype(<span class="hljs-string">'uint8'</span>))In [<span class="hljs-number">81</span>]: it.save(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/4.jpg"</span>)In [<span class="hljs-number">82</span>]: f = <span class="hljs-number">255</span>*(a/<span class="hljs-number">255</span>)**<span class="hljs-number">2</span>In [<span class="hljs-number">83</span>]: im = Image.fromarray(f.astype(<span class="hljs-string">'uint8'</span>))In [<span class="hljs-number">84</span>]: im.save(<span class="hljs-string">"/home/liu/Pictures/Wallpapers/5.jpg"</span>)</code></pre><br>“图像的手绘效果”实例分析<br>手绘效果的几个特征：<br><em>黑白灰色  </em>边界线条较重<br><em>相同或相近色彩趋于白色  </em>略有光源效果<br><pre><code class="hljs angelscript">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageIn [<span class="hljs-number">2</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">3</span>]: a = np.<span class="hljs-built_in">array</span>(Image.open(<span class="hljs-string">'/home/liu/Pictures/Wallpapers/1.jpg'</span>).convert(<span class="hljs-string">'L'</span>)).astype(<span class="hljs-string">'float'</span>)In [<span class="hljs-number">4</span>]: depth = <span class="hljs-number">10.</span>              #(<span class="hljs-number">0</span><span class="hljs-number">-100</span>)In [<span class="hljs-number">5</span>]: grad = np.gradient(a)    #取图像灰度的梯度值                                 In [<span class="hljs-number">6</span>]: grad_x, grad_y = grad    #分别取横纵图像梯度值In [<span class="hljs-number">7</span>]: grad_x = grad_x*depth/<span class="hljs-number">100.</span>  #利用深度值*梯度值来添加深度值对梯度值的影响因素，然后/<span class="hljs-number">100</span>进行归一化处理In [<span class="hljs-number">8</span>]: grad_y = grad_y*depth/<span class="hljs-number">100.</span>In [<span class="hljs-number">9</span>]: A = np.sqrt(grad_x**<span class="hljs-number">2</span> + grad_y**<span class="hljs-number">2</span> + <span class="hljs-number">1.</span>) #构造x和y轴梯度的三维归一化单位坐标系In [<span class="hljs-number">10</span>]: uni_x = grad_x/A                       In [<span class="hljs-number">11</span>]: uni_y = grad_y/AIn [<span class="hljs-number">12</span>]: uni_z = <span class="hljs-number">1.</span>/AIn [<span class="hljs-number">13</span>]: vec_e1 = np.pi/<span class="hljs-number">2.2</span>                  #光源的俯视角度，弧度值                     In [<span class="hljs-number">14</span>]: vec_az = np.pi/<span class="hljs-number">4</span>                    #光源的方位角度，弧度值In [<span class="hljs-number">15</span>]: dx = np.cos(vec_e1)*np.cos(vec_az)  #光源对x轴的影响In [<span class="hljs-number">16</span>]: dy = np.cos(vec_e1)*np.sin(vec_az)  #光源对y轴的影响In [<span class="hljs-number">17</span>]: dz = np.sin(vec_e1)                 #光源对z轴的影响In [<span class="hljs-number">19</span>]: b = <span class="hljs-number">255</span>*(dx*uni_x + dy*uni_y + dz*uni_z)   #梯度和光源相互作用，将梯度转化为灰度，光源归一化In [<span class="hljs-number">20</span>]: b.clip(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)  #为避免数据越界，将生成的灰度值裁剪至<span class="hljs-number">0</span><span class="hljs-number">-255</span>区间Out[<span class="hljs-number">20</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">253.70520777</span>, <span class="hljs-number">252.40446768</span>, <span class="hljs-number">250.80809797</span>, ..., <span class="hljs-number">252.40446768</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>],       [<span class="hljs-number">253.70520777</span>, <span class="hljs-number">252.40446768</span>, <span class="hljs-number">250.80809797</span>, ..., <span class="hljs-number">252.40446768</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>],       [<span class="hljs-number">253.70520777</span>, <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>, ..., <span class="hljs-number">251.77581299</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>],       ...,       [<span class="hljs-number">250.97588848</span>, <span class="hljs-number">249.66293851</span>, <span class="hljs-number">250.80809797</span>, ..., <span class="hljs-number">252.40446768</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>],       [<span class="hljs-number">252.11668729</span>, <span class="hljs-number">251.84198642</span>, <span class="hljs-number">251.77581299</span>, ..., <span class="hljs-number">252.40446768</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>],       [<span class="hljs-number">248.82580592</span>, <span class="hljs-number">253.41853376</span>, <span class="hljs-number">249.5664661</span> , ..., <span class="hljs-number">252.40446768</span>,        <span class="hljs-number">252.40446768</span>, <span class="hljs-number">252.40446768</span>]])In [<span class="hljs-number">21</span>]: im = Image.fromarray(b.astype(<span class="hljs-string">'uint8'</span>))       #重构图像In [<span class="hljs-number">22</span>]: im.save(<span class="hljs-string">'/home/liu/Pictures/Wallpapers/hand.jpg'</span>)</code></pre><br><img src="/img/data/21.png" srcset="/img/loading.gif" alt="图21"><br><img src="/img/data/22.png" srcset="/img/loading.gif" alt="图22"><br><img src="/img/data/23.png" srcset="/img/loading.gif" alt="图23"><br><img src="/img/data/24.png" srcset="/img/loading.gif" alt="图24">   </p><h3 id="Matplotlib库的介绍"><a href="#Matplotlib库的介绍" class="headerlink" title="Matplotlib库的介绍"></a>Matplotlib库的介绍</h3><p>python是优秀的数据可视化第三方库<br>Matolotlib库由各种可视化类构成，内部结构复杂，受Matlab的启发<br>matplotlib.pyplot是绘制各类可视化图形的命令子库，相当于快捷方式。<br>import matplotlib.pyplot as plt(引入模块的别名)<br><pre><code class="hljs angelscript"><span class="hljs-keyword">import</span>  matplotlib.pyplot  as pltplt.plot([<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>])plt.ylabel(<span class="hljs-string">"Grade"</span>)plt.savefig(<span class="hljs-string">'test'</span>, dpi=<span class="hljs-number">600</span>)  #pngplt.show()</code></pre><br><code>plt.savefig()</code>将输出图形存储为文件，默认为PNG格式，可以通过dpi修改输出质量<br><pre><code class="hljs angelscript"><span class="hljs-keyword">import</span>  matplotlib.pyplot  as pltplt.plot([<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>], [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>])plt.ylabel(<span class="hljs-string">"Grade"</span>)plt.axis([<span class="hljs-number">-1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>])plt.show()</code></pre><br><img src="/img/data/25.png" srcset="/img/loading.gif" alt="图25"><br>plt.plot(x,y)当有两个以上的参数时，按照x轴和y轴的顺序绘制数据点<br>pyplot的绘图区域<br><code>plt.subplot(nrows,ncols,plot_number)</code><br><code>plt.subplot(3,2,4)</code><br><img src="/img/data/26.png" srcset="/img/loading.gif" alt="图26"><br>在全局绘图区域中创立一个分区体系，并定位到一个子绘图区域<br><pre><code class="hljs livecodeserver">import numpy <span class="hljs-keyword">as</span> np import matplotlib.pyplot <span class="hljs-keyword">as</span> plt def f(t):    <span class="hljs-literal">return</span> np.<span class="hljs-built_in">exp</span>(-t) * np.<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*np.<span class="hljs-literal">pi</span>*t)<span class="hljs-keyword">a</span> = np.arange(<span class="hljs-number">0.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">0.02</span>)plt.subplot(<span class="hljs-number">211</span>)plt.plot(<span class="hljs-keyword">a</span>, f(<span class="hljs-keyword">a</span>))plt.subplot(<span class="hljs-number">212</span>)plt.plot(<span class="hljs-keyword">a</span>, np.<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*np.<span class="hljs-literal">pi</span>*<span class="hljs-number">2</span>),  <span class="hljs-string">'r--'</span>)plt.show()</code></pre><br>plt.plot(x, y, format_string, <strong>kwargs)<br>x:  X轴数据， 列表或数组，可选<br>y:  Y轴数据， 列表或数组。<br>format_string:  控制曲线的格式字符串，可选  </strong>kwargs:  第二组或更多（x, y, format_string）<br>当绘制多条曲线时，各条曲线的x不能省略<br><pre><code class="hljs livecodeserver">import numpy <span class="hljs-keyword">as</span> np import matplotlib.pyplot <span class="hljs-keyword">as</span> plt <span class="hljs-keyword">a</span> = np.arange(<span class="hljs-number">10</span>)plt.plot(<span class="hljs-keyword">a</span>,   <span class="hljs-keyword">a</span>*<span class="hljs-number">1.5</span>,    <span class="hljs-keyword">a</span>,    <span class="hljs-keyword">a</span>*<span class="hljs-number">2.5</span>,   <span class="hljs-keyword">a</span>,   <span class="hljs-keyword">a</span>*<span class="hljs-number">3.5</span> ,   <span class="hljs-keyword">a</span>,     <span class="hljs-keyword">a</span>*<span class="hljs-number">4.5</span> )plt.show()</code></pre><br><img src="/img/data/27.png" srcset="/img/loading.gif" alt="图27"><br>format_string:  控制曲线的格式字符串，可选由颜色字符、风格字符和标记字符组成<br><img src="/img/data/28.png" srcset="/img/loading.gif" alt="图28"><br><img src="/img/data/29.png" srcset="/img/loading.gif" alt="图29"><br><img src="/img/data/30.png" srcset="/img/loading.gif" alt="图30"><br><pre><code class="hljs livecodeserver">import numpy <span class="hljs-keyword">as</span> np import matplotlib.pyplot <span class="hljs-keyword">as</span> plt <span class="hljs-keyword">a</span> = np.arange(<span class="hljs-number">10</span>)plt.plot(<span class="hljs-keyword">a</span>,   <span class="hljs-keyword">a</span>*<span class="hljs-number">1.5</span>,    <span class="hljs-string">'go-'</span> ,   <span class="hljs-keyword">a</span>,    <span class="hljs-keyword">a</span>*<span class="hljs-number">2.5</span>,   <span class="hljs-string">'rx'</span>,   <span class="hljs-keyword">a</span>,   <span class="hljs-keyword">a</span>*<span class="hljs-number">3.5</span> ,  <span class="hljs-string">' * '</span>,    <span class="hljs-keyword">a</span>,     <span class="hljs-keyword">a</span>*<span class="hljs-number">4.5</span> ,  <span class="hljs-string">'b-.'</span> )plt.show()</code></pre><br><img src="/img/data/31.png" srcset="/img/loading.gif" alt="图31"><br><img src="/img/data/32.png" srcset="/img/loading.gif" alt="图32"><br>pyplot的中文显示方法<br>pyplot并不支持中文显示，需要rcParams修改字体实现<br><pre><code class="hljs xl"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> matplotlibmatplotlib.rcParams[<span class="hljs-string">'font.family'</span>]=<span class="hljs-string">'SimHei'</span> #SinHei是黑体plt.plot([<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>])plt.ylabel(<span class="hljs-string">"纵轴（值）"</span>)plt.savefig(<span class="hljs-string">'test'</span>,dpi=<span class="hljs-number">600</span>)plt.show()</code></pre><br><img src="/img/data/33.png" srcset="/img/loading.gif" alt="图33"><br><img src="/img/data/34.png" srcset="/img/loading.gif" alt="图34"><br><pre><code class="hljs xl"><span class="hljs-keyword">import</span>  numpy <span class="hljs-keyword">as</span> np <span class="hljs-keyword">import</span>  matplotlib.pyplot <span class="hljs-keyword">as</span> plt <span class="hljs-keyword">import</span>  matplotlibmatplotlib.rcParams[<span class="hljs-string">'font.family'</span>]=<span class="hljs-string">'STSong'</span>matplotlib.rcParams[<span class="hljs-string">'font.size'</span>] = <span class="hljs-number">20</span>a = np.arange(<span class="hljs-number">0.0</span>,  <span class="hljs-number">5.0</span>,  <span class="hljs-number">0.02</span>)plt.xlabel(<span class="hljs-string">'横轴：时间'</span>)plt.ylabel(<span class="hljs-string">'纵轴：振幅'</span>)plt.plot(a, np.<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*np.<span class="hljs-built_in">pi</span>*a),   <span class="hljs-string">'r--'</span>)plt.show()</code></pre><br>第二种方法，在有中文输出的地方，增加一个属性：fontproperties(建议使用)<br><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span>  numpy <span class="hljs-keyword">as</span> np <span class="hljs-keyword">import</span>  matplotlib.pyplot <span class="hljs-keyword">as</span> plt a = np.arange(<span class="hljs-number">0.0</span>,  <span class="hljs-number">5.0</span>,  <span class="hljs-number">0.02</span>)plt.xlabel(<span class="hljs-string">'横轴：时间'</span>,  fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">20</span>)plt.ylabel(<span class="hljs-string">'纵轴：振幅'</span> , fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">20</span>)plt.plot(a, np.cos(<span class="hljs-number">2</span>*np.pi*a),   <span class="hljs-string">'r--)</span><span class="hljs-string">plt.show()</span></code></pre><br>pyplot的文本显示函数<br><img src="/img/data/35.png" srcset="/img/loading.gif" alt="图35"><br><pre><code class="hljs python"><span class="hljs-keyword">import</span>  numpy <span class="hljs-keyword">as</span> np <span class="hljs-keyword">import</span>  matplotlib.pyplot <span class="hljs-keyword">as</span> plt a = np.arange(<span class="hljs-number">0.0</span>,  <span class="hljs-number">5.0</span>,  <span class="hljs-number">0.02</span>)plt.plot(a, np.cos(<span class="hljs-number">2</span>*np.pi*a),   <span class="hljs-string">'r--'</span>)plt.xlabel(<span class="hljs-string">'1'</span>,  fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">15</span>, color=<span class="hljs-string">'green'</span>)plt.ylabel(<span class="hljs-string">'2'</span> , fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">20</span>)plt.title(<span class="hljs-string">'shili  $y=cos(2\pi  x)$'</span>, fontproperties= <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">25</span>)plt.text(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-string">r'$\mu=100$'</span>, fontsize=<span class="hljs-number">15</span>)plt.axis([<span class="hljs-number">-1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">2</span>])plt.grid(<span class="hljs-literal">True</span>)plt.show()</code></pre><br><img src="/img/data/36.png" srcset="/img/loading.gif" alt="图36"><br> <pre><code class="hljs python"><span class="hljs-keyword">import</span>  numpy <span class="hljs-keyword">as</span> np <span class="hljs-keyword">import</span>  matplotlib.pyplot <span class="hljs-keyword">as</span> plt a = np.arange(<span class="hljs-number">0.0</span>,  <span class="hljs-number">5.0</span>,  <span class="hljs-number">0.02</span>)plt.plot(a, np.cos(<span class="hljs-number">2</span>*np.pi*a),   <span class="hljs-string">'r--'</span>)plt.xlabel(<span class="hljs-string">'1'</span>,  fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">15</span>, color=<span class="hljs-string">'green'</span>)plt.ylabel(<span class="hljs-string">'2'</span> , fontproperties = <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">20</span>)plt.title(<span class="hljs-string">'shili  $y=cos(2\pi  x)$'</span>, fontproperties= <span class="hljs-string">'SimHei'</span>, fontsize=<span class="hljs-number">25</span>)plt.annotate( <span class="hljs-string">r'$\mu=100$'</span>, xy=(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),  xytext=(<span class="hljs-number">3</span>,<span class="hljs-number">1.5</span>), arrowprops= dict(facecolor = <span class="hljs-string">'black'</span>, shrink = <span class="hljs-number">0.1</span>, width = <span class="hljs-number">2</span>)) <span class="hljs-comment">#shrink 使箭头在两端留出空白</span>plt.axis([<span class="hljs-number">-1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">2</span>])plt.grid(<span class="hljs-literal">True</span>)plt.show()</code></pre><br><img src="/img/data/37.png" srcset="/img/loading.gif" alt="图37"><br>绘图子区域分割<br><code>plt.subplot2grid()</code><br><code>plt.subplot2grid(GridSpec, CurSpec, colspan=1, rowspan=1)</code><br>理念，设定网格，选中网格，确定选中行列区域数量<br><img src="/img/data/38.png" srcset="/img/loading.gif" alt="图38"><br>GridSpec<br><pre><code class="hljs angelscript"><span class="hljs-keyword">import</span> matplotlib.gridspec as gridspecgs = gridspec.GeidSpec(<span class="hljs-number">3.3</span>)ax1 = plt.subplot(gs[<span class="hljs-number">0</span>, :])ax2 = plt.subplot(gs[<span class="hljs-number">1</span>, : <span class="hljs-number">-1</span>])ax3 = plt.dubplot(gs[<span class="hljs-number">1</span>:, <span class="hljs-number">-1</span>])ax4 = plt.subplot(gs[<span class="hljs-number">2</span>, <span class="hljs-number">0</span>])ax5 = plt.subplot(gs[<span class="hljs-number">2</span>, <span class="hljs-number">1</span>])</code></pre><br>Matplotlib基础绘图函数实例<br><img src="/img/data/39.png" srcset="/img/loading.gif" alt="图39"><br><img src="/img/data/40.png" srcset="/img/loading.gif" alt="图40"><br><img src="/img/data/41.png" srcset="/img/loading.gif" alt="图41"><br>饼图的函数<br><pre><code class="hljs routeros">import matplotlib.pyplot as pltlabels = <span class="hljs-string">'Frogs'</span>, <span class="hljs-string">'Hogs'</span>, <span class="hljs-string">'Dogs'</span>, <span class="hljs-string">'Logs'</span>sizes = [15, 30, 45, 10]explode = (0, 0.1, 0, 0)plt.pie(sizes,<span class="hljs-attribute">explode</span>=explode, <span class="hljs-attribute">labels</span>=labels, autopct  = <span class="hljs-string">'%1.1f%%'</span>, <span class="hljs-attribute">shadow</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">startangle</span>=90)plt.axis(<span class="hljs-string">'equal'</span>) #显示为正方plt.show()</code></pre><br><img src="/img/data/42.png" srcset="/img/loading.gif" alt="图42"><br>pyplot的直方图绘制<br><code>......</code></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>numpy</tag>
      
      <tag>matplotlib</tag>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析工具（一）</title>
    <link href="/2020/03/03/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/03/03/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="主题思想"><a href="#主题思想" class="headerlink" title="主题思想"></a>主题思想</h3><p><img src="/img/data/01.png" srcset="/img/loading.gif" alt="图1"><br>一个数据表达一个含义————-&gt;一组数据表达一个或多个含义：与一组数据相关的那些事儿，即如何理解数据表达的含义</p><p>编程工具<br>使用Anaconda IDE集成开发工具<br>需要理解和掌握如下工具的使用：conda、Spyder、IPython<br>常用的python IDE工具<br>IDLE 自带的、默认的、常用的，入门级编写工具，适合入门，300行以内<br>Sublime Text 专为程序员设计，有多种功能和风格<br>Wine 公司维护，收费，适合多人共同开发<br>VS &amp; PTVS<br>Eclipse PyDev 需要一定的能力配置<br>PyCharm 社区版免费<br>Canopy 公司维护，工具收费<br>Anaconda 免费开源  </p><h3 id="Anaconda的基本使用"><a href="#Anaconda的基本使用" class="headerlink" title="Anaconda的基本使用"></a>Anaconda的基本使用</h3><p>conda 是一个工具，用于包管理和环境<br>包管理和pip类似，管理Python的第三方库<br>环境管理包括能够允许用户使用不同版本的python，并能够灵活切换<br>anaconda: 一个集合，包括conda、某版本的python、一批第三方库等<br>IPython 的？命令，可以查看参数<br>IPython <code>%run</code> 用于运行.py程序 （%run在一个空的命名空间执行%）<br><img src="/img/data/02.png" srcset="/img/loading.gif" alt="图2"> </p><h3 id="数据的维度"><a href="#数据的维度" class="headerlink" title="数据的维度"></a>数据的维度</h3><p>维度：是一组数据的组织形式<br>一维数据<br>由对等关系的有序和无序数据构成，采用线性方式组织，对应列表、数组和集合等概念。<br>列表和数组<br>都是一组数据的有序结构<br>区别：列表数据类型可以不同 数组数据类型相同<br>二维数据<br>由多个一维数据构成，是一维数据的组合形式，表格是典型的二维数据，其中，表头是二维数据的一部分<br>多维数据<br>由一维或二维数据在新维度上扩展而成<br>高维数据<br>仅利用最基本的二元关系展示数据间的复杂结构（键值对）<br>一维数据：列表和集合类型<br>二维数据：列表类型<br>多维类型：列表类型<br>高维类型：字典类型或者数据表示格式   </p><h3 id="Numpy库"><a href="#Numpy库" class="headerlink" title="Numpy库"></a>Numpy库</h3><p>是一个开源的python科学计算基础库<br>一个强大的N维数组对象 ndarray<br>广播功能函数<br>整合C/C++/Fortran代码的工具<br>线性代数、傅立叶变换、随机数生成等功能<br>Numpy是SciPy、Pandas等数据处理或科学计算库的基础<br><code>import numpy as np</code><br>尽管别名可以省略或者更改，建议使用上述约定的别名<br>N维数组对象：ndarray<br>例子：计算A2+B3，其中，A、B是一维数组<br><pre><code class="hljs angelscript">def pySum():    a = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3.4</span>]    b = [<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>]    c = []        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(a)):        c.append(a[i]**<span class="hljs-number">2</span>+b[i]**<span class="hljs-number">3</span>)    <span class="hljs-keyword">return</span> cprint(pySum)</code></pre><br>numpy的方法：<br><pre><code class="hljs angelscript"><span class="hljs-keyword">import</span> numpy as npdef npSum():    a = np.<span class="hljs-built_in">array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])    b = np.<span class="hljs-built_in">array</span>([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>])    c = a**<span class="hljs-number">2</span> + b**<span class="hljs-number">3</span>        <span class="hljs-keyword">return</span> cprint(npSum())</code></pre><br>数组对象可以去掉元素间运算所需的循环，使一维向量更像单个数据<br>设置专门的数组对象，经过优化，可以提升这类应用的运算速度<br>观察：科学计算时，一个维度所有数据的类型往往是相同的<br>数组对象采用相同的数据类型，有助于节省运算和存储空间<br>ndarray是一个多维数组对象，由两部分构成：<br>实际的数据<br>描述这些数据的元数据（数据维度、数据类型等等）<br>ndarray数组一般要求所有元素类型相同（同质），数组下标从0开始<br><code>np.array()</code>生成一个ndarray数组，ndarray在程序中的别名是array<br><code>np.array()</code>输出成[]形式，元素用空格分割。<br>轴（axis）：保存数据的维度    秩（rank）：轴的数量（几个维度）<br><img src="/img/data/03.png" srcset="/img/loading.gif" alt="图3"><br><pre><code class="hljs angelscript">In [<span class="hljs-number">6</span>]: a = np.<span class="hljs-built_in">array</span>([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>]])In [<span class="hljs-number">7</span>]: a.ndimOut[<span class="hljs-number">7</span>]: <span class="hljs-number">2</span>In [<span class="hljs-number">8</span>]: a.shapeOut[<span class="hljs-number">8</span>]: (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>)In [<span class="hljs-number">9</span>]: a.sizeOut[<span class="hljs-number">9</span>]: <span class="hljs-number">10</span>In [<span class="hljs-number">10</span>]: a.dtypeOut[<span class="hljs-number">10</span>]: dtype(<span class="hljs-string">'int64'</span>)In [<span class="hljs-number">11</span>]: a.itemsizeOut[<span class="hljs-number">11</span>]: <span class="hljs-number">8</span></code></pre><br>ndarray的元素类型<br><img src="/img/data/04.png" srcset="/img/loading.gif" alt="图4"><br><img src="/img/data/05.png" srcset="/img/loading.gif" alt="图5"><br><img src="/img/data/06.png" srcset="/img/loading.gif" alt="图6">   </p><h4 id="ndarray数组的创建方法"><a href="#ndarray数组的创建方法" class="headerlink" title="ndarray数组的创建方法"></a>ndarray数组的创建方法</h4><ol><li>从python中的列表、元组等类型创建ndarray数组<br><code>x = np,array(list/tuple)</code><br><code>x = np.array(list/tuple, dtype= np.float32)</code><br>当np.array()不指定dtype时，NumPy将根据数据情况关联一个dtype类型。<br><img src="/img/data/07.png" srcset="/img/loading.gif" alt="图7"><br>2）使用numpy中函数创建ndarray数组，如arange, ones,zeros等<br><img src="/img/data/08.png" srcset="/img/loading.gif" alt="图8">   <pre><code class="hljs angelscript">n [<span class="hljs-number">12</span>]: np.arange(<span class="hljs-number">15</span>)Out[<span class="hljs-number">12</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>])In [<span class="hljs-number">13</span>]: np.ones((<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))Out[<span class="hljs-number">13</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]])In [<span class="hljs-number">14</span>]: np.zeros((<span class="hljs-number">4</span>,<span class="hljs-number">5</span>))Out[<span class="hljs-number">14</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])In [<span class="hljs-number">15</span>]: np.eye(<span class="hljs-number">5</span>)Out[<span class="hljs-number">15</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>]])In [<span class="hljs-number">17</span>]: np.ones((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>))Out[<span class="hljs-number">17</span>]: <span class="hljs-built_in">array</span>([[[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]],       [[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]]])</code></pre><img src="/img/data/09.png" srcset="/img/loading.gif" alt="图9"><br><img src="/img/data/10.png" srcset="/img/loading.gif" alt="图10">  <pre><code class="hljs angelscript">In [<span class="hljs-number">18</span>]: a = np.linspace(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>)In [<span class="hljs-number">19</span>]: aOut[<span class="hljs-number">19</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">1.</span>,  <span class="hljs-number">4.</span>,  <span class="hljs-number">7.</span>, <span class="hljs-number">10.</span>])In [<span class="hljs-number">20</span>]: a = np.linspace(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>, endpoint=False)In [<span class="hljs-number">21</span>]: aOut[<span class="hljs-number">21</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">1.</span>  , <span class="hljs-number">3.25</span>, <span class="hljs-number">5.5</span> , <span class="hljs-number">7.75</span>])In [<span class="hljs-number">22</span>]: b  = np.linspace(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>)In [<span class="hljs-number">23</span>]: c = np.concatenate((a,b))In [<span class="hljs-number">24</span>]: cOut[<span class="hljs-number">24</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">1.</span>  ,  <span class="hljs-number">3.25</span>,  <span class="hljs-number">5.5</span> ,  <span class="hljs-number">7.75</span>,  <span class="hljs-number">1.</span>  ,  <span class="hljs-number">4.</span>  ,  <span class="hljs-number">7.</span>  , <span class="hljs-number">10.</span>  ])</code></pre>ndarray数组的维度变换<br><img src="/img/data/11.png" srcset="/img/loading.gif" alt="图11"><br><code>new_a = a.astype(new_type)</code><br>astype()方法一定会创建新的数组（原始数据的一个拷贝），即两个类型一致。<br>ndarray数组向列表的转换<br><code>ls = a.tolist</code><br>从字节流（raw bytes）中创建ndarray数组<br>从文件中读取特定格式，创建ndarray数组  </li></ol><p>数组的索引和切片<br>一维数组的索引和切片，与python的列表类似<br><pre><code class="hljs angelscript">In [<span class="hljs-number">25</span>]: a = np.<span class="hljs-built_in">array</span>([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>])In [<span class="hljs-number">26</span>]: a[<span class="hljs-number">2</span>]Out[<span class="hljs-number">26</span>]: <span class="hljs-number">7</span>In [<span class="hljs-number">27</span>]: a[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>]   #起始编号：终止编号（不含）：步长<span class="hljs-number">3</span>元素冒号分割Out[<span class="hljs-number">27</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">8</span>, <span class="hljs-number">6</span>])</code></pre><br>多维数组的索引：<br><pre><code class="hljs angelscript">In [<span class="hljs-number">28</span>]: a = np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">29</span>]: aOut[<span class="hljs-number">29</span>]: <span class="hljs-built_in">array</span>([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],        [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],        [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]],       [[<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>],        [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],        [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]])In [<span class="hljs-number">30</span>]: a[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]Out[<span class="hljs-number">30</span>]: <span class="hljs-number">23</span>In [<span class="hljs-number">31</span>]: a[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]Out[<span class="hljs-number">31</span>]: <span class="hljs-number">6</span>In [<span class="hljs-number">32</span>]: a[<span class="hljs-number">-1</span>, <span class="hljs-number">-2</span> , <span class="hljs-number">-3</span>]Out[<span class="hljs-number">32</span>]: <span class="hljs-number">17</span></code></pre><br>多维数组的切片：<br><pre><code class="hljs angelscript">In [<span class="hljs-number">33</span>]: a[:, <span class="hljs-number">1</span>, <span class="hljs-number">-3</span>]      #选取一个维度用：Out[<span class="hljs-number">33</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">5</span>, <span class="hljs-number">17</span>])In [<span class="hljs-number">34</span>]: a[:, <span class="hljs-number">1</span>:<span class="hljs-number">3</span>, :]             #每个维度切片与一维数组相同Out[<span class="hljs-number">34</span>]: <span class="hljs-built_in">array</span>([[[ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],        [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]],       [[<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],        [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]])In [<span class="hljs-number">35</span>]: a[:,:,::<span class="hljs-number">2</span>]    #每个维度可以使用步长跳跃切片Out[<span class="hljs-number">35</span>]: <span class="hljs-built_in">array</span>([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">2</span>],        [ <span class="hljs-number">4</span>,  <span class="hljs-number">6</span>],        [ <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]],       [[<span class="hljs-number">12</span>, <span class="hljs-number">14</span>],        [<span class="hljs-number">16</span>, <span class="hljs-number">18</span>],</code></pre></p><h4 id="narrray数组的运算"><a href="#narrray数组的运算" class="headerlink" title="narrray数组的运算"></a>narrray数组的运算</h4><p>数组与标量之间的运算<br>数组与标量之间的运算作用于数组的每一个元素<br><pre><code class="hljs angelscript"> a.mean()Out[<span class="hljs-number">36</span>]: <span class="hljs-number">11.5</span>In [<span class="hljs-number">37</span>]: a = a/a.mean()In [<span class="hljs-number">38</span>]: aOut[<span class="hljs-number">38</span>]: <span class="hljs-built_in">array</span>([[[<span class="hljs-number">0.</span>        , <span class="hljs-number">0.08695652</span>, <span class="hljs-number">0.17391304</span>, <span class="hljs-number">0.26086957</span>],        [<span class="hljs-number">0.34782609</span>, <span class="hljs-number">0.43478261</span>, <span class="hljs-number">0.52173913</span>, <span class="hljs-number">0.60869565</span>],        [<span class="hljs-number">0.69565217</span>, <span class="hljs-number">0.7826087</span> , <span class="hljs-number">0.86956522</span>, <span class="hljs-number">0.95652174</span>]],       [[<span class="hljs-number">1.04347826</span>, <span class="hljs-number">1.13043478</span>, <span class="hljs-number">1.2173913</span> , <span class="hljs-number">1.30434783</span>],        [<span class="hljs-number">1.39130435</span>, <span class="hljs-number">1.47826087</span>, <span class="hljs-number">1.56521739</span>, <span class="hljs-number">1.65217391</span>],        [<span class="hljs-number">1.73913043</span>, <span class="hljs-number">1.82608696</span>, <span class="hljs-number">1.91304348</span>, <span class="hljs-number">2.</span>        ]]])</code></pre><br>对ndarray中的数据执行元素极运算的函数<br><img src="/img/data/12.png" srcset="/img/loading.gif" alt="图12"><br><img src="/img/data/13.png" srcset="/img/loading.gif" alt="图13"><br><pre><code class="hljs angelscript">In [<span class="hljs-number">41</span>]: a = np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">42</span>]: aOut[<span class="hljs-number">42</span>]: <span class="hljs-built_in">array</span>([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],        [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],        [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]],       [[<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>],        [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],        [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]]])In [<span class="hljs-number">43</span>]: np.square(a)Out[<span class="hljs-number">43</span>]: <span class="hljs-built_in">array</span>([[[  <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">4</span>,   <span class="hljs-number">9</span>],        [ <span class="hljs-number">16</span>,  <span class="hljs-number">25</span>,  <span class="hljs-number">36</span>,  <span class="hljs-number">49</span>],        [ <span class="hljs-number">64</span>,  <span class="hljs-number">81</span>, <span class="hljs-number">100</span>, <span class="hljs-number">121</span>]],       [[<span class="hljs-number">144</span>, <span class="hljs-number">169</span>, <span class="hljs-number">196</span>, <span class="hljs-number">225</span>],        [<span class="hljs-number">256</span>, <span class="hljs-number">289</span>, <span class="hljs-number">324</span>, <span class="hljs-number">361</span>],        [<span class="hljs-number">400</span>, <span class="hljs-number">441</span>, <span class="hljs-number">484</span>, <span class="hljs-number">529</span>]]])In [<span class="hljs-number">44</span>]: a = sqrt(a)---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)&lt;ipython-input<span class="hljs-number">-44</span><span class="hljs-number">-7803</span>baeb8559&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()----&gt; <span class="hljs-number">1</span> a = sqrt(a)NameError: name <span class="hljs-string">'sqrt'</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> definedIn [<span class="hljs-number">45</span>]: a = np.sqrt(a)In [<span class="hljs-number">46</span>]: aOut[<span class="hljs-number">46</span>]: <span class="hljs-built_in">array</span>([[[<span class="hljs-number">0.</span>        , <span class="hljs-number">1.</span>        , <span class="hljs-number">1.41421356</span>, <span class="hljs-number">1.73205081</span>],        [<span class="hljs-number">2.</span>        , <span class="hljs-number">2.23606798</span>, <span class="hljs-number">2.44948974</span>, <span class="hljs-number">2.64575131</span>],        [<span class="hljs-number">2.82842712</span>, <span class="hljs-number">3.</span>        , <span class="hljs-number">3.16227766</span>, <span class="hljs-number">3.31662479</span>]],       [[<span class="hljs-number">3.46410162</span>, <span class="hljs-number">3.60555128</span>, <span class="hljs-number">3.74165739</span>, <span class="hljs-number">3.87298335</span>],        [<span class="hljs-number">4.</span>        , <span class="hljs-number">4.12310563</span>, <span class="hljs-number">4.24264069</span>, <span class="hljs-number">4.35889894</span>],        [<span class="hljs-number">4.47213595</span>, <span class="hljs-number">4.58257569</span>, <span class="hljs-number">4.69041576</span>, <span class="hljs-number">4.79583152</span>]]])In [<span class="hljs-number">47</span>]: np.modf(a)Out[<span class="hljs-number">47</span>]: (<span class="hljs-built_in">array</span>([[[<span class="hljs-number">0.</span>        , <span class="hljs-number">0.</span>        , <span class="hljs-number">0.41421356</span>, <span class="hljs-number">0.73205081</span>],         [<span class="hljs-number">0.</span>        , <span class="hljs-number">0.23606798</span>, <span class="hljs-number">0.44948974</span>, <span class="hljs-number">0.64575131</span>],         [<span class="hljs-number">0.82842712</span>, <span class="hljs-number">0.</span>        , <span class="hljs-number">0.16227766</span>, <span class="hljs-number">0.31662479</span>]],         [[<span class="hljs-number">0.46410162</span>, <span class="hljs-number">0.60555128</span>, <span class="hljs-number">0.74165739</span>, <span class="hljs-number">0.87298335</span>],         [<span class="hljs-number">0.</span>        , <span class="hljs-number">0.12310563</span>, <span class="hljs-number">0.24264069</span>, <span class="hljs-number">0.35889894</span>],         [<span class="hljs-number">0.47213595</span>, <span class="hljs-number">0.58257569</span>, <span class="hljs-number">0.69041576</span>, <span class="hljs-number">0.79583152</span>]]]), <span class="hljs-built_in">array</span>([[[<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],         [<span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>],         [<span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>]],         [[<span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>],         [<span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>],         [<span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>]]]))In [<span class="hljs-number">48</span>]: b = a[<span class="hljs-number">1</span>, :, :]In [<span class="hljs-number">49</span>]: bOut[<span class="hljs-number">49</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">3.46410162</span>, <span class="hljs-number">3.60555128</span>, <span class="hljs-number">3.74165739</span>, <span class="hljs-number">3.87298335</span>],       [<span class="hljs-number">4.</span>        , <span class="hljs-number">4.12310563</span>, <span class="hljs-number">4.24264069</span>, <span class="hljs-number">4.35889894</span>],       [<span class="hljs-number">4.47213595</span>, <span class="hljs-number">4.58257569</span>, <span class="hljs-number">4.69041576</span>, <span class="hljs-number">4.79583152</span>]])</code></pre><br>NumPy二元函数<br><img src="/img/data/14.png" srcset="/img/loading.gif" alt="图14"><br><pre><code class="hljs yaml"> <span class="hljs-string">In</span> <span class="hljs-string">[53]:</span> <span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-string">np.arange(24).reshape((2,3,4))</span><span class="hljs-string">In</span> <span class="hljs-string">[54]:</span> <span class="hljs-string">a</span><span class="hljs-string">Out[54]:</span> <span class="hljs-string">array([[[</span> <span class="hljs-number">0</span><span class="hljs-string">,</span>  <span class="hljs-number">1</span><span class="hljs-string">,</span>  <span class="hljs-number">2</span><span class="hljs-string">,</span>  <span class="hljs-number">3</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-number">4</span><span class="hljs-string">,</span>  <span class="hljs-number">5</span><span class="hljs-string">,</span>  <span class="hljs-number">6</span><span class="hljs-string">,</span>  <span class="hljs-number">7</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-number">8</span><span class="hljs-string">,</span>  <span class="hljs-number">9</span><span class="hljs-string">,</span> <span class="hljs-number">10</span><span class="hljs-string">,</span> <span class="hljs-number">11</span><span class="hljs-string">]],</span>       <span class="hljs-string">[[12,</span> <span class="hljs-number">13</span><span class="hljs-string">,</span> <span class="hljs-number">14</span><span class="hljs-string">,</span> <span class="hljs-number">15</span><span class="hljs-string">],</span>        <span class="hljs-string">[16,</span> <span class="hljs-number">17</span><span class="hljs-string">,</span> <span class="hljs-number">18</span><span class="hljs-string">,</span> <span class="hljs-number">19</span><span class="hljs-string">],</span>        <span class="hljs-string">[20,</span> <span class="hljs-number">21</span><span class="hljs-string">,</span> <span class="hljs-number">22</span><span class="hljs-string">,</span> <span class="hljs-number">23</span><span class="hljs-string">]]])</span><span class="hljs-string">In</span> <span class="hljs-string">[55]:</span> <span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-string">np.sqrt(a)</span><span class="hljs-string">In</span> <span class="hljs-string">[56]:</span> <span class="hljs-string">b</span><span class="hljs-string">Out[56]:</span> <span class="hljs-string">array([[[0.</span>        <span class="hljs-string">,</span> <span class="hljs-number">1</span><span class="hljs-string">.</span>        <span class="hljs-string">,</span> <span class="hljs-number">1.41421356</span><span class="hljs-string">,</span> <span class="hljs-number">1.73205081</span><span class="hljs-string">],</span>        <span class="hljs-string">[2.</span>        <span class="hljs-string">,</span> <span class="hljs-number">2.23606798</span><span class="hljs-string">,</span> <span class="hljs-number">2.44948974</span><span class="hljs-string">,</span> <span class="hljs-number">2.64575131</span><span class="hljs-string">],</span>        <span class="hljs-string">[2.82842712,</span> <span class="hljs-number">3</span><span class="hljs-string">.</span>        <span class="hljs-string">,</span> <span class="hljs-number">3.16227766</span><span class="hljs-string">,</span> <span class="hljs-number">3.31662479</span><span class="hljs-string">]],</span>       <span class="hljs-string">[[3.46410162,</span> <span class="hljs-number">3.60555128</span><span class="hljs-string">,</span> <span class="hljs-number">3.74165739</span><span class="hljs-string">,</span> <span class="hljs-number">3.87298335</span><span class="hljs-string">],</span>        <span class="hljs-string">[4.</span>        <span class="hljs-string">,</span> <span class="hljs-number">4.12310563</span><span class="hljs-string">,</span> <span class="hljs-number">4.24264069</span><span class="hljs-string">,</span> <span class="hljs-number">4.35889894</span><span class="hljs-string">],</span>        <span class="hljs-string">[4.47213595,</span> <span class="hljs-number">4.58257569</span><span class="hljs-string">,</span> <span class="hljs-number">4.69041576</span><span class="hljs-string">,</span> <span class="hljs-number">4.79583152</span><span class="hljs-string">]]])</span><span class="hljs-string">In</span> <span class="hljs-string">[57]:</span> <span class="hljs-string">np.maximum(a,b)</span><span class="hljs-string">Out[57]:</span> <span class="hljs-string">array([[[</span> <span class="hljs-number">0</span><span class="hljs-string">.,</span>  <span class="hljs-number">1</span><span class="hljs-string">.,</span>  <span class="hljs-number">2</span><span class="hljs-string">.,</span>  <span class="hljs-number">3</span><span class="hljs-string">.],</span>        <span class="hljs-string">[</span> <span class="hljs-number">4</span><span class="hljs-string">.,</span>  <span class="hljs-number">5</span><span class="hljs-string">.,</span>  <span class="hljs-number">6</span><span class="hljs-string">.,</span>  <span class="hljs-number">7</span><span class="hljs-string">.],</span>        <span class="hljs-string">[</span> <span class="hljs-number">8</span><span class="hljs-string">.,</span>  <span class="hljs-number">9</span><span class="hljs-string">.,</span> <span class="hljs-number">10</span><span class="hljs-string">.,</span> <span class="hljs-number">11</span><span class="hljs-string">.]],</span>       <span class="hljs-string">[[12.,</span> <span class="hljs-number">13</span><span class="hljs-string">.,</span> <span class="hljs-number">14</span><span class="hljs-string">.,</span> <span class="hljs-number">15</span><span class="hljs-string">.],</span>        <span class="hljs-string">[16.,</span> <span class="hljs-number">17</span><span class="hljs-string">.,</span> <span class="hljs-number">18</span><span class="hljs-string">.,</span> <span class="hljs-number">19</span><span class="hljs-string">.],</span>        <span class="hljs-string">[20.,</span> <span class="hljs-number">21</span><span class="hljs-string">.,</span> <span class="hljs-number">22</span><span class="hljs-string">.,</span> <span class="hljs-number">23</span><span class="hljs-string">.]]])</span><span class="hljs-string">In</span> <span class="hljs-string">[58]:</span> <span class="hljs-string">a&gt;b</span><span class="hljs-string">Out[58]:</span> <span class="hljs-string">array([[[False,</span> <span class="hljs-literal">False</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">]],</span>       <span class="hljs-string">[[</span> <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">],</span>        <span class="hljs-string">[</span> <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">,</span>  <span class="hljs-literal">True</span><span class="hljs-string">]]])</span></code></pre></p><h4 id="NumPy文件存放与读取"><a href="#NumPy文件存放与读取" class="headerlink" title="NumPy文件存放与读取"></a>NumPy文件存放与读取</h4><p>CSV（Comma-Separated Value, 逗号分割值）<br>CSV是一种常见的文件格式，用来存储批量数据<br>CSV文件<br><code>np.savetxt(frame,array,fmt=&#39;%.18e&#39;, delimiter=None)</code><br>frame: 文件、字符串或者产生器，可以是.gz或.bz2的压缩文件<br>array: 存入文件的数组<br>fmt: 写入文件的格式,例如：%d %.2f %.18e<br>delimiter: 分割字符串，默认是空格<br><code>np.loadtxt(frame, dtype=np.float, delimiter=None, unpack=False)</code><br>unpack:如果True，读入属性将分别写入不同的变量<br><pre><code class="hljs angelscript">a = np.arange(<span class="hljs-number">100</span>).reshape(<span class="hljs-number">5</span>,<span class="hljs-number">20</span>)&gt;&gt;&gt; np.savetxt(<span class="hljs-string">'a.csv'</span>, a, fmt=<span class="hljs-string">'%d'</span>, delimiter=<span class="hljs-string">','</span>)&gt;&gt;&gt; b = np.loadtxt(<span class="hljs-string">'a.csv'</span>,delimiter=<span class="hljs-string">','</span>)&gt;&gt;&gt; b<span class="hljs-built_in">array</span>([[ <span class="hljs-number">0.</span>,  <span class="hljs-number">1.</span>,  <span class="hljs-number">2.</span>,  <span class="hljs-number">3.</span>,  <span class="hljs-number">4.</span>,  <span class="hljs-number">5.</span>,  <span class="hljs-number">6.</span>,  <span class="hljs-number">7.</span>,  <span class="hljs-number">8.</span>,  <span class="hljs-number">9.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">11.</span>, <span class="hljs-number">12.</span>,        <span class="hljs-number">13.</span>, <span class="hljs-number">14.</span>, <span class="hljs-number">15.</span>, <span class="hljs-number">16.</span>, <span class="hljs-number">17.</span>, <span class="hljs-number">18.</span>, <span class="hljs-number">19.</span>],       [<span class="hljs-number">20.</span>, <span class="hljs-number">21.</span>, <span class="hljs-number">22.</span>, <span class="hljs-number">23.</span>, <span class="hljs-number">24.</span>, <span class="hljs-number">25.</span>, <span class="hljs-number">26.</span>, <span class="hljs-number">27.</span>, <span class="hljs-number">28.</span>, <span class="hljs-number">29.</span>, <span class="hljs-number">30.</span>, <span class="hljs-number">31.</span>, <span class="hljs-number">32.</span>,        <span class="hljs-number">33.</span>, <span class="hljs-number">34.</span>, <span class="hljs-number">35.</span>, <span class="hljs-number">36.</span>, <span class="hljs-number">37.</span>, <span class="hljs-number">38.</span>, <span class="hljs-number">39.</span>],       [<span class="hljs-number">40.</span>, <span class="hljs-number">41.</span>, <span class="hljs-number">42.</span>, <span class="hljs-number">43.</span>, <span class="hljs-number">44.</span>, <span class="hljs-number">45.</span>, <span class="hljs-number">46.</span>, <span class="hljs-number">47.</span>, <span class="hljs-number">48.</span>, <span class="hljs-number">49.</span>, <span class="hljs-number">50.</span>, <span class="hljs-number">51.</span>, <span class="hljs-number">52.</span>,        <span class="hljs-number">53.</span>, <span class="hljs-number">54.</span>, <span class="hljs-number">55.</span>, <span class="hljs-number">56.</span>, <span class="hljs-number">57.</span>, <span class="hljs-number">58.</span>, <span class="hljs-number">59.</span>],       [<span class="hljs-number">60.</span>, <span class="hljs-number">61.</span>, <span class="hljs-number">62.</span>, <span class="hljs-number">63.</span>, <span class="hljs-number">64.</span>, <span class="hljs-number">65.</span>, <span class="hljs-number">66.</span>, <span class="hljs-number">67.</span>, <span class="hljs-number">68.</span>, <span class="hljs-number">69.</span>, <span class="hljs-number">70.</span>, <span class="hljs-number">71.</span>, <span class="hljs-number">72.</span>,        <span class="hljs-number">73.</span>, <span class="hljs-number">74.</span>, <span class="hljs-number">75.</span>, <span class="hljs-number">76.</span>, <span class="hljs-number">77.</span>, <span class="hljs-number">78.</span>, <span class="hljs-number">79.</span>],       [<span class="hljs-number">80.</span>, <span class="hljs-number">81.</span>, <span class="hljs-number">82.</span>, <span class="hljs-number">83.</span>, <span class="hljs-number">84.</span>, <span class="hljs-number">85.</span>, <span class="hljs-number">86.</span>, <span class="hljs-number">87.</span>, <span class="hljs-number">88.</span>, <span class="hljs-number">89.</span>, <span class="hljs-number">90.</span>, <span class="hljs-number">91.</span>, <span class="hljs-number">92.</span>,        <span class="hljs-number">93.</span>, <span class="hljs-number">94.</span>, <span class="hljs-number">95.</span>, <span class="hljs-number">96.</span>, <span class="hljs-number">97.</span>, <span class="hljs-number">98.</span>, <span class="hljs-number">99.</span>]])&gt;&gt;&gt; b = np.loadtxt(<span class="hljs-string">'a.csv'</span>,dtype=np.<span class="hljs-built_in">int</span>, delimiter=<span class="hljs-string">','</span>)&gt;&gt;&gt; b<span class="hljs-built_in">array</span>([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>,        <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],       [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>,        <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>],       [<span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">42</span>, <span class="hljs-number">43</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">50</span>, <span class="hljs-number">51</span>, <span class="hljs-number">52</span>, <span class="hljs-number">53</span>, <span class="hljs-number">54</span>, <span class="hljs-number">55</span>,        <span class="hljs-number">56</span>, <span class="hljs-number">57</span>, <span class="hljs-number">58</span>, <span class="hljs-number">59</span>],       [<span class="hljs-number">60</span>, <span class="hljs-number">61</span>, <span class="hljs-number">62</span>, <span class="hljs-number">63</span>, <span class="hljs-number">64</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>, <span class="hljs-number">68</span>, <span class="hljs-number">69</span>, <span class="hljs-number">70</span>, <span class="hljs-number">71</span>, <span class="hljs-number">72</span>, <span class="hljs-number">73</span>, <span class="hljs-number">74</span>, <span class="hljs-number">75</span>,        <span class="hljs-number">76</span>, <span class="hljs-number">77</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>],       [<span class="hljs-number">80</span>, <span class="hljs-number">81</span>, <span class="hljs-number">82</span>, <span class="hljs-number">83</span>, <span class="hljs-number">84</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">89</span>, <span class="hljs-number">90</span>, <span class="hljs-number">91</span>, <span class="hljs-number">92</span>, <span class="hljs-number">93</span>, <span class="hljs-number">94</span>, <span class="hljs-number">95</span>,        <span class="hljs-number">96</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>]])</code></pre><br>CSV只能有效的存储一维和二维数组  </p><p>多维数组的存取<br>a.tofile(frame, sep=’’, format=’%s’)<br>frame:文件、字符串<br>sep: 数据分割字符串，如果是空串，写入文件为二进制<br>format：写入数据的格式<br><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span>&gt; c = np.arange(<span class="hljs-number">100</span>).reshape(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;</span>&gt; c.tofile(<span class="hljs-string">"c.dat"</span>, format=<span class="hljs-string">'%d'</span>)</code></pre><br><code>np.fromfile(frame, dtype= float, count=-1, sep=&#39;&#39;)</code><br>count: 读入元素的个数，-1表示读入整个文件<br><pre><code class="hljs lsl">&gt;&gt;&gt; c.tofile(<span class="hljs-string">"c.dat"</span>, sep=<span class="hljs-string">","</span>, format='%d')&gt;&gt;&gt; d = np.fromfile(<span class="hljs-string">"c.dat"</span>, dtype=np.int, sep=<span class="hljs-string">","</span>)&gt;&gt;&gt; darray([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>,       <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>,       <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">42</span>, <span class="hljs-number">43</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">50</span>,       <span class="hljs-number">51</span>, <span class="hljs-number">52</span>, <span class="hljs-number">53</span>, <span class="hljs-number">54</span>, <span class="hljs-number">55</span>, <span class="hljs-number">56</span>, <span class="hljs-number">57</span>, <span class="hljs-number">58</span>, <span class="hljs-number">59</span>, <span class="hljs-number">60</span>, <span class="hljs-number">61</span>, <span class="hljs-number">62</span>, <span class="hljs-number">63</span>, <span class="hljs-number">64</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>,       <span class="hljs-number">68</span>, <span class="hljs-number">69</span>, <span class="hljs-number">70</span>, <span class="hljs-number">71</span>, <span class="hljs-number">72</span>, <span class="hljs-number">73</span>, <span class="hljs-number">74</span>, <span class="hljs-number">75</span>, <span class="hljs-number">76</span>, <span class="hljs-number">77</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>, <span class="hljs-number">80</span>, <span class="hljs-number">81</span>, <span class="hljs-number">82</span>, <span class="hljs-number">83</span>, <span class="hljs-number">84</span>,       <span class="hljs-number">85</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">89</span>, <span class="hljs-number">90</span>, <span class="hljs-number">91</span>, <span class="hljs-number">92</span>, <span class="hljs-number">93</span>, <span class="hljs-number">94</span>, <span class="hljs-number">95</span>, <span class="hljs-number">96</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>])&gt;&gt;&gt; d = np.fromfile(<span class="hljs-string">"c.dat"</span>, dtype=np.int, sep=<span class="hljs-string">","</span>).reshape(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)&gt;&gt;&gt; darray([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>],        [ <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],        [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>],        [ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],        [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],        [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>],        [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>],        [<span class="hljs-number">14</span>, <span class="hljs-number">15</span>],        [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>],        [<span class="hljs-number">18</span>, <span class="hljs-number">19</span>]],       [[<span class="hljs-number">20</span>, <span class="hljs-number">21</span>],        [<span class="hljs-number">22</span>, <span class="hljs-number">23</span>],        [<span class="hljs-number">24</span>, <span class="hljs-number">25</span>],        [<span class="hljs-number">26</span>, <span class="hljs-number">27</span>],        [<span class="hljs-number">28</span>, <span class="hljs-number">29</span>],        [<span class="hljs-number">30</span>, <span class="hljs-number">31</span>],        [<span class="hljs-number">32</span>, <span class="hljs-number">33</span>],        [<span class="hljs-number">34</span>, <span class="hljs-number">35</span>],        [<span class="hljs-number">36</span>, <span class="hljs-number">37</span>],        [<span class="hljs-number">38</span>, <span class="hljs-number">39</span>]],       [[<span class="hljs-number">40</span>, <span class="hljs-number">41</span>],        [<span class="hljs-number">42</span>, <span class="hljs-number">43</span>],        [<span class="hljs-number">44</span>, <span class="hljs-number">45</span>],        [<span class="hljs-number">46</span>, <span class="hljs-number">47</span>],        [<span class="hljs-number">48</span>, <span class="hljs-number">49</span>],        [<span class="hljs-number">50</span>, <span class="hljs-number">51</span>],        [<span class="hljs-number">52</span>, <span class="hljs-number">53</span>],        [<span class="hljs-number">54</span>, <span class="hljs-number">55</span>],        [<span class="hljs-number">56</span>, <span class="hljs-number">57</span>],        [<span class="hljs-number">58</span>, <span class="hljs-number">59</span>]],       [[<span class="hljs-number">60</span>, <span class="hljs-number">61</span>],        [<span class="hljs-number">62</span>, <span class="hljs-number">63</span>],        [<span class="hljs-number">64</span>, <span class="hljs-number">65</span>],        [<span class="hljs-number">66</span>, <span class="hljs-number">67</span>],        [<span class="hljs-number">68</span>, <span class="hljs-number">69</span>],        [<span class="hljs-number">70</span>, <span class="hljs-number">71</span>],        [<span class="hljs-number">72</span>, <span class="hljs-number">73</span>],        [<span class="hljs-number">74</span>, <span class="hljs-number">75</span>],        [<span class="hljs-number">76</span>, <span class="hljs-number">77</span>],        [<span class="hljs-number">78</span>, <span class="hljs-number">79</span>]],       [[<span class="hljs-number">80</span>, <span class="hljs-number">81</span>],        [<span class="hljs-number">82</span>, <span class="hljs-number">83</span>],        [<span class="hljs-number">84</span>, <span class="hljs-number">85</span>],        [<span class="hljs-number">86</span>, <span class="hljs-number">87</span>],        [<span class="hljs-number">88</span>, <span class="hljs-number">89</span>],        [<span class="hljs-number">90</span>, <span class="hljs-number">91</span>],        [<span class="hljs-number">92</span>, <span class="hljs-number">93</span>],        [<span class="hljs-number">94</span>, <span class="hljs-number">95</span>],        [<span class="hljs-number">96</span>, <span class="hljs-number">97</span>],        [<span class="hljs-number">98</span>, <span class="hljs-number">99</span>]]])</code></pre><br>该方法需要读取时知道存入文件时数组的维度和元素类型<br> <code>a.tofile()</code>和<code>np.fromefile()</code>需要配合使用<br>可以通过元数据文件来存储额外信息  </p><p>Numpy的便捷文件存取<br><code>np.save(frame,array)</code>或者<code>np.savez(fname,array)</code><br>frame:文件名，以.npy为扩展名，压缩扩展名为.npz<br>array:数组变量<br>np.load（frame）<br>frame：文件名，以.npy为扩展名，压缩扩展名为.npz<br><pre><code class="hljs lsl">&gt;&gt;&gt; a = np.arange(<span class="hljs-number">100</span>).reshape(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)&gt;&gt;&gt; np.save(<span class="hljs-string">"a.npy"</span>, a)&gt;&gt;&gt; b =np.load(<span class="hljs-string">"a.npy"</span>)&gt;&gt;&gt; barray([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>],        [ <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],        [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>],        [ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],        [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],        [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>],        [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>],        [<span class="hljs-number">14</span>, <span class="hljs-number">15</span>],        [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>],        [<span class="hljs-number">18</span>, <span class="hljs-number">19</span>]],       [[<span class="hljs-number">20</span>, <span class="hljs-number">21</span>],        [<span class="hljs-number">22</span>, <span class="hljs-number">23</span>],        [<span class="hljs-number">24</span>, <span class="hljs-number">25</span>],        [<span class="hljs-number">26</span>, <span class="hljs-number">27</span>],        [<span class="hljs-number">28</span>, <span class="hljs-number">29</span>],        [<span class="hljs-number">30</span>, <span class="hljs-number">31</span>],        [<span class="hljs-number">32</span>, <span class="hljs-number">33</span>],        [<span class="hljs-number">34</span>, <span class="hljs-number">35</span>],        [<span class="hljs-number">36</span>, <span class="hljs-number">37</span>],        [<span class="hljs-number">38</span>, <span class="hljs-number">39</span>]],       [[<span class="hljs-number">40</span>, <span class="hljs-number">41</span>],        [<span class="hljs-number">42</span>, <span class="hljs-number">43</span>],        [<span class="hljs-number">44</span>, <span class="hljs-number">45</span>],        [<span class="hljs-number">46</span>, <span class="hljs-number">47</span>],        [<span class="hljs-number">48</span>, <span class="hljs-number">49</span>],        [<span class="hljs-number">50</span>, <span class="hljs-number">51</span>],        [<span class="hljs-number">52</span>, <span class="hljs-number">53</span>],        [<span class="hljs-number">54</span>, <span class="hljs-number">55</span>],        [<span class="hljs-number">56</span>, <span class="hljs-number">57</span>],        [<span class="hljs-number">58</span>, <span class="hljs-number">59</span>]],       [[<span class="hljs-number">60</span>, <span class="hljs-number">61</span>],        [<span class="hljs-number">62</span>, <span class="hljs-number">63</span>],        [<span class="hljs-number">64</span>, <span class="hljs-number">65</span>],        [<span class="hljs-number">66</span>, <span class="hljs-number">67</span>],        [<span class="hljs-number">68</span>, <span class="hljs-number">69</span>],        [<span class="hljs-number">70</span>, <span class="hljs-number">71</span>],        [<span class="hljs-number">72</span>, <span class="hljs-number">73</span>],        [<span class="hljs-number">74</span>, <span class="hljs-number">75</span>],        [<span class="hljs-number">76</span>, <span class="hljs-number">77</span>],        [<span class="hljs-number">78</span>, <span class="hljs-number">79</span>]],       [[<span class="hljs-number">80</span>, <span class="hljs-number">81</span>],        [<span class="hljs-number">82</span>, <span class="hljs-number">83</span>],        [<span class="hljs-number">84</span>, <span class="hljs-number">85</span>],        [<span class="hljs-number">86</span>, <span class="hljs-number">87</span>],        [<span class="hljs-number">88</span>, <span class="hljs-number">89</span>],        [<span class="hljs-number">90</span>, <span class="hljs-number">91</span>],        [<span class="hljs-number">92</span>, <span class="hljs-number">93</span>],        [<span class="hljs-number">94</span>, <span class="hljs-number">95</span>],        [<span class="hljs-number">96</span>, <span class="hljs-number">97</span>],        [<span class="hljs-number">98</span>, <span class="hljs-number">99</span>]]])</code></pre><br>np.random的随机数函数<br><img src="/img/data/15.png" srcset="/img/loading.gif" alt="图15"><br><img src="/img/data/16.png" srcset="/img/loading.gif" alt="图16"><br><pre><code class="hljs angelscript"> &gt;&gt;&gt; a = np.random.randint(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))&gt;&gt;&gt; a<span class="hljs-built_in">array</span>([[<span class="hljs-number">168</span>, <span class="hljs-number">133</span>, <span class="hljs-number">164</span>, <span class="hljs-number">186</span>],       [<span class="hljs-number">137</span>, <span class="hljs-number">111</span>, <span class="hljs-number">144</span>, <span class="hljs-number">114</span>],       [<span class="hljs-number">180</span>, <span class="hljs-number">138</span>, <span class="hljs-number">123</span>, <span class="hljs-number">189</span>]])&gt;&gt;&gt; np.random.shuffle(a)&gt;&gt;&gt; a<span class="hljs-built_in">array</span>([[<span class="hljs-number">180</span>, <span class="hljs-number">138</span>, <span class="hljs-number">123</span>, <span class="hljs-number">189</span>],       [<span class="hljs-number">168</span>, <span class="hljs-number">133</span>, <span class="hljs-number">164</span>, <span class="hljs-number">186</span>],       [<span class="hljs-number">137</span>, <span class="hljs-number">111</span>, <span class="hljs-number">144</span>, <span class="hljs-number">114</span>]])&gt;&gt;&gt; np.random.shuffle(a)&gt;&gt;&gt; a<span class="hljs-built_in">array</span>([[<span class="hljs-number">180</span>, <span class="hljs-number">138</span>, <span class="hljs-number">123</span>, <span class="hljs-number">189</span>],       [<span class="hljs-number">137</span>, <span class="hljs-number">111</span>, <span class="hljs-number">144</span>, <span class="hljs-number">114</span>],       [<span class="hljs-number">168</span>, <span class="hljs-number">133</span>, <span class="hljs-number">164</span>, <span class="hljs-number">186</span>]])In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">2</span>]: a = np.random.randint(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">3</span>]: aOut[<span class="hljs-number">3</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>],       [<span class="hljs-number">177</span>, <span class="hljs-number">161</span>, <span class="hljs-number">133</span>, <span class="hljs-number">153</span>],       [<span class="hljs-number">199</span>, <span class="hljs-number">172</span>, <span class="hljs-number">130</span>, <span class="hljs-number">104</span>]])In [<span class="hljs-number">4</span>]: np.random.permutation(a)Out[<span class="hljs-number">4</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">177</span>, <span class="hljs-number">161</span>, <span class="hljs-number">133</span>, <span class="hljs-number">153</span>],       [<span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>],       [<span class="hljs-number">199</span>, <span class="hljs-number">172</span>, <span class="hljs-number">130</span>, <span class="hljs-number">104</span>]])In [<span class="hljs-number">5</span>]: aOut[<span class="hljs-number">5</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>],       [<span class="hljs-number">177</span>, <span class="hljs-number">161</span>, <span class="hljs-number">133</span>, <span class="hljs-number">153</span>],       [<span class="hljs-number">199</span>, <span class="hljs-number">172</span>, <span class="hljs-number">130</span>, <span class="hljs-number">104</span>]])In [<span class="hljs-number">8</span>]: b = np.random.randint(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,(<span class="hljs-number">8</span>,))In [<span class="hljs-number">9</span>]: bOut[<span class="hljs-number">9</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">106</span>, <span class="hljs-number">108</span>, <span class="hljs-number">169</span>, <span class="hljs-number">160</span>, <span class="hljs-number">105</span>, <span class="hljs-number">181</span>, <span class="hljs-number">195</span>, <span class="hljs-number">165</span>])In [<span class="hljs-number">10</span>]: np.random.choice(b,(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>))Out[<span class="hljs-number">10</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">195</span>, <span class="hljs-number">105</span>],       [<span class="hljs-number">108</span>, <span class="hljs-number">106</span>],       [<span class="hljs-number">169</span>, <span class="hljs-number">108</span>]])In [<span class="hljs-number">13</span>]: np.random.choice(b, (<span class="hljs-number">3</span>,<span class="hljs-number">2</span>), replace=False)Out[<span class="hljs-number">13</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">181</span>, <span class="hljs-number">106</span>],       [<span class="hljs-number">195</span>, <span class="hljs-number">165</span>],       [<span class="hljs-number">105</span>, <span class="hljs-number">160</span>]])In [<span class="hljs-number">15</span>]: np.random.choice(b,(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>), p=b/np.sum(b))Out[<span class="hljs-number">15</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">105</span>, <span class="hljs-number">108</span>],       [<span class="hljs-number">181</span>, <span class="hljs-number">169</span>],       [<span class="hljs-number">169</span>, <span class="hljs-number">165</span>]])In [<span class="hljs-number">17</span>]: p=b/np.sum(b)In [<span class="hljs-number">18</span>]: pOut[<span class="hljs-number">18</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">0.08915055</span>, <span class="hljs-number">0.09083263</span>, <span class="hljs-number">0.14213625</span>, <span class="hljs-number">0.13456686</span>, <span class="hljs-number">0.0883095</span> ,       <span class="hljs-number">0.15222876</span>, <span class="hljs-number">0.16400336</span>, <span class="hljs-number">0.13877208</span>])</code></pre><br><img src="/img/data/17.png" srcset="/img/loading.gif" alt="图17"><br><pre><code class="hljs angelscript">In [<span class="hljs-number">20</span>]: <span class="hljs-keyword">import</span> numpy as npIn [<span class="hljs-number">21</span>]: u = np.random.uniform(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">22</span>]: uOut[<span class="hljs-number">22</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">1.55342812</span>, <span class="hljs-number">9.66284631</span>, <span class="hljs-number">9.35205728</span>, <span class="hljs-number">4.35551918</span>],       [<span class="hljs-number">5.80542662</span>, <span class="hljs-number">3.67044365</span>, <span class="hljs-number">6.99966878</span>, <span class="hljs-number">9.01022477</span>],       [<span class="hljs-number">9.40537026</span>, <span class="hljs-number">8.69429305</span>, <span class="hljs-number">2.4411329</span> , <span class="hljs-number">2.42999845</span>]])In [<span class="hljs-number">23</span>]: n = np.random.normal(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))In [<span class="hljs-number">24</span>]: nOut[<span class="hljs-number">25</span>]:<span class="hljs-built_in">array</span>([[ <span class="hljs-number">8.79560911</span>, <span class="hljs-number">12.64784441</span>, <span class="hljs-number">14.08858882</span>,  <span class="hljs-number">7.24640246</span>],       [<span class="hljs-number">11.0859235</span> , <span class="hljs-number">13.34351634</span>,  <span class="hljs-number">6.48576609</span>, <span class="hljs-number">16.38133251</span>],       [ <span class="hljs-number">8.22931202</span>,  <span class="hljs-number">9.23737404</span>, <span class="hljs-number">12.66597265</span>,  <span class="hljs-number">3.07189174</span>]])</code></pre></p><h4 id="NumPy的统计函数"><a href="#NumPy的统计函数" class="headerlink" title="NumPy的统计函数"></a>NumPy的统计函数</h4><p><img src="/img/data/18.png" srcset="/img/loading.gif" alt="图18"><br><pre><code class="hljs angelscript"> In [<span class="hljs-number">26</span>]: a = np.arange(<span class="hljs-number">15</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)In [<span class="hljs-number">27</span>]: aOut[<span class="hljs-number">27</span>]: <span class="hljs-built_in">array</span>([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>],       [ <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],       [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]])In [<span class="hljs-number">29</span>]: np.sum(a)Out[<span class="hljs-number">29</span>]: <span class="hljs-number">105</span>In [<span class="hljs-number">30</span>]: np.mean(a,axis = <span class="hljs-number">1</span>)Out[<span class="hljs-number">30</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">2.</span>,  <span class="hljs-number">7.</span>, <span class="hljs-number">12.</span>])In [<span class="hljs-number">31</span>]: np.mean(a,axis = <span class="hljs-number">0</span>)Out[<span class="hljs-number">31</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">5.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">9.</span>])In [<span class="hljs-number">33</span>]: np.average(a, axis=<span class="hljs-number">0</span>,weights=[<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>])Out[<span class="hljs-number">33</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">2.1875</span>, <span class="hljs-number">3.1875</span>, <span class="hljs-number">4.1875</span>, <span class="hljs-number">5.1875</span>, <span class="hljs-number">6.1875</span>])In [<span class="hljs-number">34</span>]: np.std(a)Out[<span class="hljs-number">34</span>]: <span class="hljs-number">4.320493798938574</span>In [<span class="hljs-number">35</span>]: np.var(a)Out[<span class="hljs-number">35</span>]: <span class="hljs-number">18.666666666666668</span></code></pre><br><img src="/img/data/19.png" srcset="/img/loading.gif" alt="图19"><br><pre><code class="hljs angelscript">In [<span class="hljs-number">38</span>]: b = np.arange(<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)In [<span class="hljs-number">39</span>]: bOut[<span class="hljs-number">39</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>],       [<span class="hljs-number">10</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">6</span>],       [ <span class="hljs-number">5</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">1</span>]])In [<span class="hljs-number">40</span>]: np.max(b)Out[<span class="hljs-number">40</span>]: <span class="hljs-number">15</span>In [<span class="hljs-number">41</span>]: np.argmax(b)Out[<span class="hljs-number">41</span>]: <span class="hljs-number">0</span>In [<span class="hljs-number">42</span>]: np.unravel_index(np.argmax(b), b.shape)Out[<span class="hljs-number">42</span>]: (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)In [<span class="hljs-number">43</span>]: np.ptp(b)Out[<span class="hljs-number">43</span>]: <span class="hljs-number">14</span>In [<span class="hljs-number">45</span>]: np.median(b)Out[<span class="hljs-number">45</span>]: <span class="hljs-number">8.0</span></code></pre></p><h4 id="NumPy的梯度函数"><a href="#NumPy的梯度函数" class="headerlink" title="NumPy的梯度函数"></a>NumPy的梯度函数</h4><p><img src="/img/data/20.png" srcset="/img/loading.gif" alt="图20"><br>梯度：连续值之间的变化率，即斜率。<br>XY坐标轴中连续三个X坐标对应的Y轴值：a, b, c， 其中b的梯度是（c-a）/2<br><pre><code class="hljs angelscript">In [<span class="hljs-number">46</span>]: c = np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">20</span>,(<span class="hljs-number">5</span>))In [<span class="hljs-number">47</span>]: cOut[<span class="hljs-number">47</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">13</span>, <span class="hljs-number">13</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">11</span>])In [<span class="hljs-number">49</span>]: np.gradient(c)Out[<span class="hljs-number">49</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">0.</span> , <span class="hljs-number">-4.5</span>, <span class="hljs-number">-4.</span> ,  <span class="hljs-number">3.5</span>,  <span class="hljs-number">6.</span> ])In [<span class="hljs-number">50</span>]: d = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>, (<span class="hljs-number">5</span>))In [<span class="hljs-number">51</span>]: dOut[<span class="hljs-number">51</span>]: <span class="hljs-built_in">array</span>([<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">13</span>, <span class="hljs-number">10</span>,  <span class="hljs-number">1</span>])In [<span class="hljs-number">52</span>]: np.gradient(d)Out[<span class="hljs-number">52</span>]: <span class="hljs-built_in">array</span>([ <span class="hljs-number">1.</span>,  <span class="hljs-number">0.</span>, <span class="hljs-number">-2.</span>, <span class="hljs-number">-6.</span>, <span class="hljs-number">-9.</span>])In [<span class="hljs-number">56</span>]: e = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">50</span> ,(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>))In [<span class="hljs-number">57</span>]: eOut[<span class="hljs-number">57</span>]: <span class="hljs-built_in">array</span>([[<span class="hljs-number">42</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">25</span>,  <span class="hljs-number">0</span>, <span class="hljs-number">23</span>],       [<span class="hljs-number">35</span>, <span class="hljs-number">18</span>, <span class="hljs-number">30</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">6</span>],       [<span class="hljs-number">15</span>, <span class="hljs-number">43</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">19</span>, <span class="hljs-number">43</span>]])In [<span class="hljs-number">59</span>]: np.gradient(e)Out[<span class="hljs-number">59</span>]: [<span class="hljs-built_in">array</span>([[ <span class="hljs-number">-7.</span> ,  <span class="hljs-number">13.</span> ,   <span class="hljs-number">5.</span> ,   <span class="hljs-number">6.</span> , <span class="hljs-number">-17.</span> ],        [<span class="hljs-number">-13.5</span>,  <span class="hljs-number">19.</span> , <span class="hljs-number">-10.</span> ,   <span class="hljs-number">9.5</span>,  <span class="hljs-number">10.</span> ],   #最外层维度的梯度值        [<span class="hljs-number">-20.</span> ,  <span class="hljs-number">25.</span> , <span class="hljs-number">-25.</span> ,  <span class="hljs-number">13.</span> ,  <span class="hljs-number">37.</span> ]]), <span class="hljs-built_in">array</span>([[<span class="hljs-number">-37.</span> ,  <span class="hljs-number">-8.5</span>,  <span class="hljs-number">-2.5</span>,  <span class="hljs-number">-1.</span> ,  <span class="hljs-number">23.</span> ],        [<span class="hljs-number">-17.</span> ,  <span class="hljs-number">-2.5</span>,  <span class="hljs-number">-6.</span> , <span class="hljs-number">-12.</span> ,   <span class="hljs-number">0.</span> ],   #第二层维度的梯度        [ <span class="hljs-number">28.</span> ,  <span class="hljs-number">-5.</span> , <span class="hljs-number">-12.</span> ,  <span class="hljs-number">19.</span> ,  <span class="hljs-number">24.</span> ]])]</code></pre></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>numpy</tag>
      
      <tag>matplotlib</tag>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫（二）</title>
    <link href="/2020/02/20/%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/02/20/%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>regular expression regex  RE<br>正则表达式是用来简洁表达一组字符串的表达式<br>优点是简洁<br><img src="/img/Crawler/22.png" srcset="/img/loading.gif" alt="图22"><br>是一种通用的字符串表达框架<br>简洁表达一组字符串的表达式<br>针对字符串表达“简洁”和“特征”思想的工具<br>判断字符串的特征归属<br>用处<br>表达文本类型的特征（病毒、入侵）<br>同时查找或替换一组字符串<br>匹配字符串的全部或部分<br>使用<br>编译：将符合正则表达式语法的字符串转换成正则表达式特征<br>语法<br>正则表达式是由字符和操作符组成<br><img src="/img/Crawler/23.png" srcset="/img/loading.gif" alt="图23"><br><img src="/img/Crawler/24.png" srcset="/img/loading.gif" alt="图24"><br>RE库是python的标准库，主要用于字符串的匹配 <code>import re</code><br>正则表达式的表示类型<br><code>raw string</code>类型（原生字符串类型）<br>re库采用raw string类型表示正则表达式，表示为：<code>r &#39;text&#39;</code> 例如<code>r&#39;[1-9]\d{5}&#39;</code><br>原生字符串不包含转义符<br><img src="/img/Crawler/26.png" srcset="/img/loading.gif" alt="图26"><br>re.search(pattern,string,flag=0)<br>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象  </p><ul><li>pattern：正则表达式的字符串或原生字符串表示  </li><li>string：待匹配的字符串  </li><li>flags：正则表达式使用时的控制标记<br><img src="/img/Crawler/27.png" srcset="/img/loading.gif" alt="图27">  <pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>match = re.search(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIT 100081'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> match:<span class="hljs-meta">... </span>    print(match.group(<span class="hljs-number">0</span>))<span class="hljs-comment">#group() 同group（0）就是匹配正则表达式整体结果</span><span class="hljs-meta">... </span><span class="hljs-number">100081</span></code></pre><code>re.match(pattern,string,flags=0)</code><br>从一个字符串的开始位置匹配正则表达式，返回match对象。  </li><li>pattern：正则表达式的字符串或原生字符串表示  </li><li>string：待匹配的字符串  </li><li>flags：正则表达式使用时的控制标记  <pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>match = re.search(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIT 100081'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> match:<span class="hljs-meta">... </span>    print(match.group(<span class="hljs-number">0</span>))<span class="hljs-meta">... </span><span class="hljs-number">100081</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>match = re.match(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BLT 100081'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> match:<span class="hljs-meta">... </span>    match.group[<span class="hljs-number">0</span>]<span class="hljs-meta">... </span><span class="hljs-meta">&gt;&gt;&gt; </span>match = re.match(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'100081 BLT'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> match:<span class="hljs-meta">... </span>    match.group(<span class="hljs-number">0</span>)<span class="hljs-meta">... </span><span class="hljs-string">'100081'</span></code></pre><code>re.findall(pattern,string,flags=0)</code><br>搜索字符串，以列表类型返回所有能匹配的子串  </li><li>pattern：正则表达式的字符串或原生字符串表示  </li><li>string：待匹配的字符串  </li><li>flags：正则表达式使用时的控制标记  <pre><code class="hljs python"> &gt;&gt;&gt; <span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>ls = re.findall(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIL100081 TSU100025'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>ls[<span class="hljs-string">'100081'</span>, <span class="hljs-string">'100025'</span>]</code></pre><code>re.split(pattern,string,maxsplit=0,flags=0)</code><br>将一个字符串按照正则表达式匹配的结果进行分割，返回列表类型  </li><li>pattern：正则表达式的字符串或原生字符串表示  </li><li>string：待匹配的字符串  </li><li>flags：正则表达式使用时的控制标记  </li><li>maxspilt: 最大分割数，剩余部分作为最后一个元素输出  <pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>ls = re.split(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIL100081 TSU100025'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>ls[<span class="hljs-string">'BIL'</span>, <span class="hljs-string">' TSU'</span>, <span class="hljs-string">''</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>ls = re.split(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIL100081 TSU100025'</span>, maxsplit=<span class="hljs-number">1</span>) <span class="hljs-meta">&gt;&gt;&gt; </span>ls[<span class="hljs-string">'BIL'</span>, <span class="hljs-string">' TSU100025'</span>]</code></pre><code>re.finditer(pattern,string,flags=0)</code><br>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象  </li><li>pattern：正则表达式的字符串或原生字符串表示  </li><li>string：待匹配的字符串  </li><li>flags：正则表达式使用时的控制标记<pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> re.finditer(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BIT100081 TSU100084'</span>):<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> m:<span class="hljs-meta">... </span>            print(m.group(<span class="hljs-number">0</span>))<span class="hljs-meta">... </span><span class="hljs-number">100081</span><span class="hljs-number">100084</span></code></pre><code>re.sub(pattern,repl,string,count=0,flags=0)</code><br>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</li><li>pattern：正则表达式的字符串或原生字符串表示</li><li>repl: 替换字符串的字符串</li><li>string：待匹配的字符串</li><li>count：匹配的最大替换次数</li><li>flags：正则表达式使用时的控制标记<pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>re,sub(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">':zipcode'</span>, <span class="hljs-string">'BLT100081 TSU100084'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>re.sub(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">':zipcode'</span>, <span class="hljs-string">'BLT100081 TSU100084'</span>)<span class="hljs-string">'BLT:zipcode TSU:zipcode'</span></code></pre><img src="/img/Crawler/28.png" srcset="/img/loading.gif" alt="图28"><br><code>egex = re.compile(pattern,flags=0)</code><br>将正则表达式的字符串形式编译成正则表达式对象<br>*pattern：正则表达式的字符串或原生字符串表示  </li></ul><p>*flags ：正则表达式使用时的控制标记<br>RE库的match对象<br><pre><code class="hljs python">RE库的match对象  ﻿&gt;&gt;&gt; <span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>match = re.search(<span class="hljs-string">r'[1-9]\d&#123;5&#125;'</span>, <span class="hljs-string">'BLT 100081'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> match:<span class="hljs-meta">... </span>    print(match.group(<span class="hljs-number">0</span>))<span class="hljs-meta">... </span><span class="hljs-number">100081</span><span class="hljs-meta">&gt;&gt;&gt; </span>typr(match)<span class="hljs-meta">&gt;&gt;&gt; </span>type(match)&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">_sre</span>.<span class="hljs-title">SRE_Match</span>'&gt;</span></code></pre><br><img src="/img/Crawler/29.png" srcset="/img/loading.gif" alt="图29"><br><img src="/img/Crawler/30.png" srcset="/img/loading.gif" alt="图30"><br><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> re<span class="hljs-meta">&gt;&gt;&gt; </span>m = re.search(<span class="hljs-string">r'[1-9]\d'</span>, <span class="hljs-string">'BIT100081 TSU100084'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>m.string<span class="hljs-string">'BIT100081 TSU100084'</span><span class="hljs-meta">&gt;&gt;&gt; </span>m.rere.compile(<span class="hljs-string">'[1-9]\\d'</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>m.pos<span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span>m.endpos<span class="hljs-number">19</span><span class="hljs-meta">&gt;&gt;&gt; </span>m.end()<span class="hljs-number">5</span><span class="hljs-meta">&gt;&gt;&gt; </span>m.start()<span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span>m.span()(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)</code></pre><br>RE库的贪婪匹配和最小匹配<br><pre><code class="hljs awk">match = re.search(<span class="hljs-string">r'PY.*N'</span>, <span class="hljs-string">'PYANBNCNDN'</span> match.group(<span class="hljs-number">0</span>) <span class="hljs-comment">#re库默认采用贪婪匹配，即输出匹配最长的子串</span>match = re.search(<span class="hljs-string">r'PY.*？N'</span>, <span class="hljs-string">'PYANBNCNDN'</span>) <span class="hljs-comment">#输出最小的匹配</span></code></pre><br><img src="/img/Crawler/31.png" srcset="/img/loading.gif" alt="图31">  </p><h4 id="淘宝商店比价定向爬虫"><a href="#淘宝商店比价定向爬虫" class="headerlink" title="淘宝商店比价定向爬虫"></a>淘宝商店比价定向爬虫</h4><p>功能描述<br>目标：获取淘宝搜索页面的信息，提取其中的商品名称和价格。<br>理解：<br>淘宝的搜索接口<br>翻页的处理<br>技术路线：requests-re   </p><p>程序的结构设计<br>步骤1：提交商品搜索请求，循环获取页面<br>步骤2：对于每个页面，提取商品名称和价格信息<br>步骤3：将信息输出到屏幕上<br><pre><code class="hljs python"><span class="hljs-comment">#CrowTaobaoPrice.py</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> re <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHTMLText</span><span class="hljs-params">(url)</span>:</span>    <span class="hljs-keyword">try</span>:        r = requests.get(url, timeout=<span class="hljs-number">30</span>)        r.raise_for_status()        r.encoding = r.apparent_encoding        <span class="hljs-keyword">return</span> r.text    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parsePage</span><span class="hljs-params">(ilt, html)</span>:</span>    <span class="hljs-keyword">try</span>:        plt = re.findall(<span class="hljs-string">r'\"view_price\"\:\"[\d\.]*\"'</span>,html)        tlt = re.findall(<span class="hljs-string">r'\"raw_title\"\:\".*?\"'</span>,html)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(plt)):            price = eval(plt[i].split(<span class="hljs-string">':'</span>)[<span class="hljs-number">1</span>])            title = eval(tlt[i].split(<span class="hljs-string">':'</span>)[<span class="hljs-number">1</span>])            ilt.append([price , title])    <span class="hljs-keyword">except</span>:        print(<span class="hljs-string">""</span>) <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printGoodsList</span><span class="hljs-params">(ilt)</span>:</span>    tplt = <span class="hljs-string">"&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;"</span>    print(tplt.format(<span class="hljs-string">"序号"</span>, <span class="hljs-string">"价格"</span>, <span class="hljs-string">"商品名称"</span>))    count = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> ilt:        count = count + <span class="hljs-number">1</span>        print(tplt.format(count, g[<span class="hljs-number">0</span>], g[<span class="hljs-number">1</span>]))         <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    goods = <span class="hljs-string">'火影忍者'</span>    depth = <span class="hljs-number">3</span>    start_url = <span class="hljs-string">'https://s.taobao.com/search?spm=a21bo.2017.201867-links-7.37.5af911d9AriixI&amp;q='</span> + goods    infoList = []    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(depth):        <span class="hljs-keyword">try</span>:            url = start_url + <span class="hljs-string">'&amp;s='</span> + str(<span class="hljs-number">44</span>*i)            html = getHTMLText(url)            parsePage(infoList, html)        <span class="hljs-keyword">except</span>:            <span class="hljs-keyword">continue</span>    printGoodsList(infoList)     main()</code></pre></p><h4 id="股票数据定向爬虫"><a href="#股票数据定向爬虫" class="headerlink" title="股票数据定向爬虫"></a>股票数据定向爬虫</h4><p>目标：获取上交所和深交所所有股票的名称和交易信息<br>输出：保存到文件中<br>技术路线：requests-bs4-re<br>选取原则：股票信息静态存在于HTML页面中，非js代码生成，没有robots协议限制<br>选取方法：浏览器F12，源代码查看等<br>选取心态：不要纠结于某个网站，多找信息源尝试<br>程序的结构设计<br>步骤1：从东方财富网获取股票列表<br>步骤2：根据股票列表逐个到百度股票获取个股信息<br>步骤3：将结果存储到文件<br><pre><code class="hljs python"><span class="hljs-comment">#CrawBaiduStocksB.py</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<span class="hljs-keyword">import</span> traceback<span class="hljs-keyword">import</span> re <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHTMLText</span><span class="hljs-params">(url, code=<span class="hljs-string">"utf-8"</span>)</span>:</span>    <span class="hljs-keyword">try</span>:        r = requests.get(url)        r.raise_for_status()        r.encoding = code        <span class="hljs-keyword">return</span> r.text    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getStockList</span><span class="hljs-params">(lst, stockURL)</span>:</span>    html = getHTMLText(stockURL, <span class="hljs-string">"GB2312"</span>)    soup = BeautifulSoup(html, <span class="hljs-string">'html.parser'</span>)     a = soup.find_all(<span class="hljs-string">'a'</span>)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:        <span class="hljs-keyword">try</span>:            href = i.attrs[<span class="hljs-string">'href'</span>]          <span class="hljs-comment">#&lt;a&gt; 标签的 href 属性用于指定超链接目标的 URL</span>            lst.append(re.findall(<span class="hljs-string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="hljs-number">0</span>])        <span class="hljs-keyword">except</span>:            <span class="hljs-keyword">continue</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getStockInfo</span><span class="hljs-params">(lst, stockURL, fpath)</span>:</span>    count = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> stock <span class="hljs-keyword">in</span> lst:        url = stockURL + stock + <span class="hljs-string">".html"</span>        html = getHTMLText(url)        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">if</span> html==<span class="hljs-string">""</span>:                <span class="hljs-keyword">continue</span>            infoDict = &#123;&#125;            soup = BeautifulSoup(html, <span class="hljs-string">'html.parser'</span>)            stockInfo = soup.find(<span class="hljs-string">'div'</span>,attrs=&#123;<span class="hljs-string">'class'</span>:<span class="hljs-string">'stock-bets'</span>&#125;)             name = stockInfo.find_all(attrs=&#123;<span class="hljs-string">'class'</span>:<span class="hljs-string">'bets-name'</span>&#125;)[<span class="hljs-number">0</span>]            infoDict.update(&#123;<span class="hljs-string">'股票名称'</span>: name.text.split()[<span class="hljs-number">0</span>]&#125;)                         keyList = stockInfo.find_all(<span class="hljs-string">'dt'</span>)            valueList = stockInfo.find_all(<span class="hljs-string">'dd'</span>)            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(keyList)):                key = keyList[i].text                val = valueList[i].text                infoDict[key] = val                         <span class="hljs-keyword">with</span> open(fpath, <span class="hljs-string">'a'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> f:                f.write( str(infoDict) + <span class="hljs-string">'\n'</span> )                count = count + <span class="hljs-number">1</span>                print(<span class="hljs-string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="hljs-number">100</span>/len(lst)),end=<span class="hljs-string">""</span>)        <span class="hljs-keyword">except</span>:            count = count + <span class="hljs-number">1</span>            print(<span class="hljs-string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="hljs-number">100</span>/len(lst)),end=<span class="hljs-string">""</span>)print(<span class="hljs-string">'*'</span>,end = <span class="hljs-string">' '</span>)            <span class="hljs-comment">#end值为空格</span>            <span class="hljs-comment">#print('*',end = '')#end值为空字符串</span>            <span class="hljs-comment">#print('*',end = '')#end值为空字符串</span>            <span class="hljs-comment">#print('')#end值为默认值（换行\n）</span>            <span class="hljs-comment">#print('*',end = '1')#end值为字符串‘1’</span>            <span class="hljs-comment">#print('*',end = '12')#end值为字符串‘12’</span>            <span class="hljs-keyword">continue</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    stock_list_url = <span class="hljs-string">'https://quote.eastmoney.com/stocklist.html'</span>    stock_info_url = <span class="hljs-string">'https://gupiao.baidu.com/stock/'</span>    output_file = <span class="hljs-string">'D:/BaiduStockInfo.txt'</span>    slist=[]    getStockList(slist, stock_list_url)    getStockInfo(slist, stock_info_url, output_file) main()</code></pre></p><h3 id="Scrapy-框架与实例"><a href="#Scrapy-框架与实例" class="headerlink" title="Scrapy 框架与实例"></a>Scrapy 框架与实例</h3><p>Scrapy是功能强大的爬虫框架<br>爬虫框架是实现爬虫功能的一个软件结构和功能组件集合<br>爬虫框架是一个半成品，能够帮助用户实现专业网络爬虫<br>Scrapy爬虫框架结构：<br><img src="/img/Crawler/32.png" srcset="/img/loading.gif" alt="图32"><br><code>Downloader Middleware</code><br>目的：实施Engine、Scheduler和Downlaoder之间进行用户可配置的控制<br>功能：修改、丢弃、新增请求或者响应<br><code>Spider</code>（用户主要编写模块）<br>解析Downloader返回的响应（Response）<br>产生爬取项（scrapyed item）<br>产生额外的爬取请求（Requests）<br><code>Item Pipelines</code>（需要用户自己编写代码）<br>以流水线方式处理Spider产生的爬取项<br>由一组操作顺序组成，类似流水线，每个操作是一个Item Pipeline类型<br>可能操作包括：清理、检验和查重爬取项中的HTML数据、将数据存储到数据库<br><code>Spider Middleware</code><br>目的：对请求和爬取项的再处理<br>功能：修改、丢弃、新增请求或者爬取项<br>用户可以编写配置代码<br><img src="/img/Crawler/33.png" srcset="/img/loading.gif" alt="图33"><br>Scrapy命令行格式：<br><code>&gt;scrapy&lt;command&gt;[options][args]</code><br><img src="/img/Crawler/34.png" srcset="/img/loading.gif" alt="图34"><br>产生步骤：  </p><ol><li>建立一个Scapy爬虫工程  </li><li>在工程中产生一个Scrapy爬虫  </li><li>配置产生的spider爬虫  </li><li>运行爬虫，获取网页  <pre><code class="hljs livecodeserver">oot@liu-PC:/home/liu/Documents/learn<span class="hljs-comment"># scrapy startproject scrapydemo</span>New Scrapy project <span class="hljs-string">'scrapydemo'</span>, <span class="hljs-keyword">using</span> template <span class="hljs-built_in">directory</span> <span class="hljs-string">'/usr/lib/python3/dist-packages/scrapy/templates/project'</span>, created <span class="hljs-keyword">in</span>: /home/liu/Documents/learn/scrapydemoYou can <span class="hljs-built_in">start</span> your <span class="hljs-keyword">first</span> spider <span class="hljs-keyword">with</span>: cd scrapydemo scrapy genspider example example.comroot@liu-PC:/home/liu/Documents/learn<span class="hljs-comment"># cd scrapydemo/</span>root@liu-PC:/home/liu/Documents/learn/scrapydemo<span class="hljs-comment"># scrapy genspider demo python123.io</span>Created spider <span class="hljs-string">'demo'</span> <span class="hljs-keyword">using</span> template <span class="hljs-string">'basic'</span> <span class="hljs-keyword">in</span> module: scrapydemo.spiders.demo﻿​</code></pre><pre><code class="hljs python"> -*- coding: utf<span class="hljs-number">-8</span> -*-<span class="hljs-keyword">import</span> scrapy<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span>    name = <span class="hljs-string">'demo'</span>    <span class="hljs-comment">#allowed_domains = ['python123.io']</span>    start_urls = [<span class="hljs-string">'http://python123.io/ws/demo.html'</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span>        fname = response.url.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>]        <span class="hljs-keyword">with</span> open(fname, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> f:            f.write(response.body)        self.log(<span class="hljs-string">'Saved file %s.'</span> % name)</code></pre><code>scrapy crawl  demo</code>运行爬虫<br>parse()用于处理响应，解析内容形成字典，发现新的URL爬取请求</li></ol><h4 id="Yield关键字"><a href="#Yield关键字" class="headerlink" title="Yield关键字"></a>Yield关键字</h4><p>生成器是一个不断产生值的函数<br>包含yield语句的函数是一个生成器<br>生成器每次产生一个值（yield语句），函数被冻结，被唤醒后再产生一个值<br><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen</span><span class="hljs-params">(n)</span></span><span class="hljs-symbol">:</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n)<span class="hljs-symbol">:</span>        <span class="hljs-keyword">yield</span> i**<span class="hljs-number">2</span>        <span class="hljs-comment">#产生一个小于n的所有整数的平方值</span></code></pre><br>生成器相比一次列出所有内容的优势<br>更节省存储空间<br>响应更迅速<br>使用更灵活  </p><p>Scrapy爬虫的使用步骤：<br>步骤1：创建一个工程和Spider模板<br>步骤2：编写Spider<br>步骤3：编写Item Pipeline<br>步骤4：优化配置策略  </p><p>爬虫的数据类型：Request 类、Response类、Item类<br>Request类 <code>class scrapy.http.Request()</code><br>Request对象表示一个HTTP请求<br>由spider生成，由Downlaoder执行  </p><ul><li>url               Request对应请求的URL地址</li><li>method       对应的请求方法， ‘GET’ ‘POST’等</li><li>header        字典类型风格的请求头</li><li>body           请求内容主体，字符串类型</li><li>meta           用户添加的扩展信息，在Scrapy内部模块间传递信息使用  </li><li>copy()         复制该请求  </li></ul><p><code>Response类 class scrapy.http.Response()</code><br>Response对象表示一个HTTP响应<br>由Downlaoder生成，由spider处理  </p><ul><li>url               Request对应请求的URL地址</li><li>status         HTTP状态码，默认是200</li><li>header       Response对应的头部信息</li><li>body           Response对应的内容主体信息，字符串类型</li><li>flag             一组标记</li><li>request       产生Response类型对应的Request对象</li><li>copy()         复制该响应</li></ul><p>Item类 <code>class scrapy.item.Item()</code><br>Item对象表示一个从HTML页面中提取的信息内容<br>由Spider生成，由Item Pipeline处理<br>Item类似于字典类型，可以按照字典类型操作  </p><p>Scrapy爬虫支持多种HTML信息提取方法<br>Beautiful Soup<br>Ixml<br>re<br>XPath Selector<br>CSS Selector  </p><p><code>&lt;HTML&gt;.css(&#39;a::attr(href)&#39;).extract</code>  # a:标签名称  href：标签属性</p><h4 id="股票数据Scrapy爬虫实例"><a href="#股票数据Scrapy爬虫实例" class="headerlink" title="股票数据Scrapy爬虫实例"></a>股票数据Scrapy爬虫实例</h4><p>功能描述：<br>技术路线：Scrapy<br>目标：获取上交所和深交所所有股票的名称和交易信息<br>输出：保存到文件中   </p><p>获取股票列表：<br>东方财富网：<a href="http://quote.eastmoney.com/stocklist.html" target="_blank" rel="noopener">http://quote.eastmoney.com/stocklist.html</a><br>获取个股信息：<br>百度股票： <a href="https://gupiao.baidu.com/stock/" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/</a><br>单个股票：<a href="https://gupiao.baidu.com/stock/sz002439.html" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/sz002439.html</a><br>步骤：<br>1.建立工程和Spider模板<br><pre><code class="hljs armasm"><span class="hljs-symbol">scrapy</span> startproject <span class="hljs-keyword">BaiduStocks</span><span class="hljs-keyword">cd </span><span class="hljs-keyword">BaiduStocks</span><span class="hljs-keyword">scrapy </span>genspider stocks <span class="hljs-keyword">baidu.com</span><span class="hljs-keyword">进一步修改spider/stocks.py文件</span></code></pre><br>2.编写Spider<br>配置stocks.py文件<br>修改对返回页面的处理<br>修改对新增URL爬取请求的处理<br><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> scrapy<span class="hljs-keyword">import</span> re<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StocksSpider</span><span class="hljs-params">(scrapy.Spider)</span>:</span>    name = <span class="hljs-string">'stocks'</span>    start_urls = [<span class="hljs-string">'http://quote.eastmoney.com/stocklist.html'</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span><span class="hljs-params">(self, response)</span>:</span>        <span class="hljs-keyword">for</span> href <span class="hljs-keyword">in</span> response.css(<span class="hljs-string">'a::attr(href)'</span>).extract():            <span class="hljs-keyword">try</span>:                stock = re.findall(<span class="hljs-string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="hljs-number">0</span>]                url = <span class="hljs-string">'https://gupiao.baidu.com/stock'</span> + stock +<span class="hljs-string">'.html'</span>                <span class="hljs-keyword">yield</span> scrapy.Request(url, callback=self.parse_stock)<span class="hljs-comment">#回调函数，异步进程</span>            <span class="hljs-keyword">except</span>:                <span class="hljs-keyword">continue</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_stock</span><span class="hljs-params">(self,response)</span>:</span>        infoDict = &#123;&#125;        stockInfo = response.css(<span class="hljs-string">'.stock-bets'</span>)        name = stockInfo.css(<span class="hljs-string">'.bets-name'</span>).extract()[<span class="hljs-number">0</span>]        keyList = stockInfo.css(<span class="hljs-string">'dt'</span>).extract()        valueList = stockInfo.css(<span class="hljs-string">'dd'</span>).extract()        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(keyList)):            key = re.findall(<span class="hljs-string">r'&gt;.*&lt;/d&gt;'</span>, keyList[i])[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>:<span class="hljs-number">-5</span>]            <span class="hljs-keyword">try</span>:                val = re.findall(<span class="hljs-string">r'\d+\.?.*&lt;/dd&gt;'</span>, valueList[i])[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>:<span class="hljs-number">-5</span>]            <span class="hljs-keyword">except</span>:                val = <span class="hljs-string">'--'</span>            infoDict[key]=val        infoDict.update(            &#123;<span class="hljs-string">'股票名称'</span>:re.findall(<span class="hljs-string">'\s.*\('</span>,name)[<span class="hljs-number">0</span>].split()[<span class="hljs-number">0</span>] +\            re.findall(<span class="hljs-string">'\&gt;.*\&lt;'</span>, name)[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>]&#125;)        <span class="hljs-keyword">yield</span> infoDict</code></pre><br>3.编写ITEM Pipelines<br>配置pipelines.py文件<br>定义对爬取项（Scraped Item）的处理类<br><pre><code class="hljs ruby"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment"># Define your item pipelines here</span><span class="hljs-comment">#</span><span class="hljs-comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><span class="hljs-comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaidustocksPipeline</span>(<span class="hljs-title">object</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_item</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, item, spider)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-keyword">return</span> item<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaidustocksInfoPipeline</span>(<span class="hljs-title">object</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">open_spider</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,spider)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-keyword">self</span>.f = open(<span class="hljs-string">'BaiduStockInfo.txt'</span>, <span class="hljs-string">'w'</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close_spider</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,spider)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-keyword">self</span>.f.close()        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_item</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, item, spider)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-symbol">try:</span>            line = str(dict(item)) + <span class="hljs-string">'\n'</span>            <span class="hljs-keyword">self</span>.f.write(line)        <span class="hljs-symbol">except:</span>            pass        <span class="hljs-keyword">return</span> item</code></pre><br>配置ITEM_PIPELINES选项<br><pre><code class="hljs ebnf"><span class="hljs-attribute">ITEM_PIPELINES</span> = &#123;    <span class="hljs-string">'BaiduStocks.pipelines.BaidustocksInfoPipeline'</span>: 300,&#125;</code></pre></p><h4 id="优化实例"><a href="#优化实例" class="headerlink" title="优化实例"></a>优化实例</h4><p>配置并发连接选项<br><img src="/img/Crawler/35.png" srcset="/img/loading.gif" alt="图35"></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Crawler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫（一）</title>
    <link href="/2020/02/15/%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/02/15/%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/Crawler/01.png" srcset="/img/loading.gif" alt="图1">  </p><h3 id="集成开发系统"><a href="#集成开发系统" class="headerlink" title="集成开发系统"></a>集成开发系统</h3><p>文本工具类<br>IDLE是自带的，入门级<br>Sublime Text<br>专为程序员设计，提高编程体验<br>Wine<br>收费，适合多人开发<br>PyCharm<br>简单、集成度较高<br>Canopy<br>公司维护<br>Anaconda<br>开源免费，数据分析，科学计算  </p><h3 id="Python网络爬虫与信息提取"><a href="#Python网络爬虫与信息提取" class="headerlink" title="Python网络爬虫与信息提取"></a>Python网络爬虫与信息提取</h3><p>equwsts库的安装<br>Requests库的7个主要方法  </p><ul><li><code>requests.request()</code>  构造一个请求，支撑以下各方法的基础方法  </li><li><code>requests.get()</code>         获取HTML网页的主要方法，对应于HTTP的GET  <strong>*</strong>  </li><li><code>requests.head()</code>      获取HTML网页头信息的方法，对应于HTTP的HEAD  <strong>*</strong>  </li><li><code>requests.post()</code>       向HTML网页提交POST请求的方法，对应于HTTP的POST  </li><li><code>requests.put()</code>         向HTML网页提交PUT请求的方法，对应于HTTP的PUT  </li><li><code>requests.patch()</code>     向HTML网页提交局部修改请求，对应于HTTP的PATCH  </li><li><code>requests.delete()</code>    向HTML页面提交删除请求，对应于HTTP的DELETE  </li></ul><p>requests.request()<br><code>requests.get(url)</code> 返回一个包含服务器资源的Reponse对象（包括爬取返回的所有对象），构造一个向服务器请求资源的request对象<br>Response对象的属性  </p><ul><li><code>r.status_code</code>     HTTP请求的返回状态，200表示连接成功，404表示失败  </li><li><code>r.text</code>                   HTTP响应内容的字符串形式，即，url对应的页面内容  </li><li><code>r.encoding</code>          从HTTP header中猜测的响应内容编码方式  </li><li><code>r.apparent_encoding</code>         从内容中分析出响应内容的编码方式（备选编码方式）  </li><li><code>r.content</code>             HTTP响应内容的二进制形式  </li></ul><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span>&gt; import requests<span class="hljs-meta">&gt;&gt;</span>&gt; r = requests.get(<span class="hljs-string">"http://www.baidu.com"</span>) <span class="hljs-meta">&gt;&gt;</span>&gt; r.status_code <span class="hljs-number">200</span> <span class="hljs-meta">&gt;&gt;</span>&gt; r.encoding = <span class="hljs-string">'utf-8'</span> <span class="hljs-meta">&gt;&gt;</span>&gt; r.text﻿​</code></pre><p><code>requests.request(url,  **kwarges)</code><br>url: 拟获取页面的url链接<br><strong>kwarge: 12个控制访问的参数:<br>paras字典或者字节序列，作为参数增加URL中<br>data 字典、字节序列或文件对象，作为Request的内容<br>json JSON格式的数据，作为Request的内容<br>headers 字典，HTTP定制头（模拟浏览器）<br>cookies 字典或CookieJar， Request中的cookie<br>auth  元组，支持HTTP认证功能<br>files  字典类型，传输文件<br>timeout  设定超时时间，秒为单位<br>proxies 字典类型，设定访问服务器，可以增加登录认证<br>allow_redirects: True/False, 默认为True，重定向开关<br>stream: True/False ，默认为True，获取内容立即下载开关<br>verify True、False，默认为True，认证SSL证书开关<br>cert 本地SSL证书的路径<br>`requests.head(url. </strong>kwargs) <code>`r = requests.head(&#39;http://httpbin.org/get&#39;&#39;)</code><br>可以用很少的流量获取网络的概要信息<br><code>requests.post(url, data=None,json=None,**kwargs)</code><br><code>payload = {&#39;key1&#39; : &#39;value1&#39;, &#39;key2&#39; : &#39;value2&#39;}</code><br><code>r = requests.post(&#39;http://httpbin.org/post&#39;, data = payload)</code><br>向URL POST一个字典，自动编码为form（表单）<br>如果不提交键对，只提交字符串，则会向ULR POST一个字符串，自动编码为data<br><code>requests.put(url, data=None,**kwargs)</code><br><code>requests.delete(url, **kwargs)</code><br><code>requests.get(url, params=None, **kwargs)</code>  </p><h3 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h3><p>理解requests库的异常  </p><ul><li><code>requests,ConnectionError</code>        网络连接错误异常，如DNS查询失败、拒绝连接等  </li><li><code>requests.HTTPError</code>  HTTP错误异常  </li><li><code>requests.URLRequired</code>            URL缺失异常  </li><li><code>requests.TooManyRedircts</code>       超过最大重定向次数，产生重定向异常  </li><li><code>requests.ConnectionTimeout</code>    连接远程服务器超时异常  </li><li><code>requests.Timeout</code>                      请求URL超时，产生超时异常  <pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHTMLText</span><span class="hljs-params">(url)</span>:</span>    <span class="hljs-keyword">try</span>:        r = requests.get(url, timeout=<span class="hljs-number">30</span>)        r.raise_for_status() <span class="hljs-comment">#如果状态不是200，引发HTTPError异常(有效的测试连接返回错误)</span>        r.encoding = r.apparent_encoding        <span class="hljs-keyword">return</span> r.text    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">"产生异常"</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    url = <span class="hljs-string">"http://www.baidu.com"</span>    print(getHTMLText(url))</code></pre><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3>HTTP, Hypertext Transfer Protocol, 超文本传输协议。<br>HTTP是基于“请求与响应” 模式的、无状态的应用层协议。<br>HTTP URL实例：<br><a href="http://www.bit.edu.cn" target="_blank" rel="noopener">http://www.bit.edu.cn</a><br><a href="http://220.181.111.188/duty" target="_blank" rel="noopener">http://220.181.111.188/duty</a><br>HTTP URL的理解：URL是通过HTTP协议存储资源的Internet路径，一个URL对应一个数据资源<br>HTTP协议对资源的操作<br>GET            请求获得URL位置的资源<br>HEAD         请求获取URL位置资源的响应信息报告，即获得该资源的头部信息<br>POST         请求向URL位置资源后附加新的数据<br>PUT            请求向URL位置存储一个资源，覆盖原URL位置的资源<br>PATCH        请求局部更新URL位置的资源，即改变该处资源的部分内容<br>DELETE    请求删除URL位置存储的资源  </li></ul><p>理解PATCH和PUT的区别：<br>假设URL位置有一组数据UserInfo， 包括UserID、UserName等20个字段。<br>需求：用户修改了UserName，其他不变。<br><em>采用PATCH，仅向URL提交UserName的局部更新请求  </em>采用PUT，必须将所有20个字段一并提交到URL，未提交的字段被删除<br>PATCH的最主要好处是节省带宽。  </p><h3 id="网络爬虫的尺寸："><a href="#网络爬虫的尺寸：" class="headerlink" title="网络爬虫的尺寸："></a>网络爬虫的尺寸：</h3><pre><code class="hljs asciidoc">-----------------------------------------------------小规模，数据量小  中规模，数据规模较大    大规模，搜索引擎爬取速度不敏感    爬取速度敏感           爬取速度关键Request库       Scrapy库             定制开发-----------------------------------------------------爬取网页 玩转网页  爬取网站，爬取系列网站   爬取全网</code></pre><p>第一个实例，爬取京东商品信息<br><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">"https://item.jd.com/2967929.html"</span><span class="hljs-keyword">try</span>:    r = requests.<span class="hljs-built_in">get</span>(url)    r.raise_for_status()    r.encoding r.apparaent_encoding    <span class="hljs-built_in">print</span>(r.<span class="hljs-built_in">text</span>[:<span class="hljs-number">1000</span>])except:    <span class="hljs-built_in">print</span>(爬取失败)</code></pre><br> 第二个实例，爬取亚马逊页面信息<br><pre><code class="hljs routeros">import requestsurl = <span class="hljs-string">"http://www.amazon.cn/gp/product/B01MBL5Z3Y"</span>try:    kv = &#123;<span class="hljs-string">'user-agent'</span>:<span class="hljs-string">'Mozilla/5.0'</span>&#125;    r = requests.<span class="hljs-builtin-name">get</span>(url,<span class="hljs-attribute">header</span>=kv)    r.raise_for_status()    r.encoding = r.apparent_encoding    <span class="hljs-builtin-name">print</span>(r.text[1000:2000])except:    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">"爬取失败"</span>)</code></pre><br>第三个实例，百度/360搜索<br><pre><code class="hljs routeros">import requestskeyword  = <span class="hljs-string">"Python"</span>try:    kv = &#123;<span class="hljs-string">'wd'</span>:keyword&#125;    r = requests.<span class="hljs-builtin-name">get</span>(<span class="hljs-string">"http://www.baidu.com/s"</span>, params = kv)    <span class="hljs-builtin-name">print</span>(r.request.url)    r.raise_for_status()    <span class="hljs-builtin-name">print</span>(len(r.text))except:    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">"爬取失败"</span>)</code></pre><br>第四个实例，网络图片的爬取和存储<br><pre><code class="hljs lua">import requestsimport <span class="hljs-built_in">os</span> #路径操作：<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>子库，处理文件路径及信息、进程管理：启动系统中的其他程序、环境参数：获得系统中软硬件信息等环境参数url = <span class="hljs-string">"http://img0.dili360.com/pic/2020/04/29/5ea8e963e9e4f5663028305.jpg"</span>root = <span class="hljs-string">"/home/liu/Pictures/"</span><span class="hljs-built_in">path</span> = root +url.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>] #分割 [<span class="hljs-string">'http:'</span>, <span class="hljs-string">''</span>, <span class="hljs-string">'www.baidu.com'</span>, <span class="hljs-string">'python'</span>, <span class="hljs-string">'image'</span>, <span class="hljs-string">'123456.jpg'</span>]try:    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(root):   #判断<span class="hljs-built_in">path</span>对应文件或目录是否存在，返回True或False        <span class="hljs-built_in">os</span>.mkdir(root)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(<span class="hljs-built_in">path</span>):        r = requests.get        with <span class="hljs-built_in">open</span>(<span class="hljs-built_in">path</span>, <span class="hljs-string">'wb'</span>) as f: #<span class="hljs-string">'wb'</span>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。            f.<span class="hljs-built_in">write</span>(r.content)            f.<span class="hljs-built_in">close</span>()            <span class="hljs-built_in">print</span>(<span class="hljs-string">"文件保存成功"</span>)    <span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(文件已经存在)except:    <span class="hljs-built_in">print</span>(<span class="hljs-string">"爬取失败"</span>)</code></pre><br>第五个实例，IP地址归属地的自动查询<br><pre><code class="hljs processing"><span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">"http://m.ip138.com/ip.asp?ip="</span><span class="hljs-keyword">try</span>:    r = requests.<span class="hljs-built_in">get</span>(url+<span class="hljs-string">'202.204.80.112'</span>)    r.raise_for_status()    r.encoding = r.apparent_encoding    <span class="hljs-built_in">print</span>(r.<span class="hljs-built_in">text</span>[<span class="hljs-number">-500</span>:])except:    <span class="hljs-built_in">print</span>(<span class="hljs-string">"爬取失败"</span>)</code></pre></p><h3 id="掌握定向网络数据爬取和网页解析的基本能力"><a href="#掌握定向网络数据爬取和网页解析的基本能力" class="headerlink" title="掌握定向网络数据爬取和网页解析的基本能力"></a>掌握定向网络数据爬取和网页解析的基本能力</h3><h4 id="Beautiful-Soup库的入门和使用"><a href="#Beautiful-Soup库的入门和使用" class="headerlink" title="Beautiful Soup库的入门和使用"></a>Beautiful Soup库的入门和使用</h4><p>演示HTML页面地址：<br><a href="http://python123.io/ws/demo.html" target="_blank" rel="noopener">http://python123.io/ws/demo.html</a>  </p><p>打开网页的源代码（HTML 5.0）<br><pre><code class="hljs coffeescript"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup <span class="hljs-comment">#bs4是一个类</span>soup = BeautifulSoup(<span class="hljs-string">'&lt;p&gt;data&lt;/p&gt;'</span>, <span class="hljs-string">'html.parser'</span>)  <span class="hljs-built_in">print</span>(soup.prettify())</code></pre><br>BeautifulSoup库的基本元素<br><img src="/img/Crawler/02.png" srcset="/img/loading.gif" alt="图2"><br>BeautifulSoup库是解析、遍历、维护“标签树”的功能库<br><img src="/img/Crawler/03.png" srcset="/img/loading.gif" alt="图3"><br>BeautifulSoup库的引用<br>BeautifulSoup库，也叫bs4<br><code>from bs4 import BeautifulSoup</code><br><img src="/img/Crawler/04.png" srcset="/img/loading.gif" alt="图4"><br>这三者是等价的关系<br><pre><code class="hljs lisp">from bs4 import BeautifulSoupsoup = BeautifulSoup(<span class="hljs-string">"&lt;html&gt;data&lt;html&gt;"</span>, <span class="hljs-string">"html.parser"</span>)soup2 = BeautifulSoup(<span class="hljs-name">open</span>(<span class="hljs-string">"/home/liu/Document/demo.htmnl"</span>), html.parser)</code></pre><br>BeaytifulSoup库的解析器  </p><ul><li>bs4的HTML解析器   BeautifulSoup(mk, ‘html.parser’)  安装ps4库  </li><li>lxml 的HTML解析器  BeautifulSoup(mk, ‘lxml’)             pip install lxml  </li><li>lxml 的XML解析器    BeautifulSoup(mk, ‘lxml’)            pip install lxml  </li><li>html5lib的解析器      BeautifulSoup(mk. ‘html5lib’)       pip install html5lib  </li></ul><p>BeautifulSoup 类的基本元素<br>Tag 标签，最基本的信息组织单元，分别用<>和</>表明开头和结尾<br>Name  标签的名字  <code>&lt;p&gt;...&lt;/p&gt;</code>的名字是‘p’，格式：<tag>.name<br>Atrributes 标签的属性，字典形式组织，格式：<code>&lt;tag&gt;.attrs</code><br>NavigableString 　标签内非属性字符串，&lt;&gt;…&lt;/.&gt;字符串，格式：<tag>string 可以跨越多个标签形式<br>Comment  标签内字符串的注释部分，一种特殊的Comment类型<br><pre><code class="hljs vim">&gt;&gt;&gt; from bs4 import BeautifulSoup&gt;&gt;&gt; soup = BeautifulSoup(demo, <span class="hljs-string">"html.parser"</span>)&gt;&gt;&gt; <span class="hljs-keyword">print</span>(soup.prettify())<span class="hljs-symbol">&lt;html&gt;</span> <span class="hljs-symbol">&lt;head&gt;</span>  <span class="hljs-symbol">&lt;title&gt;</span>   This <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">python</span> demo page  &lt;/title&gt; &lt;/head&gt; <span class="hljs-symbol">&lt;body&gt;</span>  &lt;<span class="hljs-keyword">p</span> class=<span class="hljs-string">"title"</span>&gt;   <span class="hljs-symbol">&lt;b&gt;</span>    The demo <span class="hljs-keyword">python</span> introduces several <span class="hljs-keyword">python</span> courses.   &lt;/<span class="hljs-keyword">b</span>&gt;  &lt;/<span class="hljs-keyword">p</span>&gt;  &lt;<span class="hljs-keyword">p</span> class=<span class="hljs-string">"course"</span>&gt;   Python <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> wonderful general-purpose programming <span class="hljs-keyword">language</span>. You can learn Python from novice <span class="hljs-keyword">to</span> professional by tracking the following course<span class="hljs-variable">s:</span>   &lt;<span class="hljs-keyword">a</span> class=<span class="hljs-string">"py1"</span> href=<span class="hljs-string">"http://www.icourse163.org/course/BIT-268001"</span> id=<span class="hljs-string">"link1"</span>&gt;    Basic Python   &lt;/<span class="hljs-keyword">a</span>&gt;   <span class="hljs-built_in">and</span>   &lt;<span class="hljs-keyword">a</span> class=<span class="hljs-string">"py2"</span> href=<span class="hljs-string">"http://www.icourse163.org/course/BIT-1001870001"</span> id=<span class="hljs-string">"link2"</span>&gt;    Advanced Python   &lt;/<span class="hljs-keyword">a</span>&gt;   .  &lt;/<span class="hljs-keyword">p</span>&gt; &lt;/body&gt;&lt;/html&gt;&gt;&gt;&gt; from bs4 import BeautifulSoup &gt;&gt;&gt; soup = BeautifulSoup(demo, <span class="hljs-string">"html.parser"</span>)&gt;&gt;&gt; soup.title<span class="hljs-symbol">&lt;title&gt;</span>This <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">python</span> demo page&lt;/title&gt;&gt;&gt;&gt; <span class="hljs-keyword">tag</span>Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, in <span class="hljs-symbol">&lt;module&gt;</span>NameError: name <span class="hljs-string">'tag'</span> <span class="hljs-keyword">is</span> not defined&gt;&gt;&gt; <span class="hljs-keyword">tag</span> = soup.<span class="hljs-keyword">a</span>&gt;&gt;&gt; <span class="hljs-keyword">tag</span>&lt;<span class="hljs-keyword">a</span> class=<span class="hljs-string">"py1"</span> href=<span class="hljs-string">"http://www.icourse163.org/course/BIT-268001"</span> id=<span class="hljs-string">"link1"</span>&gt;Basic Python&lt;/<span class="hljs-keyword">a</span>&gt;&gt;&gt;&gt; soup.<span class="hljs-keyword">a</span>.name<span class="hljs-string">'a'</span>&gt;&gt;&gt; soup.<span class="hljs-keyword">a</span>.parent.name <span class="hljs-string">'p'</span>&gt;&gt;&gt; soup.<span class="hljs-keyword">p</span>.parent.name<span class="hljs-string">'body'</span>&gt;&gt;&gt; <span class="hljs-keyword">tag</span> = soup.<span class="hljs-keyword">a</span>&gt;&gt;&gt; <span class="hljs-keyword">tag</span>.attrs&#123;<span class="hljs-string">'href'</span>: <span class="hljs-string">'http://www.icourse163.org/course/BIT-268001'</span>, <span class="hljs-string">'id'</span>: <span class="hljs-string">'link1'</span>, <span class="hljs-string">'class'</span>: [<span class="hljs-string">'py1'</span>]&#125;&gt;&gt;&gt; <span class="hljs-keyword">tag</span>.attrs[<span class="hljs-string">'class'</span>][<span class="hljs-string">'py1'</span>]&gt;&gt;&gt; <span class="hljs-keyword">tag</span>.attrs[<span class="hljs-string">'href'</span>]<span class="hljs-string">'http://www.icourse163.org/course/BIT-268001'</span>&gt;&gt;&gt; <span class="hljs-built_in">type</span>(<span class="hljs-keyword">tag</span>.attrs)&lt;class <span class="hljs-string">'dict'</span>&gt;&gt;&gt;&gt; <span class="hljs-built_in">type</span>(<span class="hljs-keyword">tag</span>)&lt;class <span class="hljs-string">'bs4.element.Tag'</span>&gt;&gt;&gt;&gt; soup.<span class="hljs-keyword">a</span>&lt;<span class="hljs-keyword">a</span> class=<span class="hljs-string">"py1"</span> href=<span class="hljs-string">"http://www.icourse163.org/course/BIT-268001"</span> id=<span class="hljs-string">"link1"</span>&gt;Basic Python&lt;/<span class="hljs-keyword">a</span>&gt;&gt;&gt;&gt; soup.<span class="hljs-keyword">a</span>.strong&gt;&gt;&gt; soup.<span class="hljs-keyword">a</span>.<span class="hljs-built_in">string</span><span class="hljs-string">'Basic Python'</span>&gt;&gt;&gt; soup.<span class="hljs-keyword">p</span>&lt;<span class="hljs-keyword">p</span> class=<span class="hljs-string">"title"</span>&gt;<span class="hljs-symbol">&lt;b&gt;</span>The demo <span class="hljs-keyword">python</span> introduces several <span class="hljs-keyword">python</span> courses.&lt;/<span class="hljs-keyword">b</span>&gt;&lt;/<span class="hljs-keyword">p</span>&gt;&gt;&gt;&gt; soup.<span class="hljs-keyword">p</span>.<span class="hljs-built_in">string</span><span class="hljs-string">'The demo python introduces several python courses.'</span>&gt;&gt;&gt; <span class="hljs-built_in">type</span>(soup.<span class="hljs-keyword">p</span>.<span class="hljs-built_in">string</span>)&lt;class <span class="hljs-string">'bs4.element.NavigableString'</span>&gt;&gt;&gt;&gt; newsoup = BeaytifulSoup(<span class="hljs-string">"&lt;b&gt;&lt;!--This is a comment--&gt;&lt;/b&gt;&lt;p&gt;this is not a comment&lt;/p&gt;"</span>, <span class="hljs-string">"html.parser"</span>)Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):  File <span class="hljs-string">"&lt;stdin&gt;"</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">1</span>, in <span class="hljs-symbol">&lt;module&gt;</span>NameError: name <span class="hljs-string">'BeaytifulSoup'</span> <span class="hljs-keyword">is</span> not defined&gt;&gt;&gt; newsoup = BeautifulSoup(<span class="hljs-string">"&lt;b&gt;&lt;!--This is a comment--&gt;&lt;/b&gt;&lt;p&gt;this is not a comment&lt;/p&gt;"</span>, <span class="hljs-string">"html.parser"</span>)&gt;&gt;&gt; newsoup.<span class="hljs-keyword">b</span>.<span class="hljs-built_in">string</span><span class="hljs-string">'This is a comment'</span>&gt;&gt;&gt; <span class="hljs-built_in">type</span>(newsoup.<span class="hljs-keyword">p</span>.<span class="hljs-built_in">string</span>)&lt;class <span class="hljs-string">'bs4.element.NavigableString'</span>&gt;&gt;&gt;&gt; newsoup.<span class="hljs-keyword">p</span>.<span class="hljs-built_in">string</span><span class="hljs-string">'this is not a comment'</span>&gt;&gt;&gt; <span class="hljs-built_in">type</span>(newsoup.<span class="hljs-keyword">p</span>.<span class="hljs-built_in">string</span>)&lt;class <span class="hljs-string">'bs4.element.NavigableString'</span>&gt;</code></pre><br>HTML的基本格式<br><img src="/img/Crawler/05.png" srcset="/img/loading.gif" alt="图5">  </p><ul><li>contents  子节点的列表，将<code>&lt;tag&gt;</code>所有儿子节点存入列表</li><li>children   子节点的迭代类型，与.contents类似，用于循环遍历儿子节点</li><li>descendants   子孙节点的迭代类型，包含所有子孙节点，用于循环遍历<br>标签树的上行遍历  </li><li>parent  节点的父亲标签</li><li>parents   节点先辈标签的迭代类型，用于循环遍历先辈节点<pre><code class="hljs mel">soup = BeautifulSoup(demo, <span class="hljs-string">"html.parser"</span>)<span class="hljs-keyword">for</span> <span class="hljs-keyword">parent</span> <span class="hljs-keyword">in</span> soup.a.parents:    <span class="hljs-keyword">if</span> <span class="hljs-keyword">parent</span> is None:        <span class="hljs-keyword">print</span>(<span class="hljs-keyword">parent</span>)    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">print</span>(<span class="hljs-keyword">parent</span>.name)pbodyhtml[document]</code></pre>标签库的平行遍历  </li><li>next_sibling 返回按照HTML文本顺序的下一个平行节点标签  </li><li>previous_sibling 返回按照HTML文本顺序的上一个平行节点标签 </li><li>.next_siblings 迭代类型，返回按照HTML文本顺序的后续所有平行节点标签  </li><li>.previous_siblings 迭代类型， 返回按照HTML文本顺序的前续所有平行节点标签  </li><li>所有的平行遍历发生在同一个父亲节点之下<pre><code class="hljs bash"><span class="hljs-keyword">for</span> sibling <span class="hljs-keyword">in</span> soup.a.next_siblings:    <span class="hljs-built_in">print</span>(sibling) <span class="hljs-comment">#遍历后续节点</span>    <span class="hljs-keyword">for</span> sibling <span class="hljs-keyword">in</span> soup.a.previous_siblings:    <span class="hljs-built_in">print</span>(sibling)<span class="hljs-comment">#遍历前续节点</span></code></pre>基于bs4库的HTML格式输出<br><img src="/img/Crawler/06.png" srcset="/img/loading.gif" alt="图6"><pre><code class="hljs xml">&gt;&gt;&gt; print(soup.prettify())<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>   This is a python demo page  <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>    The demo python introduces several python courses.   <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"course"</span>&gt;</span>   Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py1"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.icourse163.org/course/BIT-268001"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"link1"</span>&gt;</span>    Basic Python   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   and   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py2"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.icourse163.org/course/BIT-1001870001"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"link2"</span>&gt;</span>    Advanced Python   <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   .  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>bs4库的编码<pre><code class="hljs stylus">soup = BeautifulSoup(<span class="hljs-string">"&lt;p&gt;中文&lt;/p&gt;"</span>, <span class="hljs-string">"html, parser"</span>)soup<span class="hljs-selector-class">.p</span>.string<span class="hljs-string">'中文'</span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.p.prettify()</span></span>)&lt;p&gt;中文&lt;p/&gt;</code></pre>信息组织与提取方法<br>信息的标记<br>标记的信息可形成信息组织结构，增加了信息维度<br>标记后的信息可用于通信、存储或展示<br>标记后的结构与信息一样具有重要价值<br><img src="/img/Crawler/07.png" srcset="/img/loading.gif" alt="图7"><br>HTML可以通过预定义的<>...</>标签形式组织不同类型的信息<br>XML eXtensible Markup Language (基于HTML发展而来)<br><img src="/img/Crawler/08.png" srcset="/img/loading.gif" alt="图8"><br><img src="/img/Crawler/09.png" srcset="/img/loading.gif" alt="图9"><br>JSON javaScript Object Notation<br>有类型的键值对key:value<br><img src="/img/Crawler/10.png" srcset="/img/loading.gif" alt="图10"><br><img src="/img/Crawler/11.png" srcset="/img/loading.gif" alt="图11"><br><img src="/img/Crawler/12.png" srcset="/img/loading.gif" alt="图12"><br>YAML YAML Ain’t Markup Language<br>无类型键值对 key：value<br><img src="/img/Crawler/13.png" srcset="/img/loading.gif" alt="图13"><br><img src="/img/Crawler/14.png" srcset="/img/loading.gif" alt="图14"><br><img src="/img/Crawler/15.png" srcset="/img/loading.gif" alt="图15"><br><img src="/img/Crawler/16.png" srcset="/img/loading.gif" alt="图17"><br>XML 最早的通用信息标记语言，可扩展性好，但繁琐          Internet 上的信息交互与传递<br>JSON 信息有类型，适合程序处理（js），相比XML简洁   移动应用云端和节点的信息通信，无注释<br>YAML 信息无类型，文本信息比例最高，可读性好       各类系统的配置文件，有注释易读  </li></ul><p>信息提取的一般方法<br>方法一：完整解析信息的 标记形式，再提取关键信息<br>XML JSON YAML<br>需要标记解析器  例如：bs4库的标签树遍历<br>优点：信息解析准确<br>缺点：提取过程繁琐，速度慢<br>方法二：无视任何标记形式，直接搜索关键信息<br>对信息的文本查找函数即可<br>优点： 提取过程简洁，速度较快<br>缺点： 提取结果准确性与信息内容相关<br>方法三：融合方法：结合形式解析与搜索方法，提取关键信息<br>XML JSON YAML搜索<br>需要标记解析器及文本查找函数  </p><p>实例：提取HTML中所有的URL连接<br>思路：<br>（1）搜索到所有<code>&lt;a&gt;</code>标签<br>（2）解析<code>&lt;a&gt;</code>标签格式，提取href后的链接内容<br><pre><code class="hljs lasso">&gt;&gt;&gt; soup = BeautifulSoup(demo, <span class="hljs-string">"html.parser"</span>)&gt;&gt;&gt; for <span class="hljs-keyword">link</span> <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">'a'</span>):<span class="hljs-params">...</span>     print(<span class="hljs-keyword">link</span>.get(<span class="hljs-string">'href'</span>))<span class="hljs-params">...</span> http:<span class="hljs-comment">//www.icourse163.org/course/BIT-268001</span>http:<span class="hljs-comment">//www.icourse163.org/course/BIT-1001870001</span></code></pre><br>返回一个列表类型，存储查找的结果<br>name：对标签名称的检索字符串<br>attrs: 对标签属性值的检索字符串，可标注属性检索<br>recursive: 是否对子孙全部检索，默认True<br>string:<>...</>中字符串区域的检索字符串<br><code>&lt;tag&gt;(..)</code>等价于 <code>&lt;tag&gt;.find_all(..)</code><br><code>soup(..)</code>等价于 <code>soup.find_all(..)</code><br><img src="/img/Crawler/18.png" srcset="/img/loading.gif" alt="图18">  </p><h3 id="实例：最好大学排名"><a href="#实例：最好大学排名" class="headerlink" title="实例：最好大学排名"></a>实例：最好大学排名</h3><p>功能描述<br>输入：大学排名URL链接 <a href="http://www.zuihaodaxue.com/zuihaodaxuepaiming2019.html" target="_blank" rel="noopener">http://www.zuihaodaxue.com/zuihaodaxuepaiming2019.html</a><br>输出：大学排名信息的屏幕输出（排名，大学名称，总分）<br>技术路线：requests-bs4<br>定向爬虫：仅对输入的URL进行爬取，不扩展爬取。<br>程序的结构设计：<br>步骤一：从网络上获取大学排名网页内容   getHTMLText()<br>步骤二：提取网页内容中信息到合适的数据结构   fillUnivList()<br>步骤三：利用数据结构展示并输出结果  printUnivList<br>实例编写：<br><img src="/img/Crawler/19.png" srcset="/img/loading.gif" alt="图19"><br><pre><code class="hljs python"><span class="hljs-comment">#CrawUnivRankingA.py</span><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<span class="hljs-keyword">import</span> bs4 <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getHTMLText</span><span class="hljs-params">(url)</span>:</span>    <span class="hljs-keyword">try</span>:        r = requests.get(url, timeout=<span class="hljs-number">30</span>)        r.raise_for_status()        r.encoding = r.apparent_encoding        <span class="hljs-keyword">return</span> r.text    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fillUnivList</span><span class="hljs-params">(ulist, html)</span>:</span>    soup = BeautifulSoup(html, <span class="hljs-string">"html.parser"</span>)    <span class="hljs-keyword">for</span> tr <span class="hljs-keyword">in</span> soup.find(<span class="hljs-string">'tbody'</span>).children:        <span class="hljs-keyword">if</span> isinstance(tr, bs4.element.Tag):            tds = tr(<span class="hljs-string">'td'</span>)            ulist.append([tds[<span class="hljs-number">0</span>].string, tds[<span class="hljs-number">1</span>].string, tds[<span class="hljs-number">3</span>].string]) <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printUnivList</span><span class="hljs-params">(ulist, num)</span>:</span>    print(<span class="hljs-string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(<span class="hljs-string">"排名"</span>,<span class="hljs-string">"学校名称"</span>,<span class="hljs-string">"总分"</span>))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num):        u=ulist[i]        print(<span class="hljs-string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(u[<span class="hljs-number">0</span>],u[<span class="hljs-number">1</span>],u[<span class="hljs-number">2</span>]))     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>    uinfo = []    url = <span class="hljs-string">'https://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html'</span>    html = getHTMLText(url)    fillUnivList(uinfo, html)    printUnivList(uinfo, <span class="hljs-number">20</span>) <span class="hljs-comment"># 20 univs</span></code></pre><br><img src="/img/Crawler/20.png" srcset="/img/loading.gif" alt="图20"><br>中文对齐问题的解决<br>采用中文字符的空格填充chr（12288）<br><pre><code class="hljs routeros">def printUnivList(ulist, num):    tplt = <span class="hljs-string">"&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;"</span>    <span class="hljs-builtin-name">print</span>(tplt.format(<span class="hljs-string">"排名"</span>,<span class="hljs-string">"学校名称"</span>,<span class="hljs-string">"总分"</span>,chr(12288)))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num):        <span class="hljs-attribute">u</span>=ulist[i]        <span class="hljs-builtin-name">print</span>(tplt.format(u[0],u[1],u[2],chr(12288)))</code></pre><br><img src="/img/Crawler/21.png" srcset="/img/loading.gif" alt="图21">  </p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Crawler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础知识（二）</title>
    <link href="/2020/01/15/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/01/15/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="用户-和-权限-的基本概念"><a href="#用户-和-权限-的基本概念" class="headerlink" title="用户 和 权限 的基本概念"></a>用户 和 权限 的基本概念</h3><p>基本概念：<br>用户是在Linux系统工作中重要的一环，用户管理包括用户 和组管理<br>在Linux系统中，不论是由本机或是远程登录系统，每个系统都必须要有一个账号，并且对于不同的系统资源拥有不同的使用权限<br>在Linux中，可以指定每一个用户 针对 不同的文件和目录 的 不同权限<br>对 文件和目录的权限包括：<br><img src="/img/linux/20.png" srcset="/img/loading.gif" alt="图20"> </p><h4 id="组"><a href="#组" class="headerlink" title="组"></a>组</h4><p>为了方便用户管理，提出了组的概念，在实际应用中，可以针对组设置好权限，然后将不同的用户添加 到对应的组中，从而不用依次为每一个用户设置权限<br><img src="/img/linux/21.png" srcset="/img/loading.gif" alt="图21"></p><h4 id="ls-l扩展"><a href="#ls-l扩展" class="headerlink" title="ls-l扩展"></a>ls-l扩展</h4><p><img src="/img/linux/22.png" srcset="/img/loading.gif" alt="图22"><br>ls-l可以查看文件夹下文件的详细信息，从左到右依次是：<br>权限，读一个字符如果是d 表示目录<br>硬链接数 通俗地讲，就是有多少钟方式，可以访问当前的目录/文件<br>拥有者，家目录下 文件/目录的拥有者通常都是当前用户<br>组，在Linux中，很多时候，会出现组名和用户名相同的情况<br>大小<br>时间<br>名称<br><img src="/img/linux/23.png" srcset="/img/loading.gif" alt="图23"></p><h4 id="chmod简单使用（重要）"><a href="#chmod简单使用（重要）" class="headerlink" title="chmod简单使用（重要）"></a>chmod简单使用（重要）</h4><p>chmod可以修改 用户/组 对 文件/目录的权限<br>命令格式如下：<br><code>chmod +/- rwx 文件名|目录名</code>  </p><h4 id="超级用户"><a href="#超级用户" class="headerlink" title="超级用户"></a>超级用户</h4><p>Linux系统中root账号通常用于系统的维护和管理，对操作系统的所有资源 具有所有访问权限<br>在大多数版本的linux中，都不推荐直接使用root账号登录系统<br>在Linux安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为标准用<code>sudo</code><br>su是 substitute user 的缩写，表示使用另一个用户的身份<br>sudo命令用来以其他身份来执行命令，预设的身份是 root<br>用户使用sudo时，必须先输入密码。之后会有5分钟的有效期限，超过期限必须重新输入密码  </p><h4 id="组管理-终端命令"><a href="#组管理-终端命令" class="headerlink" title="组管理 终端命令"></a>组管理 终端命令</h4><p>创建组/删除组的终端命令都需要通过sudo来执行<br><img src="/img/linux/24.png" srcset="/img/loading.gif" alt="图24">  </p><h4 id="用户管理-终端命令"><a href="#用户管理-终端命令" class="headerlink" title="用户管理 终端命令"></a>用户管理 终端命令</h4><p><img src="/img/linux/25.png" srcset="/img/loading.gif" alt="图25"><br>创建用户时，如果忘记添加-m选项指定新用户的家目录—最简单的方法就是删除用户，重新创建<br>创建用户时，默认会创建一个和用户名同名的组名<br>用户信息保存在/etc/passwd文件中  </p><h4 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h4><p><img src="/img/linux/26.png" srcset="/img/loading.gif" alt="图26"><br>passwd文件<br>/etc/passwd文件存放的时用户的信息，由6个分号组成的7个信息，分别是  </p><ol><li>用户名</li><li>密码（x. 表示加密的密码）</li><li>UID（用户标识）</li><li>GID（组标识）</li><li>用户全名或本地账号</li><li>家目录</li><li>登录使用的Schell，就是登录之后，使用的终端命令，Ubuntu默认是dash  </li></ol><p>usermod<br>usermod可以来设置用户的主组/附加组 和登录Shell 命令格式下：<br>主组：通常在新建用户指定，在etc/passwd的第四列GID对应的组<br>附加组：在etc/group中最后一列表示该组的用户列表，用于指定用户的附加权限<br>（设置了用户的附加组之后，需要重新登录才能生效）<br><img src="/img/linux/27.png" srcset="/img/loading.gif" alt="图27"><br>（默认使用useradd添加的用户是没有权限使用sudo以及root身份执行命令的，可以使用以下命令，将用户添加到sudo附加组中）<br><code>usermod -G sudo 用户名</code></p><p>which（重要）<br>提示<br><code>/etc/passwd</code> 是用于保存用户信息的文件<br><code>/usr/bin/passwd</code> 是用于修改用户密码的程序<br><code>which</code>命令可以查看执行命令的位置  </p><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><p><img src="/img/linux/28.png" srcset="/img/loading.gif" alt="图28"><br>su 不接用户名，可以切换到root。但是不推荐使用，因为不安全<br>exit示意图如下：<br><img src="/img/linux/29.png" srcset="/img/loading.gif" alt="图29">  </p><h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><p><img src="/img/linux/30.png" srcset="/img/loading.gif" alt="图30"><br>命令的格式如下：<br><img src="/img/linux/31.png" srcset="/img/loading.gif" alt="图31"><br>hmod在设置权限的时候，可以简单的使用三个数字分别对应拥有者/组和其他 用户的权限<br>直接修改文件|目录 读【写】执行权限，但是不能精确到拥有者【组】其他chmod +/-rwx 文件名|目录名<br><img src="/img/linux/32.png" srcset="/img/loading.gif" alt="图32"></p><h3 id="系统信息相关命令"><a href="#系统信息相关命令" class="headerlink" title="系统信息相关命令"></a>系统信息相关命令</h3><p><img src="/img/linux/33.png" srcset="/img/loading.gif" alt="图33"><br>本节内容主要是为了方便通过远程终端维护服务器时，查看服务器上当前 系统日期和时间/磁盘空间占用情况/程序执行情况<br>本小节学习的终端命令基本都是查询命令，通过这些命令对系统资源的使用情况有个了解  </p><h4 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h4><p><img src="/img/linux/34.png" srcset="/img/loading.gif" alt="图34"></p><h4 id="磁盘信息"><a href="#磁盘信息" class="headerlink" title="磁盘信息"></a>磁盘信息</h4><p><img src="/img/linux/35.png" srcset="/img/loading.gif" alt="图35"><br><code>-h</code>以人性化方式显示文件大小  </p><h4 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h4><p>所谓进程就是 通俗地说就是 当前正在执行的一个程序<br>默认只会显示当前用户通过终端启动的应用程序<br>ps选项说明功能<br><img src="/img/linux/36.png" srcset="/img/loading.gif" alt="图36"><br>使用kill命令的时候，最好只终止当前用户开启的进程，而不要终止root身份开启的进程<br>否则可能导致系统崩溃<br>要推出top 输入一个q即可  </p><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>目标：<br>查找文件：<code>find</code><br>软链接：<code>ln</code><br>打包和压缩： <code>tar</code><br>软件安装：<code>apt-get</code></p><h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h4><p>find命令功能非常强大，通常用来在 特定目录下 搜索 符合条件的文件<br><code>find 【路径】 - name “*.py”</code> 查找指定路径下扩展名是 .py 的文件，包括子目录  </p><ul><li>如果省略路径，表示在当前文件夹下查找</li><li>之前学习的通配符，在使用find命令时同时使用</li></ul><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><p><code>ln -s</code> 被链接的源文件  链接文件<br>建立文件的软链接，用通俗的方式讲类似于 Windows下的快捷方式<br>注意：<br>没有 -s选项建立的是一个硬链接文件，两个文件占用相同大小的硬盘空间，工作中机会不会建立文件的硬链接<br>源文件要使用绝对路径，不能使用相对路径，这样方便移动链接文件后，仍能够正常使用  </p><p>硬链接<br>在Linux中，文件名和文件数据是分开存储的<br><img src="/img/linux/37.png" srcset="/img/loading.gif" alt="图37"><br>在linux中，只有文件的硬链接数==0才会被删除<br>使用ls -l可以查看一个文件的硬链接的数量   </p><h4 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h4><p>打包压缩是日常工作中备份文件的一种方式在不同的操作系统中，常用的打包方式是不同的<br>windows 常用rar<br>mac常用 zip<br>linux常用tar.gz<br>打包/解包<br>tar是Linux中常用的备份工具，此命令可以把一系列文件打包到一个大文件中，也可以把一个打包的大文件恢复成一系列文件<br>tar的命令格式如下：  </p><h1 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h1><p><code>tar -cvf 打包文件.tar 被打包文件/路径....</code>  </p><h1 id="解包文件"><a href="#解包文件" class="headerlink" title="解包文件"></a>解包文件</h1><p><code>tar -xvf 打包文件.tar</code><br><img src="/img/linux/38.png" srcset="/img/loading.gif" alt="图38">  </p><ol><li>压缩/解压缩<br>tar与gzip命令结合可以实现文件的打包和压缩<br>tar只负责打包，但不压缩<br>用gzip压缩tar打包后的文件，其扩展名一般用xxx.tar.gz<br>在Linux中，最常见的压缩文件格式就是xxx.tar.gz<br>在tar命令中，有一个-z的选项可以调用gzip。从而方便的实现压缩和解压缩的功能<br><img src="/img/linux/39.png" srcset="/img/loading.gif" alt="图38"><br>C 解压缩到指定的路径，要解压缩的目录必须存在 </li><li>bzip2<br>tar和bzip2命令结合使用同样可以打包和压缩，其扩展名为xxx.tar.bz2<br>在tar命令中有个选项-j可以调用bzip2，从而可以方便的实现压缩和解压缩的功能<br><img src="/img/linux/40.png" srcset="/img/loading.gif" alt="图40"></li></ol><h4 id="通过apt安装-卸载-更新软件包"><a href="#通过apt安装-卸载-更新软件包" class="headerlink" title="通过apt安装/卸载/更新软件包"></a>通过apt安装/卸载/更新软件包</h4><p>apt是Advanced Packaging Tool, 是<br><img src="/img/linux/41.png" srcset="/img/loading.gif" alt="图41"></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础知识（一）</title>
    <link href="/2020/01/10/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/01/10/Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>内核（kernel）是系统的心脏，是运行程序和管理像磁盘和打印机登硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层。</p><h3 id="Linux文件和目录结构"><a href="#Linux文件和目录结构" class="headerlink" title="Linux文件和目录结构"></a>Linux文件和目录结构</h3><ul><li><p><code>/：</code>根目录，一般根目录下只存放目录，在linux下有且只有一个根目录，所有的东西都是从这里开始的。当在终端里输入/home﻿​，其实是在告诉电脑，先从/（根目录）开始，再进入home目录  </p></li><li><p><code>/bin、/usr/bin</code>: 可执行二进制文件的目录，如常用的命令<code>ls 、tar、mv、cat</code>等  </p></li><li><p><code>/dev</code>:  放置linux下的设备文件，访问该目录下的某个文件，相当于访问某个设备，常用的是挂载光驱<code>mount/dev/cdrom/mnt</code> </p></li><li><p><code>/boot</code>: 放置linux系统启动时用的一些文件，如linux的内核文件:<code>/boot/vmlinuz</code>，系统引导管理器：<code>/boot/grub</code></p></li><li><p><code>/etc</code>: 系统配置文件存放的目录, 不建议在此目录存放可执行文件</p></li><li><p><code>/home</code>: 系统默认的用户家目录,新增用户账号时, 用户的家目录都存放此目录下  </p></li><li><p><code>/lib、/usr/lib、/usr/local/lib</code>: 系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助 </p></li><li><p><code>/lost*fount</code>: 系统产生错误时，会将一些遗失的片段放置于此目录下  </p></li><li><p><code>/mnt: /media</code>: 光盘默认挂载点，通常将光盘挂载于/mnt/cdrom下，也可以选择任意位置挂载  </p></li><li><p><code>/opt</code>: 给主机额外安装软件所摆放的目录  </p></li><li><p><code>/proc</code>: 此目录的数据都在内存中，如系统核心、外部设备、网络状态，由于数据都存放在内存中，所以不占用磁盘空间，比较重要的文件有<code>/proc/cpuinfo、/proc/dma、/proc/net/</code>等  </p></li><li><p><code>/root</code>: 系统管理员root的家目录  </p></li></ul><p>在职场中，大量的服务器维护工作都是在远程 通过ssh客户端来完成的，并没有图形界面、所有的维护工作都需要命令来完成</p><p>小技巧：<br><code>ctrl + shift + =</code> 放大终端窗口的字体显示<br><code>ctrl + -</code>  缩小终端窗口中的字体显示</p><h3 id="常用的Linux指令"><a href="#常用的Linux指令" class="headerlink" title="常用的Linux指令"></a>常用的Linux指令</h3><p><img src="/img/linux/01.png" srcset="/img/loading.gif" alt="图1"></p><p>自动补全<br>在敲出文件/目录/命令 等等，可以<code>tab</code>补全</p><p>inux终端命令格式<br><code>command [-option] [parameter]</code></p><p>查阅命令帮助信息（知道）</p><ol><li><code>help  command --help</code> </li><li><code>man man command</code><br><img src="/img/linux/02.png" srcset="/img/loading.gif" alt="图2"></li></ol><p>Linux下文件或者目录名称最长可以有256个字符<br>以.开头的文件为隐藏文件，需要用-a 参数才能显示<br><code>.</code>代表当前目录<br><code>..</code>代表上一级目录 </p><h4 id="ls的详细介绍"><a href="#ls的详细介绍" class="headerlink" title="ls的详细介绍"></a>ls的详细介绍</h4><p>ls列出目录下的内容，选项如下<br><img src="/img/linux/03.png" srcset="/img/loading.gif" alt="图3"></p><p>ls通配符的使用<br><img src="/img/linux/04.png" srcset="/img/loading.gif" alt="图4"></p><h4 id="cd的详细介绍"><a href="#cd的详细介绍" class="headerlink" title="cd的详细介绍"></a>cd的详细介绍</h4><p>cd是英文单词change directory 的简写，其功能为更改当前的工作目录，也是用户最常用的命令之一<br>注意： linux所有的目录和文件名都是大小写敏感的<br><img src="/img/linux/05.png" srcset="/img/loading.gif" alt="图5"><br>（~波浪号代表用户家目录）</p><p>相对路径：在输入路径时，最前面不是/或者~，表示相对当前目录 所在的目录位置<br>绝对路劲：在输入路径时，最前面是/或者~，表示 根目录/家目录开始的具体目录位置</p><h4 id="touch的详细介绍"><a href="#touch的详细介绍" class="headerlink" title="touch的详细介绍"></a>touch的详细介绍</h4><p>创建文件或者修改文件时间<br>-如果文件不存在，可以创建一个空白文件<br>-如果文件已经存在，可以修改文件的末次修改日期  </p><h4 id="mkdir的详细介绍"><a href="#mkdir的详细介绍" class="headerlink" title="mkdir的详细介绍"></a>mkdir的详细介绍</h4><p>创建一个新的目录<br><code>-p</code>可以递归创建目录<br>新建目录的名称 不能与当前目录中 已有的目录或文件 同名 </p><h4 id="rm的详细介绍"><a href="#rm的详细介绍" class="headerlink" title="rm的详细介绍"></a>rm的详细介绍</h4><p>删除文件或目录<br>使用rm命令要小心，因为文件删除后不能恢复<br>选项<br><code>-f</code>强制删除，忽略不存在的文件，无需提示<br><code>-r</code> 递归地删除目录下的内容，删除文件夹时必须加此参数</p><h4 id="拷贝和移动文件"><a href="#拷贝和移动文件" class="headerlink" title="拷贝和移动文件"></a>拷贝和移动文件</h4><p><img src="/img/linux/06.png" srcset="/img/loading.gif" alt="图6"></p><h5 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h5><p>tree命令可以树状图列出文件目录结构<br>选项<br><code>-d</code>  只显示目录  </p><h5 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h5><p>p命令的功能是将给出的文件或目录复制到另一个文件或目录中，相当于DOS底下的copy命令<br><img src="/img/linux/07.png" srcset="/img/loading.gif" alt="图7"><br>cp 复制文件路径即文件  目标文件</p><h5 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h5><p><code>mv</code> 源文件 目标文件<br><code>-i</code> 覆盖文件前提示<br>可以起到重命名的作用<br><img src="/img/linux/08.png" srcset="/img/loading.gif" alt="图8"></p><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><p><img src="/img/linux/09.png" srcset="/img/loading.gif" alt="图9"></p><h5 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h5><p><code>cat</code> 命令可以用来查看文件内容、创建文件、文件合并、追加文件内容等功能<br><code>cat</code> 会一次显示所有的内容，适合查看内容较少的文本文件  </p><h5 id="more"><a href="#more" class="headerlink" title="more"></a>more</h5><p>more命令可以用于分屏显示文件内容，每次只显示一页内容<br>适合查看内容较多的文本文件<br>使用more的操作键<br>空格键  显示手册页的下一屏<br><img src="/img/linux/10.png" srcset="/img/loading.gif" alt="图10"></p><h5 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h5><p>Linux系统中<code>grep</code>命令是一种强大的文本搜索工具<br><code>grep</code>允许对文本文件进行 模式查找，所谓模式查找，又被称为正则表达式<br><img src="/img/linux/11.png" srcset="/img/loading.gif" alt="图11"><br><img src="/img/linux/12.png" srcset="/img/loading.gif" alt="图12"><br>常用的两种模式查找<br><img src="/img/linux/13.png" srcset="/img/loading.gif" alt="图13"></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="echo-文字内容"><a href="#echo-文字内容" class="headerlink" title="echo 文字内容"></a><code>echo</code> 文字内容</h5><p><code>echo</code>会在终端中显示参数指定的文字，通常会和 重定向联合使用  </p><h5 id="重定向-gt-和-gt-gt"><a href="#重定向-gt-和-gt-gt" class="headerlink" title="重定向&gt;和&gt;&gt;"></a>重定向<code>&gt;</code>和<code>&gt;&gt;</code></h5><p><code>Linux</code>允许将命令执行结果，重定向到一个文件<br>将本应显示在终端上的内容输出/追加到指定文件中<br>其中<br><code>&gt;</code>表示输出，会覆盖文件原有的内容<br><code>&gt;&gt;</code>表示追加，会将内容追加到已有文件的末尾  </p><h5 id="管道（二次处理）"><a href="#管道（二次处理）" class="headerlink" title="管道（二次处理）|"></a>管道（二次处理）<code>|</code></h5><p>linux允许将一个命令的输出 可以通过管道 作为另一个命令的输入<br>可以理解现实生活中的管子，一头塞东西进去，另一头取出来，这里的<br><code>|</code> 分为左右两端，左端塞东西（写） 右端取东西（读） </p><p>常用的管道命令有：<br>more：分屏显示内容<br>grep：在命令执行结果的基础上查询指定的文本  </p><h3 id="远程管理常用命令"><a href="#远程管理常用命令" class="headerlink" title="远程管理常用命令"></a>远程管理常用命令</h3><h4 id="关机-重启"><a href="#关机-重启" class="headerlink" title="关机/重启"></a>关机/重启</h4><p><code>shutdown 选项 时间</code><br><code>shutdown</code>命令可以安全关闭或者重新启动系统<br><code>shutdown -r 时间</code>  可以重新启动  <code>shutdown -r now</code> 立即重启  </p><h4 id="查看或配置网卡信息"><a href="#查看或配置网卡信息" class="headerlink" title="查看或配置网卡信息"></a>查看或配置网卡信息</h4><p>网卡<br>网卡是一个专门负责网络通讯的硬件设备<br>IP地址是设置在网卡上的地址信息<br>我们可以把电脑 比作 电话，网卡相当于SIM卡，IP地址相当于电话号码  </p><p>IP地址<br>每台联网的电脑上都有IP地址，是保证电脑之间正常通讯的重要设置<br>注意：每台电脑的IP地址不能相同，否则会出现IP地址冲突，并且没有办法正常通讯<br><img src="/img/linux/14.png" srcset="/img/loading.gif" alt="图14"><br>ifconig可以查看/配置计算机当前的<br><img src="/img/linux/15.png" srcset="/img/loading.gif" alt="图15"></p><p>更方便对应ip地址，可输入：<code>ifconfig | grep inetping</code><br>检测到目标主机是否正常连接<br><code>ping IP</code>地址<br>检测本地网卡工作正常<br><code>ping  127.0.0.1</code><br><code>ping</code> 一般用于检测当前计算机于目标计算机之间的网络是否通畅，数值越大，速度越慢  </p><h4 id="远程登陆和复制文件"><a href="#远程登陆和复制文件" class="headerlink" title="远程登陆和复制文件"></a>远程登陆和复制文件</h4><h5 id="ssh基础（重点）"><a href="#ssh基础（重点）" class="headerlink" title="ssh基础（重点）"></a>ssh基础（重点）</h5><p>在Linux中SSH是非常常用的工具，通过SSH 客户端 我们可以连接到运行了SSH服务器的远程机器上<br>数据传输是加密的，可以防止信息泄露<br>数据传输是压缩的，可以提高传输速度<br>SSH客户端是一种使用Secure Shell（SSH）协议连接到远程计算机的软件程序<br>SSH是目前较可靠，专为远程登录会话和其他网络服务 提供安全性的协议  </p><ol><li><p>域名和端口号<br>域名：由一串用点分隔的名字组成，例如：<code>www.itcast.cn</code>是IP地址的别名，方便用户记忆<br>端口号：通过IP地址可以找到网络上的计算机<br>而通过端口号可以找到计算机上运行的应用程序<br>SSH服务器的默认端口号是22，如果是默认端口号，在连接的时候可以省略<br>常见服务端口号如下：<code>22 80 443</code></p></li><li><p>ssh客户端的简单使用<br><code>ssh [-p port] user@remote</code><br>user 是远程机器上的用户名。如果不指定的话默认为当前用户<br>remote 是远程机器的地址，可以是IP/域名，或者是后面会提到的别名<br>port 是SSH Server监听的端口，如果不指定，就默认为22<br>使用exit退出当前用户的登录<br>注意：ssh这个终端命令只能在Linux或者Unix系统下使用<br>如果在Windows系统中，可以安装Putty或者Xshell客户端软件即可<br><img src="/img/linux/16.png" srcset="/img/loading.gif" alt="图16"></p></li></ol><h5 id="scp（掌握）"><a href="#scp（掌握）" class="headerlink" title="scp（掌握）"></a>scp（掌握）</h5><p> scp就是secure copy，是一个在Linux下用来进行远程拷贝文件的命令（跟在ip后面冒号不可省略）<br>它的地址格式与ssh基本相同，需要注意的是，在指定端口时用的是大写的-P而不是小写的<br><img src="/img/linux/17.png" srcset="/img/loading.gif" alt="图17"><br>如果在Windows系统中，可以安装Putty，使用pscp命令行工具或者安装Filezilla使用FTP进行文件传<br><img src="/img/linux/18.png" srcset="/img/loading.gif" alt="图18"></p><h5 id="SSH高级（知道）"><a href="#SSH高级（知道）" class="headerlink" title="SSH高级（知道）"></a>SSH高级（知道）</h5><ol><li>免密码登陆<br>步骤：<br>配置公钥<br>执行ssh-keygen即可生成SSH钥匙，一路回车即可<br>上传公钥到服务器<br>执行ssh-copy-id -P port ﻿user@remote,可以让远程服务器记住我们的公钥<br><img src="/img/linux/19.png" srcset="/img/loading.gif" alt="图19"></li></ol><p>2）配置别名<br>每次都输入ssh -P port user@remote,时间久了会觉得很麻烦，特别是当user，port和remote都要输入，而且还不好记忆<br>而配置别名可以让我们进一步偷懒，比如用ssh mac来替代上面一长串，那么就在~/.ssh/config里面追加以下内容<br><pre><code class="hljs routeros">Host myserverHostName ip地址User ithrimaport 22</code></pre><br>保存之后，即可用ssh mac 实现远程登录了，scp同样可以使用  </p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git&amp;Github</title>
    <link href="/2019/11/15/%E5%A5%BD%E7%94%A8%E7%9A%84git/"/>
    <url>/2019/11/15/%E5%A5%BD%E7%94%A8%E7%9A%84git/</url>
    
    <content type="html"><![CDATA[<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><ul><li><p>初始化一个Git仓库，使用<code>git init</code>命令。<br>添加文件到Git仓库，分两步：  </p><ol><li>使用命令git add <file>，注意，可反复多次使用，添加多个文件；</li><li>使用命令git commit -m <message>，完成。</li></ol></li><li><p>要随时掌握工作区的状态，使用<code>git status</code>命令。<br>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p></li><li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。<br>(HEAD^是指的上一个版本HEAD^^指的是上上个版本)</p></li><li><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。  </p></li><li><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。<br><img src="/img/git/1.png" srcset="/img/loading.gif" alt="分支示意图"></p></li><li><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到commit中 </p></li><li><p>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。    </p></li><li>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。      </li><li><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。  </p></li><li><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容.  </p></li><li><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 </p></li></ul><h3 id="关联远程库推送"><a href="#关联远程库推送" class="headerlink" title="关联远程库推送"></a>关联远程库推送</h3><ul><li>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；  </li><li>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；  </li><li>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；  </li></ul><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p><h3 id="克隆远程库项目"><a href="#克隆远程库项目" class="headerlink" title="克隆远程库项目"></a>克隆远程库项目</h3><ul><li>从远程库克隆<br><code>git clone git@github.com:Mango/gitskills.git</code></li><li>要克隆一个仓库，首先必须知道仓库的地址然后使用<code>git clone  git@</code>  </li></ul><h3 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h3><p>Git鼓励大量使用分支：</p><ul><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git checkout &lt;name&gt;或者git switch &lt;name&gt;</code></li><li>创建+切换分支：<code>git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code>  </li></ul><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。  </p><ul><li>用<code>git log --graph</code>命令可以看到分支合并图。</li></ul><p>在实际开发中，我们应该按照几个基本原则进行分支管理：<br>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；<br>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；<br>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。  </p><ul><li>Git分支十分强大，在团队开发中应该充分应用。<br>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。  </li><li><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；<br>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。  </p></li><li><p>开发一个新feature，最好新建一个分支；<br>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p></li><li><p>多人协作的工作模式通常是这样：<br>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；<br>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；<br>如果合并有冲突，则解决冲突，并在本地提交；<br>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！<br>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。<br>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p></li><li><p>查看远程库信息，使用<code>git remote -v</code>；<br>本地新建的分支如果不推送到远程，对其他人就是不可见的；  </p></li><li><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；  </p></li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；    </li><li>建立本地分支和远程分支的关联，使用<code>git branch   --set-upstream branch-name origin/branch-name</code>；<br>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。  </li></ul><p>rebase操作可以把本地未push的分叉提交历史整理成直线；<br>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。 </p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul><li>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起<br>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；<br>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...</code>“可以指定标签信息；<br>命令<code>git tag</code>可以查看所有标签。<br>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字<br>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；<br>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；<br>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；<br>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。 </li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在GitHub上，可以任意Fork开源仓库；<br>自己拥有Fork后的仓库的读写权限；<br>可以推送pull request给官方仓库来贡献代码。</p><p>让Git显示颜色，会让命令输出看起来更醒目：<br><code>git config --global color.ui true</code></p>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM的使用</title>
    <link href="/2019/10/08/VIM%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/10/08/VIM%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="光标命令"><a href="#光标命令" class="headerlink" title="光标命令"></a>光标命令</h3><pre><code class="hljs properties"><span class="hljs-attr">h</span> <span class="hljs-string">左移一个字符</span><span class="hljs-attr">l</span> <span class="hljs-string">右移一个字符</span><span class="hljs-attr">j</span> <span class="hljs-string">下移一行</span><span class="hljs-attr">k</span> <span class="hljs-string">上移一行</span><span class="hljs-attr">w</span> <span class="hljs-string">前移一个单词，光标停在下一个单词开头</span><span class="hljs-attr">W</span> <span class="hljs-string">移动下一个单词开头，但忽略一些标点</span><span class="hljs-attr">e</span> <span class="hljs-string">前移一个单词，光标停在下一个单词末尾</span><span class="hljs-attr">E</span> <span class="hljs-string">移动到下一个单词末尾，如果词尾有标点，则移动到标点</span><span class="hljs-attr">b</span> <span class="hljs-string">后移一个单词，光标停在上一个单词开头</span><span class="hljs-attr">B</span> <span class="hljs-string">移动到上一个单词开头，忽略一些标点</span><span class="hljs-meta">(</span> <span class="hljs-string">前移1句</span><span class="hljs-meta">)</span> <span class="hljs-string">后移1句</span><span class="hljs-meta">&#123;</span> <span class="hljs-string">前移1段</span><span class="hljs-meta">&#125;</span> <span class="hljs-string">后移1段​</span></code></pre><h3 id="滚屏命令"><a href="#滚屏命令" class="headerlink" title="滚屏命令"></a>滚屏命令</h3><pre><code class="hljs properties"><span class="hljs-meta">ctrl+f</span> <span class="hljs-string">下翻一屏</span><span class="hljs-meta">ctrl+b</span> <span class="hljs-string">上翻一屏</span><span class="hljs-meta">ctrl+d</span> <span class="hljs-string">下翻半屏</span><span class="hljs-meta">ctrl+u</span> <span class="hljs-string">上翻半屏</span><span class="hljs-meta">ctrl+e</span> <span class="hljs-string">向下滚动一行</span><span class="hljs-meta">ctrl+y</span> <span class="hljs-string">向上滚动一行</span><span class="hljs-meta">n%</span> <span class="hljs-string">到文件n%的位置</span><span class="hljs-attr">zz</span> <span class="hljs-string">将当前行移动到屏幕中央</span><span class="hljs-attr">zt</span> <span class="hljs-string">将当前行移动到屏幕顶端</span><span class="hljs-attr">zb</span> <span class="hljs-string">将当前行移动到屏幕底端​</span></code></pre><h3 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h3><pre><code class="hljs excel">第一部分 基本插入I 在当前行第一个非空字符前插入gI 在当前行第一列插入a 在光标后插入A 在当前行最后插入o 在下面新建一行插入O 在上面新建一行插入第二部分 改写插入c[<span class="hljs-built_in">n</span>]w 改写光标后<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个词c[<span class="hljs-built_in">n</span>]l 改写光标后<span class="hljs-built_in">n</span>个字母,l (vim中光标右移一个字符命令)c[<span class="hljs-built_in">n</span>]h 改写光标前<span class="hljs-built_in">n</span>个字母, h (vim中光标左移一个字符命令)[<span class="hljs-built_in">n</span>]cc 修改当前[<span class="hljs-built_in">n</span>]行[<span class="hljs-built_in">n</span>]s 以输入的文本替代光标之后<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符，相当于c[<span class="hljs-built_in">n</span>]l[<span class="hljs-built_in">n</span>]S 删除指定数目的行，并以所输入文本代替之​</code></pre><h3 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h3><pre><code class="hljs excel">y 复制在可视模式下选中的文本yy <span class="hljs-built_in">or</span> Y 复制整行文本y[<span class="hljs-built_in">n</span>]w 复制一(<span class="hljs-built_in">n</span>)个词y[<span class="hljs-built_in">n</span>]l 复制光标右边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符y[<span class="hljs-built_in">n</span>]h 复制光标左边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符y$ 从光标当前位置复制到行尾<span class="hljs-symbol">y0</span> 从光标当前位置复制到行首​﻿​</code></pre><h3 id="剪切和粘贴命令"><a href="#剪切和粘贴命令" class="headerlink" title="剪切和粘贴命令"></a>剪切和粘贴命令</h3><pre><code class="hljs excel">[<span class="hljs-built_in">n</span>]x 剪切光标右边<span class="hljs-built_in">n</span>个字符，相当于d[<span class="hljs-built_in">n</span>]l[<span class="hljs-built_in">n</span>]X 剪切光标左边<span class="hljs-built_in">n</span>个字符，相当于d[<span class="hljs-built_in">n</span>]hp 在光标之后粘贴P 在光标之前粘贴​</code></pre><h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><pre><code class="hljs excel">d 删除（剪切）在可视模式下选中的文本d$ <span class="hljs-built_in">or</span> D 删除（剪切）当前位置到行尾的内容d[<span class="hljs-built_in">n</span>]w 删除（剪切）<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个单词d[<span class="hljs-built_in">n</span>]l 删除（剪切）光标右边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符d[<span class="hljs-built_in">n</span>]h 删除（剪切）光标左边<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)个字符<span class="hljs-symbol">d0</span> 删除（剪切）当前位置到行首的内容[<span class="hljs-built_in">n</span>] dd 删除（剪切）<span class="hljs-number">1</span>(<span class="hljs-built_in">n</span>)行​</code></pre><h3 id="撤销命令"><a href="#撤销命令" class="headerlink" title="撤销命令"></a>撤销命令</h3><pre><code class="hljs properties"><span class="hljs-attr">u</span> <span class="hljs-string">撤销最后执行的命令</span><span class="hljs-attr">U</span> <span class="hljs-string">撤销对整行的修改​</span></code></pre><h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><pre><code class="hljs applescript">/<span class="hljs-built_in">word</span> 在后面的文本中查找<span class="hljs-built_in">word</span>?<span class="hljs-built_in">word</span> 在前面的文本中查找<span class="hljs-built_in">word</span>/pattern/+<span class="hljs-built_in">number</span> 将光标停在包含pattern的行后面第<span class="hljs-built_in">number</span>行上/pattern/-<span class="hljs-built_in">number</span> 将光标停在包含pattern的行前面第<span class="hljs-built_in">number</span>行上n 向后查找下一个N 向前查找下一个​</code></pre><h3 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h3><pre><code class="hljs elixir"><span class="hljs-symbol">:s/old/new/g</span> 可以替换 old 为 new替换两行之间出现的每个匹配串，操作如下<span class="hljs-symbol">:</span><span class="hljs-comment">#,#s/old/new/g 其中 #,# 代表的是替换操作的若干行中首尾两行的行号。</span><span class="hljs-symbol">:%s/old/new/g</span> 则是替换整个文件中的每个匹配串。<span class="hljs-symbol">:%s/old/new/gc</span> 会找到整个文件中的每个匹配串，并且对每个匹配串提示是否进行替换。</code></pre><h3 id="排版命令"><a href="#排版命令" class="headerlink" title="排版命令"></a>排版命令</h3><pre><code class="hljs ruby">&lt;&lt; 向左缩进一个shiftwidth<span class="hljs-meta">&gt;&gt;</span> 向右缩进一个shiftwidth<span class="hljs-symbol">:ce</span>(nter) 本行文字居中<span class="hljs-symbol">:le</span>(ft) 本行文字靠左<span class="hljs-symbol">:ri</span>(ght) 本行文字靠右</code></pre><h3 id="命令行中分屏打开多文件"><a href="#命令行中分屏打开多文件" class="headerlink" title="命令行中分屏打开多文件"></a>命令行中分屏打开多文件</h3><pre><code class="hljs css"><span class="hljs-selector-tag">-o</span> 水平分屏<span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">-o</span><span class="hljs-selector-attr">[n]</span> <span class="hljs-selector-tag">file1</span> <span class="hljs-selector-attr">[file2 ...]</span><span class="hljs-selector-tag">-O</span> 垂直分屏<span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">-O</span><span class="hljs-selector-attr">[n]</span> <span class="hljs-selector-tag">file1</span> <span class="hljs-selector-attr">[file2 ...]</span></code></pre><h3 id="vim中命令模式分屏"><a href="#vim中命令模式分屏" class="headerlink" title="vim中命令模式分屏"></a>vim中命令模式分屏</h3><ol><li>垂直分屏<pre><code class="hljs vim">:<span class="hljs-keyword">vs</span> [<span class="hljs-keyword">file</span>]:<span class="hljs-keyword">vs</span> 将当前文件垂直分屏:<span class="hljs-keyword">vs</span> <span class="hljs-keyword">file</span> 创建新文件并垂直分屏</code></pre></li><li>水平分屏<pre><code class="hljs vim">:<span class="hljs-keyword">sv</span> [<span class="hljs-keyword">file</span>]:<span class="hljs-keyword">sv</span> 将当前文件水平分屏:<span class="hljs-keyword">sv</span> <span class="hljs-keyword">file</span> 创建新文件并水平分屏</code></pre></li></ol><h3 id="分屏屏间光标移动"><a href="#分屏屏间光标移动" class="headerlink" title="分屏屏间光标移动"></a>分屏屏间光标移动</h3><ol><li>分屏间循环移动光标<br><code>ctrl-w ctrl-w</code></li><li>光标移到右边的屏中<br><code>ctrl+w l</code></li><li>光标移到左边的屏中<br><code>ctrl+w h</code></li><li>光标移到上面的屏中<br><code>ctrl+w k</code></li><li>光标移到下边的屏中<br><code>ctrl+w j</code></li><li>光标移到下一个屏中<br><code>ctrl+w w</code></li><li>把光标移到上一个屏中<br><code>ctrl+w p</code></li></ol><h3 id="分屏的移动"><a href="#分屏的移动" class="headerlink" title="分屏的移动"></a>分屏的移动</h3><p>四个键位同上相比均换成了大写</p><ol><li>把当前分屏移动到最左边<br><code>ctrl+w H</code></li><li>把当前分屏移动到上面并扩展到整屏的宽度<br><code>ctrl+w K</code></li><li>把当前分屏移动到最下边<br><code>ctrl+w J</code> </li><li>把当前分屏移动到最右边<br><code>ctrl+w L</code> </li></ol><h3 id="关闭分屏"><a href="#关闭分屏" class="headerlink" title="关闭分屏"></a>关闭分屏</h3><ol><li>关闭当前子屏<br><code>ctrl+wc</code></li><li>关闭当前子屏，若为最后一个，则退出vim<br><code>ctrl+w q</code> </li><li>hide<br><code>:hide 关闭当前窗口</code> </li><li>only<br><code>:only 仅保持此窗口开启</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown的基本语法</title>
    <link href="/2019/06/08/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2019/06/08/markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre><code class="hljs clean">#一级标题  ##二级标题  ###三级标题  ####四级标题  #####五级标题  ######六级标题</code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>1     <code>* 1</code></li><li>2     <code>* 2</code></li><li>3     <code>* 3</code></li></ul><ol><li>1.</li><li>2.</li><li>3.</li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>只需要在文本前加入&gt;即可</p><blockquote><p>这里是引用 </p></blockquote><p>注意符合和文本间要空格</p><h2 id="插入图片和链接"><a href="#插入图片和链接" class="headerlink" title="插入图片和链接"></a>插入图片和链接</h2><p>插入链接 [超链接名] (链接地址 “超链接title”)  </p><p>插入图片<br>! [图片alt] (图片地址 ‘’图片title’’)<br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>生成表格<br><pre><code class="hljs ruby"><span class="hljs-params">| Tables        |</span> Are           <span class="hljs-params">| Cool  |</span>  <span class="hljs-params">| ------------- |</span><span class="hljs-symbol">:-------------</span><span class="hljs-symbol">:|</span> -----<span class="hljs-symbol">:|</span>   <span class="hljs-params">| col 3 is      |</span> right-aligned <span class="hljs-params">| $1600 |</span>  <span class="hljs-params">| col 2 is      |</span> centered      <span class="hljs-params">|   $12 |</span>  <span class="hljs-params">| zebra stripes |</span> are neat      <span class="hljs-params">|    $1 |</span></code></pre></p><div class="table-container"><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></div><p>第二行分割表头和内容。<br><code>-</code>有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>原生的语法两边都要用 | 包起来</p><h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><p>用两个<code>*</code>包起来<br><strong>这是加粗的文字</strong><br>用一个<code>*</code>包起来<br><em>这是倾斜的文字</em><br>用<strong><em>包起来  </em></strong>这是斜体加粗的文字<em>*</em><br>用～包起来<br><del>这是加删除线的文字</del></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>单行代码之间用反引号包起来<br>代码块两边分别用三个反引号包起来，且两边的反引号单独占一行<br><code>``` </code><br>  代码…<br>  代码…<br>  代码…<br><code>``` </code></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>只需要三个<em>*</em></p><hr>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
